{"version":3,"sources":["../src/accordion.js"],"names":["Selectors","DATA_ACCORDION","DATA_ACCORDION_ROW","DATA_VISIBLE","DATA_TARGET","DATA_TOGGLE_MULTIPLE","DATA_PARENT","ARIA_EXPANDED","ARIA_CONTROLS","ARIA_HIDDEN","ARIA_LABELLEDBY","TABINDEX","Events","CLICK","KEYDOWN","Messages","NO_VISIBLE_ERROR","id","NO_ROW_ERROR","NO_HEADER_ID_ERROR","NO_PARENT_ERROR","NO_CONTENT_ERROR","Accordion","_render","bind","_accordionButtons","_accordionContentsAttr","_accordionContents","_activeContainer","_activeButton","_activeAccordionRowId","_activeRowAttr","_activeRow","_activeContainerId","_activeContainerAttr","_activeContent","_activeButtonExpandState","_activeContentHiddenState","_headerLevels","accordionButtonSelector","_getPossibleAccordionButtonAttrs","document","querySelectorAll","length","forEach","button","_setupAccordion","addEventListener","removeEventListener","event","preventDefault","target","getAttribute","_getAccordionRowAttr","querySelector","console","error","NO_ACCORDION_ERROR","getElementById","accordionButtonState","_closeAllIfToggleable","_toggleSelectedAccordion","buttonId","buttonContent","accordionRowAttr","accordionRow","buttonHeaderAttr","_getPossibleAccordionHeaderAttrs","buttonHeader","buttonContentChildren","setAttribute","contentShouldExpand","style","maxHeight","scrollHeight","element","attr","map","num","join","hasAttribute","allContentAttr","allRows","allContent","allButtons","content","_toggleAttributeInCollection","activeContentBlock","value","elements","attributeName","currentValue","newValue","Utils"],"mappings":"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","sourcesContent":["import Utils, { getFocusableElements } from \"../utils\"\n\nconst Selectors = {\n  // unique\n  DATA_ACCORDION: \"data-accordion\",\n  DATA_ACCORDION_ROW: \"data-accordion-row\",\n  // common\n  DATA_VISIBLE: \"data-visible\",\n  DATA_TARGET: \"data-target\",\n  DATA_TOGGLE_MULTIPLE: \"data-toggle-multiple\",\n  DATA_PARENT: \"data-parent\",\n  // accessibility\n  ARIA_EXPANDED: \"aria-expanded\",\n  ARIA_CONTROLS: \"aria-controls\",\n  ARIA_HIDDEN: \"aria-hidden\",\n  ARIA_LABELLEDBY: \"aria-labelledby\",\n  TABINDEX: \"tabindex\",\n}\n\nconst Events = {\n  CLICK: \"click\",\n  KEYDOWN: \"keydown\",\n}\n\nconst Messages = {\n  NO_VISIBLE_ERROR: id =>\n    `Could not find parent with [data-visible] attribute associated with [data-target='${id}'].`,\n  NO_ROW_ERROR: id => `Could not find [data-accordion-row] associated with ${id}.`,\n  NO_HEADER_ID_ERROR: id => `Could not find header tag associated with [data-target='${id}'].`,\n  NO_PARENT_ERROR: id => `Could not find [data-parent] associated with [data-target='${id}'].`,\n  NO_CONTENT_ERROR: id =>\n    `Could not find accordion content block with [id] ${id} associated with [data-target='${id}'].`,\n}\n\n/**\n * Accordion component class.\n * @module Accordion\n * @requires Utils\n */\nexport default class Accordion extends Utils {\n  constructor() {\n    super()\n\n    // events\n    this._render = this._render.bind(this)\n\n    // all accordions\n    this._accordionButtons = []\n    this._accordionContentsAttr = \"\"\n    this._accordionContents = []\n\n    // active accordion\n    this._activeContainer = {}\n    this._activeButton = {}\n    this._activeAccordionRowId = \"\"\n    this._activeRowAttr = \"\"\n    this._activeRow = \"\"\n    this._activeContainerId = \"\"\n    this._activeContainerAttr = \"\"\n    this._activeContent = {}\n    this._activeButtonExpandState = \"\"\n    this._activeContentHiddenState = \"\"\n\n    // other data\n    this._headerLevels = [1, 2, 3, 4, 5, 6]\n  }\n\n  // public\n\n  /**\n   * Sets up accordion components and listens to buttons for events.\n   * Begin listening to [data-accordion-button] elements\n   */\n  start() {\n    const accordionButtonSelector = this._getPossibleAccordionButtonAttrs(\n      `[${Selectors.DATA_ACCORDION}]`\n    )\n    this._accordionButtons = document.querySelectorAll(accordionButtonSelector)\n\n    if (this._accordionButtons.length) {\n      this._accordionButtons.forEach(button => {\n        this._setupAccordion(button)\n        button.addEventListener(Events.CLICK, this._render)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to accordion button events.\n   */\n  stop() {\n    this._accordionButtons.forEach(button => {\n      button.removeEventListener(Events.CLICK, this._render)\n    })\n  }\n\n  // private\n\n  /**\n   * Open accordion content associated with an accordion button.\n   * @param {Object} event - The event object\n   */\n  _render(event) {\n    event.preventDefault()\n\n    this._activeButton = event.target\n    this._activeAccordionRowId = this._activeButton.getAttribute(Selectors.DATA_TARGET)\n\n    this._activeRowAttr = this._getAccordionRowAttr(this._activeAccordionRowId)\n    this._activeRow = document.querySelector(this._activeRowAttr)\n\n    if (!this._activeButton.getAttribute(Selectors.DATA_PARENT)) {\n      return console.error(Messages.NO_PARENT_ERROR(this._activeAccordionRowId))\n    }\n\n    this._activeContainerId = this._activeButton.getAttribute(Selectors.DATA_PARENT)\n    this._activeContainerAttr = `[${Selectors.DATA_ACCORDION}='${this._activeContainerId}']`\n\n    if (!document.querySelector(this._activeContainerAttr)) {\n      return console.error(Messages.NO_ACCORDION_ERROR(this._activeContainerId))\n    }\n\n    this._activeContainer = document.querySelector(this._activeContainerAttr)\n    this._activeContent = document.getElementById(this._activeAccordionRowId)\n\n    const accordionButtonState = this._activeRow.getAttribute(Selectors.DATA_VISIBLE)\n\n    this._activeButtonExpandState = accordionButtonState === \"true\" ? \"false\" : \"true\"\n    this._activeContentHiddenState = this._activeButtonExpandState === \"false\" ? \"true\" : \"false\"\n\n    this._closeAllIfToggleable()\n    this._toggleSelectedAccordion()\n  }\n\n  /**\n   * Add initial attributes to accordion elements.\n   * @param {Element} button - A button element that triggers an accordion.\n   */\n  _setupAccordion(button) {\n    const buttonId = button.getAttribute(Selectors.DATA_TARGET)\n\n    if (!document.getElementById(buttonId)) {\n      return console.error(Messages.NO_CONTENT_ERROR(buttonId))\n    }\n\n    const buttonContent = document.getElementById(buttonId)\n    const accordionRowAttr = this._getAccordionRowAttr(buttonId)\n\n    if (!document.querySelector(accordionRowAttr)) {\n      return console.error(Messages.NO_ROW_ERROR(buttonId))\n    }\n\n    const accordionRow = document.querySelector(accordionRowAttr)\n    const buttonHeaderAttr = this._getPossibleAccordionHeaderAttrs(accordionRowAttr)\n    const buttonHeader = document.querySelectorAll(buttonHeaderAttr)[0]\n\n    if (!buttonHeader || !buttonHeader.id) {\n      console.error(Messages.NO_HEADER_ID_ERROR(buttonId))\n    }\n\n    const buttonContentChildren = getFocusableElements(`#${buttonContent.id}`)\n\n    button.setAttribute(Selectors.ARIA_CONTROLS, buttonId)\n    buttonContent.setAttribute(Selectors.ARIA_LABELLEDBY, buttonHeader.id)\n\n    if (!accordionRow.getAttribute(Selectors.DATA_VISIBLE)) {\n      return console.error(Messages.NO_VISIBLE_ERROR(buttonId))\n    }\n\n    const contentShouldExpand = accordionRow.getAttribute(Selectors.DATA_VISIBLE)\n    if (contentShouldExpand === \"true\") {\n      buttonContent.style.maxHeight = `${buttonContent.scrollHeight}px`\n      button.setAttribute(Selectors.ARIA_EXPANDED, \"true\")\n      buttonContent.setAttribute(Selectors.ARIA_HIDDEN, \"false\")\n      buttonContentChildren.forEach(element => {\n        element.setAttribute(Selectors.TABINDEX, \"0\")\n      })\n    } else {\n      button.setAttribute(Selectors.ARIA_EXPANDED, \"false\")\n      buttonContent.setAttribute(Selectors.ARIA_HIDDEN, \"true\")\n      buttonContentChildren.forEach(element => {\n        element.setAttribute(Selectors.TABINDEX, \"-1\")\n      })\n    }\n  }\n\n  /**\n   * Build a selector string to match possible accordion buttons\n   * @param {String} attr - A unique attribute\n   * @return {String} - String of possible button selectors\n   */\n  _getPossibleAccordionButtonAttrs(attr) {\n    return this._headerLevels\n      .map(\n        num => `${attr} > [${Selectors.DATA_ACCORDION_ROW}] > h${num} [${Selectors.DATA_TARGET}]`\n      )\n      .join(\", \")\n  }\n\n  /**\n   * Build a selector string to match possible accordion headers\n   * @param {String} attr - A unique attribute\n   * @return {String} - String of possible header selectors\n   */\n  _getPossibleAccordionHeaderAttrs(attr) {\n    return this._headerLevels.map(num => `${attr} > h${num}`).join(\", \")\n  }\n\n  /**\n   * Build a unique accordion row attribute selector.\n   * @param {String} id - An id value associated with a given Selectors.DATA_TARGET\n   * @return {String} - A unique accordion row selector\n   */\n  _getAccordionRowAttr(id) {\n    return `[${Selectors.DATA_ACCORDION_ROW}='${id}']`\n  }\n\n  /**\n   * If toggling multiple rows at once isn't enabled, close all rows except the selected one.\n   * This ensures the selected one can be closed if it's already open.\n   */\n  _closeAllIfToggleable() {\n    if (this._activeContainer.hasAttribute(Selectors.DATA_TOGGLE_MULTIPLE)) return\n\n    const allContentAttr = `${this._activeContainerAttr} [${Selectors.ARIA_HIDDEN}]`\n    const allRows = document.querySelectorAll(\n      `${this._activeContainerAttr} [${Selectors.DATA_VISIBLE}]`\n    )\n    const allContent = document.querySelectorAll(allContentAttr)\n\n    const accordionButtonSelector = this._getPossibleAccordionButtonAttrs(this._activeContainerAttr)\n    const allButtons = document.querySelectorAll(accordionButtonSelector)\n\n    allContent.forEach(content => {\n      if (content !== this._activeContent) content.style.maxHeight = null\n    })\n\n    getFocusableElements(allContentAttr).forEach(element => {\n      element.setAttribute(Selectors.TABINDEX, \"-1\")\n    })\n\n    this._toggleAttributeInCollection(allRows, Selectors.DATA_VISIBLE, \"true\", \"false\")\n    this._toggleAttributeInCollection(allButtons, Selectors.ARIA_EXPANDED, \"true\", \"false\")\n    this._toggleAttributeInCollection(allContent, Selectors.ARIA_HIDDEN, \"false\", \"true\")\n  }\n\n  /**\n   * Toggle the currently selected accordion button's content.\n   */\n  _toggleSelectedAccordion() {\n    this._activeRow.setAttribute(Selectors.DATA_VISIBLE, this._activeButtonExpandState)\n    this._activeButton.setAttribute(Selectors.ARIA_EXPANDED, this._activeButtonExpandState)\n    this._activeContent.setAttribute(Selectors.ARIA_HIDDEN, this._activeContentHiddenState)\n\n    const activeContentBlock = `#${this._activeAccordionRowId}`\n    getFocusableElements(activeContentBlock).forEach(element => {\n      const value = this._activeButtonExpandState === \"true\" ? \"0\" : \"-1\"\n      element.setAttribute(Selectors.TABINDEX, value)\n    })\n\n    if (this._activeContent.style.maxHeight) {\n      this._activeContent.style.maxHeight = null\n    } else {\n      this._activeContent.style.maxHeight = `${this._activeContent.scrollHeight}px`\n    }\n  }\n\n  /**\n   * Toggles a single attribute of a series of elements.\n   * @param {Array} elements - An array of elements to be operated on.\n   * @param {String} attributeName - An attribute to be changed.\n   * @param {String} currentValue - The current value of attributeName\n   * @param {String} newValue - The new value of attributeName\n   */\n  _toggleAttributeInCollection(elements, attributeName, currentValue, newValue) {\n    elements.forEach(element => {\n      if (element.hasAttribute(attributeName, currentValue)) {\n        element.setAttribute(attributeName, newValue)\n      }\n    })\n  }\n}\n"],"file":"accordion.js"}