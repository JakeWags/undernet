{"version":3,"sources":["../src/tooltip.js"],"names":["Selectors","DATA_TOOLTIP","DATA_TARGET","ROLE","ARIA_DESCRIBEDBY","DROP_LEFT_CLASS","DROP_RIGHT_CLASS","Events","CLICK","Messages","NO_ID_ERROR","Tooltip","_setCursorPointer","bind","_setCursorAuto","_allTooltipTriggers","document","querySelectorAll","forEach","element","id","getAttribute","trigger","querySelector","_getTargetAttr","console","error","tooltip","getElementById","_setupTooltip","iOSMobile","removeEventListener","property","triggerLength","_getComputedLength","tooltipLength","triggerIsLongest","offset","style","top","left","event","preventDefault","stopPropagation","body","addEventListener","cursor","setAttribute","_isLeftOrRight","_alignTooltip","parseInt","window","getComputedStyle","slice","classes","classList","contains"],"mappings":"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","sourcesContent":["// TODO: Add tests\r\n\r\nimport { iOSMobile } from \"./utils\"\r\n\r\nconst Selectors = {\r\n  DATA_TOOLTIP: \"data-tooltip\",\r\n  DATA_TARGET: \"data-target\",\r\n  ROLE: \"role\",\r\n  ARIA_DESCRIBEDBY: \"aria-describedby\",\r\n  DROP_LEFT_CLASS: \"is-drop-left\",\r\n  DROP_RIGHT_CLASS: \"is-drop-right\",\r\n}\r\n\r\nconst Events = {\r\n  CLICK: \"click\",\r\n}\r\n\r\nconst Messages = {\r\n  NO_ID_ERROR: \"Could not find an tooltip trigger associated with your element. Make sure your `data-tooltip` and `data-target` attributes have matching values.\",\r\n}\r\n\r\n/**\r\n * Tooltip component class.\r\n * @module Tooltip\r\n */\r\nexport default class Tooltip {\r\n  constructor() {\r\n    // events\r\n    this._setCursorPointer = this._setCursorPointer.bind(this)\r\n    this._setCursorAuto = this._setCursorAuto.bind(this)\r\n\r\n    // active tooltip (touch devices only)\r\n    this._allTooltipTriggers = []\r\n  }\r\n\r\n  // public\r\n\r\n  start() {\r\n    this._allTooltipTriggers = document.querySelectorAll(`[${Selectors.DATA_TOOLTIP}]`)\r\n\r\n    this._allTooltipTriggers.forEach(element => {\r\n      const id = element.getAttribute(Selectors.DATA_TOOLTIP)\r\n\r\n      let trigger\r\n      if (!element.querySelector(this._getTargetAttr(id))) {\r\n        return console.error(Messages.NO_ID_ERROR)\r\n      } else {\r\n        trigger = element.querySelector(this._getTargetAttr(id))\r\n      }\r\n\r\n      const tooltip = document.getElementById(id)\r\n      this._setupTooltip(trigger, tooltip, id)\r\n    })\r\n  }\r\n\r\n  stop() {\r\n    if (iOSMobile) {\r\n      this._allTooltipTriggers.forEach(element => {\r\n        element.removeEventListener(Events.CLICK, this._setCursorPointer)\r\n      })\r\n    }\r\n  }\r\n\r\n  // private\r\n\r\n  _alignTooltip(trigger, tooltip, property) {\r\n    const triggerLength = this._getComputedLength(trigger, property)\r\n    const tooltipLength = this._getComputedLength(tooltip, property)\r\n    const triggerIsLongest = triggerLength > tooltipLength\r\n\r\n    const offset = triggerIsLongest\r\n      ? (triggerLength - tooltipLength) / 2\r\n      : (tooltipLength - triggerLength) / -2\r\n\r\n    if (property === \"height\") {\r\n      tooltip.style.top = `${offset}px`\r\n    } else {\r\n      tooltip.style.left = `${offset}px`\r\n    }\r\n  }\r\n\r\n  _setCursorPointer(event) {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n    document.body.addEventListener(Events.CLICK, this._setCursorAuto)\r\n    document.body.style.cursor = \"pointer\"\r\n  }\r\n\r\n  _setCursorAuto(event) {\r\n    event.preventDefault()\r\n    document.body.removeEventListener(Events.CLICK, this._setCursorAuto)\r\n    document.body.style.cursor = \"auto\"\r\n  }\r\n\r\n  _setupTooltip(trigger, tooltip, id) {\r\n    trigger.setAttribute(Selectors.ARIA_DESCRIBEDBY, id)\r\n    tooltip.setAttribute(Selectors.ROLE, \"tooltip\")\r\n\r\n    if (iOSMobile) {\r\n      trigger.addEventListener(Events.CLICK, this._setCursorPointer)\r\n    }\r\n\r\n    if (this._isLeftOrRight(tooltip)) {\r\n      this._alignTooltip(trigger, tooltip, \"height\")\r\n    } else {\r\n      this._alignTooltip(trigger, tooltip, \"width\")\r\n    }\r\n  }\r\n\r\n  _getTargetAttr(id) {\r\n    return `[${Selectors.DATA_TARGET}=\"${id}\"]`\r\n  }\r\n\r\n  _getComputedLength(element, property) {\r\n    return parseInt(window.getComputedStyle(element)[property].slice(0, -2))\r\n  }\r\n\r\n  _isLeftOrRight(tooltip) {\r\n    const classes = tooltip.classList\r\n    return classes.contains(Selectors.DROP_LEFT_CLASS) || classes.contains(Selectors.DROP_RIGHT_CLASS)\r\n  }\r\n}\r\n"],"file":"tooltip.js"}