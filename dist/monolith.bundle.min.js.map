{"version":3,"file":"monolith.bundle.min.js","sources":["../js/src/utils.js","../js/src/components/modal.js","../js/src/components/accordion.js","../js/src/monolith.js"],"sourcesContent":["\"use strict\"\n\nconst keyCodes = {\n  SHIFT: 16,\n  TAB: 9,\n}\n\nconst selectors = {\n  FOCUSABLE_SELECTOR: \":not(.is-visually-hidden)\",\n  FOCUSABLE_TAGS: [\"a\", \"button\", \"input\", \"object\", \"select\", \"textarea\", \"[tabindex]\"],\n}\n\nconst events = {\n  KEYDOWN: \"keydown\",\n}\n\n/**\n * Utility methods for DOM traversal and focus trapping.\n * @module Utils\n */\nexport default class Utils {\n  constructor() {\n    // bind events to Utils\n    this.handleFocusTrap = this.handleFocusTrap.bind(this)\n  }\n\n  /**\n   * Because IE does not recognize NodeList.forEach(), we use a cross-browser solution for returning an array of DOM nodes.\n   * @param {String} element - A DOM node's class, attribute, etc., to search the document.\n   * @return {Array}\n   */\n  getElements(element) {\n    const nodeList = document.querySelectorAll(element)\n    return Array.apply(null, nodeList)\n  }\n\n  /**\n   * Creates a string of element selector patterns using common elements.\n   * @param {String} container - The enclosing container's class, attribute, etc.\n   * @return {String}\n   */\n  getFocusableElements(container) {\n    let focusables = []\n    selectors.FOCUSABLE_TAGS.map(element =>\n      focusables.push(`${container} ${element}${selectors.FOCUSABLE_SELECTOR}`),\n    )\n    return this.getElements(focusables.join(\", \"))\n  }\n\n  /**\n   * Listens to the first and last elements matched from this.getFocusableElements()\n   * @param {String} container - The container's class, attribute, etc.\n   */\n  captureFocus(container) {\n    this.focusContainer = container\n    const children = this.getFocusableElements(this.focusContainer)\n    this.focusableFirstChild = children[0]\n    this.focusableLastChild = children[children.length - 1]\n\n    document.addEventListener(events.KEYDOWN, this.handleFocusTrap)\n  }\n\n  /**\n   * Handles focus on first or last child in a container.\n   * @param {Object} event - Event (keypress)\n   */\n  handleFocusTrap(event) {\n    const active = document.activeElement\n    const containerElement = document.querySelector(this.focusContainer)\n    const containerActive = active === containerElement\n    const firstActive = active === this.focusableFirstChild\n    const lastActive = active === this.focusableLastChild\n    const tabKey = event.which === keyCodes.TAB\n    const shiftKey = event.which === keyCodes.SHIFT || event.shiftKey\n    const hasShift = shiftKey && tabKey\n    const noShift = !shiftKey && tabKey\n\n    // Just in case the first or last child have changed -\n    // recapture focus and continue trapping.\n    this.releaseFocus()\n    this.captureFocus(this.focusContainer)\n\n    if (hasShift && (firstActive || containerActive)) {\n      event.preventDefault()\n      this.focusableLastChild.focus()\n    } else if (noShift && lastActive) {\n      event.preventDefault()\n      this.focusableFirstChild.focus()\n    }\n  }\n\n  /**\n   * Stop trapping focus set in this.captureFocus()\n   */\n  releaseFocus() {\n    document.removeEventListener(events.KEYDOWN, this.handleFocusTrap)\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst keyCodes = {\n  ESCAPE: 27,\n}\n\nconst selectors = {\n  MODAL_CONTAINER: \"data-modal\",\n  MODAL_ID: \"data-modal-id\",\n  MODAL_VISIBLE: \"data-modal-visible\",\n  MODAL_CLOSE: \"data-modal-close\",\n  MODAL_BUTTON: \"data-modal-button\",\n  NO_SCROLL: \"no-scroll\",\n}\n\nconst events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n  RESIZE: \"resize\",\n  // needed to prevent iOS <body> scrolling when the overlay is pressed\n  TOUCHSTART: \"touchstart\",\n}\n\nconst messages = {\n  MISSING_MODAL:\n    \"Your button is missing its corresponding modal. Check to make sure your modal is in the DOM, and that is has a [data-modal-id=*] attribute matching the button ID.\",\n}\n\n/**\n * Modal component class.\n * @module Modal\n * @requires Utils\n */\nexport default class Modal extends Utils {\n  constructor() {\n    super()\n    this.closeButtonAttr = `[${selectors.MODAL_CLOSE}]`\n    this.modalContainerAttr = `[${selectors.MODAL_CONTAINER}]`\n    this.modals = null\n    this.modalButtons = null\n    this.closeButtons = null\n    this.bodyTag = document.body\n    this.htmlTag = document.querySelector(\"html\")\n\n    // bind events to class\n    this.getModal = this.getModal.bind(this)\n    this.handleModalClose = this.handleModalClose.bind(this)\n    this.handleEscapeKeyPress = this.handleEscapeKeyPress.bind(this)\n    this.handleOverlayClick = this.handleOverlayClick.bind(this)\n  }\n\n  /**\n   * Add accessible attributes to modal containers\n   * Begin listening to elements with [data-modal-button]\n   */\n  start() {\n    this.modals = this.getElements(`[${selectors.MODAL_CONTAINER}]`)\n    this.modalButtons = this.getElements(`[${selectors.MODAL_BUTTON}]`)\n    this.closeButtons = this.getElements(this.closeButtonAttr)\n\n    if (this.modals.length) {\n      this.modals.forEach(modal => {\n        modal.setAttribute(\"aria-modal\", \"true\")\n        modal.setAttribute(\"role\", \"dialog\")\n      })\n    }\n\n    if (this.modalButtons.length) {\n      this.modalButtons.forEach(button => {\n        button.addEventListener(events.CLICK, this.getModal)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to modal buttons\n   */\n  stop() {\n    this.modalButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this.getModal)\n    })\n  }\n\n  /**\n   * Locate a button's corresponding modal container.\n   * @param {Object} event - The event object\n   */\n  getModal(event) {\n    event.preventDefault()\n    this.renderModal(event)\n  }\n\n  /**\n   * Find a button through event.target, then render the corresponding modal attribute via matching target id\n   * @param {Object} event - The event object\n   */\n  renderModal(event) {\n    // setup core lightbox properties\n    this.modalButton = event.target\n    this.modalOverlayAttr = `[${selectors.MODAL_ID}='${this.modalButton.id}']`\n    this.modalOverlay = document.querySelector(this.modalOverlayAttr)\n\n    if (!this.modalOverlay) {\n      throw messages.MISSING_MODAL\n      return\n    }\n\n    this.activeModalSelector = `${this.modalOverlayAttr} ${this.modalContainerAttr}`\n    this.activeModal = document.querySelector(this.activeModalSelector)\n    this.modalCloseButtons = this.getElements(`${this.modalOverlayAttr} ${this.closeButtonAttr}`)\n\n    this.handleScrollStop()\n    this.captureFocus(this.activeModalSelector)\n    this.modalOverlay.setAttribute(\"aria-hidden\", \"false\")\n    this.activeModal.setAttribute(\"tabindex\", \"-1\")\n    this.modalOverlay.setAttribute(selectors.MODAL_VISIBLE, \"\")\n    this.activeModal.focus()\n\n    // offset slight scroll caused by this.activeModal.focus()\n    this.modalOverlay.scrollTop = 0\n\n    // begin listening to events\n    document.addEventListener(events.KEYDOWN, this.handleEscapeKeyPress)\n    document.addEventListener(events.CLICK, this.handleOverlayClick)\n    document.addEventListener(events.TOUCHSTART, this.handleOverlayClick)\n    this.modalCloseButtons.forEach(button => {\n      button.addEventListener(events.CLICK, this.handleModalClose)\n    })\n  }\n\n  /**\n   * Turn off event listeners and reset focus to last selected DOM node (button)\n   * @param {Object} event - Event (keydown or click)\n   */\n  handleModalClose(event) {\n    event.preventDefault()\n    this.modalOverlay.removeAttribute(selectors.MODAL_VISIBLE)\n    this.handleReturnFocus()\n    this.handleScrollRestore()\n    this.releaseFocus()\n    this.modalOverlay.setAttribute(\"aria-hidden\", \"true\")\n    this.activeModal.removeAttribute(\"tabindex\")\n\n    // stop listening to events\n    document.removeEventListener(events.KEYDOWN, this.handleEscapeKeyPress)\n    document.removeEventListener(events.CLICK, this.handleOverlayClick)\n    document.removeEventListener(events.TOUCHSTART, this.handleOverlayClick)\n    this.modalCloseButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this.handleModalClose)\n    })\n  }\n\n  /**\n   * Handles click event on the modal background to close it.\n   * @param {Object} event - Event (keydown)\n   */\n  handleOverlayClick(event) {\n    if (event.target !== this.modalOverlay) return\n    this.handleModalClose(event)\n  }\n\n  /**\n   * Handles escape key event to close the current modal\n   * @param {Object} event - Event (keydown)\n   */\n  handleEscapeKeyPress(event) {\n    const escapeKey = event.which === keyCodes.ESCAPE\n    if (escapeKey) {\n      this.handleModalClose(event)\n    }\n  }\n\n  /**\n   * Returns focus to the last focused element before the modal was called.\n   * @param {Object} button - The current modal's corresponding button.\n   */\n  handleReturnFocus() {\n    this.modalButton.setAttribute(\"tabindex\", \"-1\")\n    this.modalButton.focus()\n    this.modalButton.removeAttribute(\"tabindex\")\n  }\n\n  /**\n   * Restores scroll behavior to <html> and <body>\n   */\n  handleScrollRestore() {\n    this.bodyTag.classList.remove(selectors.NO_SCROLL)\n    this.htmlTag.classList.remove(selectors.NO_SCROLL)\n  }\n\n  /**\n   * Prevents scroll behavior on <html> and <body>\n   */\n  handleScrollStop() {\n    this.bodyTag.classList.add(selectors.NO_SCROLL)\n    this.htmlTag.classList.add(selectors.NO_SCROLL)\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst keyCodes = {\n  SPACE: 32,\n}\n\nconst selectors = {\n  ACCORDION_CONTAINER: \"data-accordion\",\n  ACCORDION_EXPANDED: \"data-accordion-expanded\",\n  ACCORDION_BUTTON: \"data-accordion-button\",\n  ACCORDION_CONTENT: \"data-accordion-content\",\n  ACCORDION_MULTIPLE: \"data-accordion-toggle-multiple\",\n  ACCORDION_PARENT: \"data-accordion-parent\",\n  ARIA_EXPANDED: \"aria-expanded\",\n  ARIA_HIDDEN: \"aria-hidden\",\n}\n\nconst events = {\n  CLICK: \"click\",\n  KEYDOWN: \"keydown\",\n}\n\nconst messages = {\n  MISSING_ACCORDION_CONTENT:\n    \"You have an accordion button that is missing its content block or its [data-accordion-content] attribute.\",\n}\n\n/**\n * Accordion component class.\n * @module Accordion\n * @requires Utils\n */\nexport default class Accordion extends Utils {\n  constructor() {\n    super()\n    this.accordionButtons = null\n    this.accordionContents = null\n    this.activeContainer = null\n\n    // bind events to class\n    this.renderAccordionContent = this.renderAccordionContent.bind(this)\n    this.handleSpaceKeyPress = this.handleSpaceKeyPress.bind(this)\n  }\n\n  /**\n   * Add accessible attributes [data-accordion-button] and [data-accordion-content] elements\n   * Begin listening to [data-accordion-button] elements\n   */\n  start() {\n    this.accordionButtons = this.getElements(`[${selectors.ACCORDION_BUTTON}]`)\n    this.accordionContents = this.getElements(`[${selectors.ACCORDION_CONTENT}]`)\n\n    if (this.accordionButtons.length) {\n      this.accordionButtons.forEach(button => {\n        this.setupButton(button)\n        button.addEventListener(events.CLICK, this.renderAccordionContent)\n        button.addEventListener(events.KEYDOWN, this.handleSpaceKeyPress)\n      })\n    }\n\n    if (this.accordionContents.length) {\n      this.accordionContents.forEach(content => {\n        const contentHiddenState = content.parentNode.getAttribute(selectors.ACCORDION_EXPANDED)\n        const toggleContentHiddenState = contentHiddenState === \"true\" ? \"false\" : \"true\"\n        content.setAttribute(selectors.ARIA_HIDDEN, toggleContentHiddenState)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to accordion buttons.\n   */\n  stop() {\n    this.accordionButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this.renderAccordionContent)\n      button.removeEventListener(events.KEYDOWN, this.handleSpaceKeyPress)\n    })\n  }\n\n  setupButton(button) {\n    const expandState = button.parentNode.parentNode.getAttribute(selectors.ACCORDION_EXPANDED)\n    const buttonContent = button.parentNode.nextElementSibling\n\n    if (expandState === \"true\") {\n      buttonContent.style.maxHeight = `${buttonContent.scrollHeight}px`\n      button.setAttribute(selectors.ARIA_EXPANDED, \"true\")\n    } else {\n      button.setAttribute(selectors.ARIA_EXPANDED, \"false\")\n    }\n  }\n\n  /**\n   * Open accordion content associated with a [data-accordion-button] element.\n   * @param {Object} event - The event object.\n   */\n  renderAccordionContent(event) {\n    event.preventDefault()\n\n    this.activeButton = event.target\n\n    this.activeRow = this.activeButton.parentNode.parentNode\n    this.activeContainerId = this.activeButton.getAttribute(selectors.ACCORDION_PARENT)\n    this.activeContainerAttr = `[${selectors.ACCORDION_CONTAINER}='${this.activeContainerId}']`\n    this.activeContainer = document.querySelector(this.activeContainerAttr)\n\n    const activeContentId = this.activeButton.getAttribute(selectors.ACCORDION_BUTTON)\n    this.activeContent = document.getElementById(activeContentId)\n\n    const accordionContentHasAttr = this.activeContent.hasAttribute(selectors.ACCORDION_CONTENT)\n    if (!accordionContentHasAttr) {\n      throw messages.MISSING_ACCORDION_CONTENT\n      return\n    }\n\n    const accordionButtonState = this.activeRow.getAttribute(selectors.ACCORDION_EXPANDED)\n    const accordionContentState = this.activeContent.getAttribute(selectors.ACCORDION_CONTENT)\n\n    this.toggleExpandState = accordionButtonState === \"true\" ? \"false\" : \"true\"\n    this.toggleContentState = accordionContentState === \"visible\" ? \"hidden\" : \"visible\"\n    this.toggleHiddenState = this.toggleExpandState === \"false\" ? \"true\" : \"false\"\n\n    this.closeAllIfToggleable()\n    this.toggleSelectedAccordion()\n  }\n\n  /**\n   * If a keypress is the spacebar on a button, open its correlated content.\n   * @param {Object} event - The event object.\n   */\n  handleSpaceKeyPress(event) {\n    if (event.which === keyCodes.SPACE) this.renderAccordionContent(event)\n  }\n\n  /**\n   * If toggling multiple rows at once isn't enabled, close all rows except the selected one.\n   * This ensures the selected one can be closed if it's already open.\n   */\n  closeAllIfToggleable() {\n    if (this.activeContainer.hasAttribute(selectors.ACCORDION_MULTIPLE)) return\n\n    const allRows = this.getElements(\n      `${this.activeContainerAttr} [${selectors.ACCORDION_EXPANDED}]`,\n    )\n\n    const allContent = this.getElements(\n      `${this.activeContainerAttr} [${selectors.ACCORDION_CONTENT}]`,\n    )\n\n    const allButtons = this.getElements(\n      `${this.activeContainerAttr} [${selectors.ACCORDION_BUTTON}]`,\n    )\n\n    allContent.forEach(content => {\n      if (!(content === this.activeContent)) content.style.maxHeight = null\n    })\n\n    this.toggleAttributeInCollection(allRows, selectors.ACCORDION_EXPANDED, \"true\", \"false\")\n    this.toggleAttributeInCollection(allButtons, selectors.ARIA_EXPANDED, \"true\", \"false\")\n    this.toggleAttributeInCollection(allContent, selectors.ARIA_HIDDEN, \"false\", \"true\")\n    this.toggleAttributeInCollection(allContent, selectors.ACCORDION_CONTENT, \"visible\", \"hidden\")\n  }\n\n  /**\n   * Toggle a [data-accordion-button]'s related [data-accordion-content] element.\n   */\n  toggleSelectedAccordion() {\n    this.activeRow.setAttribute(selectors.ACCORDION_EXPANDED, this.toggleExpandState)\n    this.activeContent.setAttribute(selectors.ACCORDION_CONTENT, this.toggleContentState)\n    this.activeButton.setAttribute(selectors.ARIA_EXPANDED, this.toggleExpandState)\n    this.activeContent.setAttribute(selectors.ARIA_HIDDEN, this.toggleHiddenState)\n\n    this.activeContent.style.maxHeight\n      ? (this.activeContent.style.maxHeight = null)\n      : (this.activeContent.style.maxHeight = `${this.activeContent.scrollHeight}px`)\n  }\n\n  /**\n   * Toggles a single attribute of a series of elements within a parent.\n   */\n  toggleAttributeInCollection(elements, attributeName, currentValue, newValue) {\n    elements.forEach(element => {\n      if (element.hasAttribute(attributeName, currentValue)) {\n        element.setAttribute(attributeName, newValue)\n      }\n    })\n  }\n}\n","\"use strict\"\n\nimport Modal from \"./components/modal\"\nimport Accordion from \"./components/accordion\"\n\nconst modals = new Modal()\nconst accordions = new Accordion()\n\nconst Monolith = {\n  modals,\n  accordions,\n}\n\nMonolith.start = () => {\n  Monolith.modals.start()\n  Monolith.accordions.start()\n}\n\nMonolith.stop = () => {\n  Monolith.modals.stop()\n  Monolith.accordions.stop()\n}\n\nwindow.Monolith = Monolith\nexport default Monolith\n"],"names":["keyCodes","selectors","events","Utils","handleFocusTrap","this","bind","element","nodeList","document","querySelectorAll","Array","apply","container","focusables","FOCUSABLE_TAGS","map","push","FOCUSABLE_SELECTOR","getElements","join","focusContainer","children","getFocusableElements","focusableFirstChild","focusableLastChild","length","addEventListener","event","active","activeElement","containerActive","querySelector","firstActive","lastActive","tabKey","which","shiftKey","hasShift","noShift","releaseFocus","captureFocus","preventDefault","focus","removeEventListener","messages","Modal","closeButtonAttr","modalContainerAttr","modals","modalButtons","closeButtons","bodyTag","body","htmlTag","getModal","_this","handleModalClose","handleEscapeKeyPress","handleOverlayClick","forEach","setAttribute","_this2","_this3","renderModal","modalButton","target","modalOverlayAttr","id","modalOverlay","activeModalSelector","activeModal","modalCloseButtons","handleScrollStop","scrollTop","_this4","removeAttribute","handleReturnFocus","handleScrollRestore","_this5","classList","remove","add","Accordion","accordionButtons","accordionContents","activeContainer","renderAccordionContent","handleSpaceKeyPress","setupButton","button","toggleContentHiddenState","content","parentNode","getAttribute","expandState","buttonContent","nextElementSibling","style","maxHeight","scrollHeight","activeButton","activeRow","activeContainerId","activeContainerAttr","activeContentId","activeContent","getElementById","hasAttribute","accordionButtonState","accordionContentState","toggleExpandState","toggleContentState","toggleHiddenState","closeAllIfToggleable","toggleSelectedAccordion","allRows","allContent","allButtons","toggleAttributeInCollection","elements","attributeName","currentValue","newValue","Monolith","start","accordions","stop","window"],"mappings":"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"}