{"version":3,"file":"undernet.bundle.min.js","sources":["../js/src/utils.js","../js/src/accordion.js","../js/src/dropdown.js","../js/src/modal.js","../js/src/tooltip.js","../js/src/index.js","../js/src/index.bundle.js"],"sourcesContent":["const KeyCodes = {\n  SHIFT: 16,\n  TAB: 9,\n  ARROW_UP: 38,\n  ARROW_DOWN: 40,\n}\n\nconst Selectors = {\n  NOT_VISUALLY_HIDDEN: \":not(.is-visually-hidden)\",\n  FOCUSABLE_TAGS: [\"a\", \"button\", \"input\", \"object\", \"select\", \"textarea\", \"[tabindex]\"],\n  KEYBOARD_CLASS: \"using-keyboard\",\n}\n\nconst Events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n}\n\n/**\n * Creates a string of element selector patterns using common elements.\n * @param {String} nodeList - the node to be queried.\n * @return {Array}\n */\nexport const nodeListToArray = nodeList => {\n  return [...document.querySelectorAll(nodeList)]\n}\n\n/**\n * Creates a string of element selector patterns using common elements.\n * @param {String} container - The container selector.\n * @return {Array}\n */\nexport const getFocusableElements = container => {\n  const focusables = Selectors.FOCUSABLE_TAGS.map(\n    element => `${container} ${element}${Selectors.NOT_VISUALLY_HIDDEN}`\n  ).join(\", \")\n\n  return nodeListToArray(focusables)\n}\n\n/**\n * Detects if the browser being used is on an iphone, ipad, or ipod.\n * @return {Boolean}\n */\nexport const iOSMobile = /(iphone|ipod|ipad)/i.test(navigator.userAgent)\n\n/**\n * Utility methods for DOM traversal and focus trapping.\n * @module Utils\n */\nexport default class Utils {\n  constructor() {\n    // events\n    this._listenForKeyboard = this._listenForKeyboard.bind(this)\n    this._listenForClick = this._listenForClick.bind(this)\n    this._handleFocusTrapWithTab = this._handleFocusTrapWithTab.bind(this)\n    this._handleFocusTrapWithArrows = this._handleFocusTrapWithArrows.bind(this)\n\n    this._focusContainerSelector = \"\"\n    this._focusableChildren = []\n    this._focusableFirstChild = {}\n    this._focusableLastChild = {}\n    this._listeningForKeydown = false\n    this._trapFocusWithArrows = false\n  }\n\n  // public\n\n  /**\n   * Listens to the first and last elements matched from this.getFocusableElements()\n   * @param {String} container - The container's class, attribute, etc.\n   * @param {Object} options - Optional has hof options.\n   */\n  captureFocus(container, options) {\n    this._focusContainerSelector = container\n    this._focusableChildren = getFocusableElements(this._focusContainerSelector)\n    this._focusableFirstChild = this._focusableChildren[0]\n    this._focusableLastChild = this._focusableChildren[this._focusableChildren.length - 1]\n\n    if (options) {\n      if (options.useArrows) {\n        this._trapFocusWithArrows = options.useArrows || this._trapFocusWithArrows\n        document.addEventListener(Events.KEYDOWN, this._handleFocusTrapWithArrows)\n      }\n    } else {\n      document.addEventListener(Events.KEYDOWN, this._handleFocusTrapWithTab)\n    }\n  }\n\n  /**\n   * Stop trapping focus set in this.captureFocus()\n   */\n  releaseFocus() {\n    if (this._trapFocusWithArrows) {\n      document.removeEventListener(Events.KEYDOWN, this._handleFocusTrapWithArrows)\n      this._trapFocusWithArrows = false\n    } else {\n      document.removeEventListener(Events.KEYDOWN, this._handleFocusTrapWithTab)\n    }\n  }\n\n  /**\n   * Begin listening to _listenForKeyboard()\n   */\n  enableFocusOutline() {\n    document.addEventListener(Events.KEYDOWN, this._listenForKeyboard)\n  }\n\n  /**\n   * Completely disable focus outline utility.\n   */\n  disableFocusOutline() {\n    if (this._listeningForKeydown) {\n      document.removeEventListener(Events.KEYDOWN, this._listenForKeyboard)\n    } else {\n      document.removeEventListener(Events.CLICK, this._listenForClick)\n    }\n  }\n\n  // private\n\n  /**\n   * When a key is pressed, detect if it's tab or shift keys and enable\n   * focus outlines on currently focused element(s). Then, remove keydown listener\n   * and add click listener on _listenForClick().\n   */\n  _listenForKeyboard() {\n    document.body.classList.add(Selectors.KEYBOARD_CLASS)\n    document.removeEventListener(Events.KEYDOWN, this._listenForKeyboard)\n    document.addEventListener(Events.CLICK, this._listenForClick)\n    this._listeningForKeydown = false\n  }\n\n  /**\n   * On click, remove Selectors.KEYBOARD_CLASS and re-add keydown listener.\n   */\n  _listenForClick() {\n    document.body.classList.remove(Selectors.KEYBOARD_CLASS)\n    document.removeEventListener(Events.CLICK, this._listenForClick)\n    document.addEventListener(Events.KEYDOWN, this._listenForKeyboard)\n    this._listeningForKeydown = true\n  }\n\n  /**\n   * Handles focus on first or last child in a container, using tab and tab+shift keys.\n   * @param {Object} event - Event (keypress)\n   */\n  _handleFocusTrapWithTab(event) {\n    const containerElement = document.querySelector(this._focusContainerSelector)\n    const containerActive = document.activeElement === containerElement\n    const firstActive = document.activeElement === this._focusableFirstChild\n    const lastActive = document.activeElement === this._focusableLastChild\n    const tabKey = event.which === KeyCodes.TAB\n    const shiftKey = event.which === KeyCodes.SHIFT || event.shiftKey\n    const hasShift = shiftKey && tabKey\n    const noShift = !shiftKey && tabKey\n\n    if (hasShift && (firstActive || containerActive)) {\n      event.preventDefault()\n      this._focusableLastChild.focus()\n    } else if (noShift && lastActive) {\n      event.preventDefault()\n      this._focusableFirstChild.focus()\n    }\n  }\n\n  /**\n   * Handles focus on the first, last, next, or previous child in a container, using up and down arrow keys.\n   * @param {Object} event - Event (keypress)\n   */\n  _handleFocusTrapWithArrows(event) {\n    const firstActive = document.activeElement === this._focusableFirstChild\n    const lastActive = document.activeElement === this._focusableLastChild\n    const arrowUp = event.which === KeyCodes.ARROW_UP\n    const arrowDown = event.which === KeyCodes.ARROW_DOWN\n\n    if (arrowUp || arrowDown) {\n      event.preventDefault()\n\n      if (firstActive && arrowUp) {\n        this._focusableLastChild.focus()\n      } else if (lastActive && arrowDown) {\n        this._focusableFirstChild.focus()\n      } else if (arrowDown) {\n        this._focusNextChild()\n      } else if (arrowUp) {\n        this._focusLastChild()\n      }\n    }\n  }\n\n  /**\n   * Focus the next child in this._focusableChildren.\n   */\n  _focusNextChild() {\n    for (let i = 0; i < this._focusableChildren.length; i++) {\n      if (this._focusableChildren[i] === document.activeElement) {\n        this._focusableChildren[i + 1].focus()\n        break\n      }\n    }\n  }\n\n  /**\n   * Focus the previous child in this._focusableChildren.\n   */\n  _focusLastChild() {\n    for (let i = 0; i < this._focusableChildren.length; i++) {\n      if (this._focusableChildren[i] === document.activeElement) {\n        this._focusableChildren[i - 1].focus()\n        break\n      }\n    }\n  }\n}\n","import Utils, { getFocusableElements, nodeListToArray } from \"./utils\"\n\nconst Selectors = {\n  // unique\n  DATA_ACCORDION: \"data-accordion\",\n  DATA_ACCORDION_ROW: \"data-accordion-row\",\n  // common\n  DATA_VISIBLE: \"data-visible\",\n  DATA_TARGET: \"data-target\",\n  DATA_TOGGLE_MULTIPLE: \"data-toggle-multiple\",\n  DATA_PARENT: \"data-parent\",\n  // accessibility\n  ARIA_EXPANDED: \"aria-expanded\",\n  ARIA_CONTROLS: \"aria-controls\",\n  ARIA_HIDDEN: \"aria-hidden\",\n  ARIA_LABELLEDBY: \"aria-labelledby\",\n  TABINDEX: \"tabindex\",\n}\n\nconst Events = {\n  CLICK: \"click\",\n  KEYDOWN: \"keydown\",\n}\n\nconst Messages = {\n  NO_VISIBLE_ERROR: id =>\n    `Could not find parent with [data-visible] attribute associated with [data-target='${id}'].`,\n  NO_ROW_ERROR: id => `Could not find [data-accordion-row] associated with ${id}.`,\n  NO_HEADER_ID_ERROR: id => `Could not find header tag associated with [data-target='${id}'].`,\n  NO_PARENT_ERROR: id => `Could not find [data-parent] associated with [data-target='${id}'].`,\n  NO_CONTENT_ERROR: id =>\n    `Could not find accordion content block with [id] ${id} associated with [data-target='${id}'].`,\n}\n\n/**\n * Accordion component class.\n * @module Accordion\n * @requires Utils\n */\nexport default class Accordion extends Utils {\n  constructor() {\n    super()\n\n    // events\n    this._render = this._render.bind(this)\n\n    // all accordions\n    this._accordionButtons = []\n    this._accordionContentsAttr = \"\"\n    this._accordionContents = []\n\n    // active accordion\n    this._activeContainer = {}\n    this._activeButton = {}\n    this._activeAccordionRowId = \"\"\n    this._activeRowAttr = \"\"\n    this._activeRow = \"\"\n    this._activeContainerId = \"\"\n    this._activeContainerAttr = \"\"\n    this._activeContent = {}\n    this._activeButtonExpandState = \"\"\n    this._activeContentHiddenState = \"\"\n\n    // other data\n    this._headerLevels = [1, 2, 3, 4, 5, 6]\n  }\n\n  // public\n\n  /**\n   * Begin listening to accordions.\n   */\n  start() {\n    const accordionButtonSelector = this._getPossibleAccordionButtonAttrs(\n      `[${Selectors.DATA_ACCORDION}]`\n    )\n    this._accordionButtons = nodeListToArray(accordionButtonSelector)\n\n    if (this._accordionButtons.length) {\n      this._accordionButtons.forEach(button => {\n        this._setupAccordion(button)\n        button.addEventListener(Events.CLICK, this._render)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to accordions.\n   */\n  stop() {\n    this._accordionButtons.forEach(button => {\n      button.removeEventListener(Events.CLICK, this._render)\n    })\n  }\n\n  // private\n\n  /**\n   * Open accordion content associated with an accordion button.\n   * @param {Object} event - The event object\n   */\n  _render(event) {\n    event.preventDefault()\n\n    this._activeButton = event.target\n    this._activeAccordionRowId = this._activeButton.getAttribute(Selectors.DATA_TARGET)\n\n    this._activeRowAttr = this._getAccordionRowAttr(this._activeAccordionRowId)\n    this._activeRow = document.querySelector(this._activeRowAttr)\n    this._activeContainerId = this._activeButton.getAttribute(Selectors.DATA_PARENT)\n\n    if (!this._activeContainerId) {\n      return console.error(Messages.NO_PARENT_ERROR(this._activeAccordionRowId))\n    }\n\n    this._activeContainerAttr = `[${Selectors.DATA_ACCORDION}='${this._activeContainerId}']`\n    this._activeContainer = document.querySelector(this._activeContainerAttr)\n\n    if (!this._activeContainer) {\n      return console.error(Messages.NO_ACCORDION_ERROR(this._activeContainerId))\n    }\n\n    this._activeContent = document.getElementById(this._activeAccordionRowId)\n\n    const accordionButtonState = this._activeRow.getAttribute(Selectors.DATA_VISIBLE)\n\n    this._activeButtonExpandState = accordionButtonState === \"true\" ? \"false\" : \"true\"\n    this._activeContentHiddenState = this._activeButtonExpandState === \"false\" ? \"true\" : \"false\"\n\n    this._closeAllIfToggleable()\n    this._toggleSelectedAccordion()\n\n    this._activeContainerId = null\n    this._activeContainer = null\n  }\n\n  /**\n   * Add initial attributes to accordion elements.\n   * @param {Element} button - A button element that triggers an accordion.\n   */\n  _setupAccordion(button) {\n    const buttonId = button.getAttribute(Selectors.DATA_TARGET)\n    const buttonContent = document.getElementById(buttonId)\n\n    if (!buttonContent) {\n      return console.error(Messages.NO_CONTENT_ERROR(buttonId))\n    }\n\n    const accordionRowAttr = this._getAccordionRowAttr(buttonId)\n    const accordionRow = document.querySelector(accordionRowAttr)\n\n    if (!accordionRow) {\n      return console.error(Messages.NO_ROW_ERROR(buttonId))\n    }\n\n    const buttonHeaderAttr = this._getPossibleAccordionHeaderAttrs(accordionRowAttr)\n    const buttonHeader = nodeListToArray(buttonHeaderAttr)[0]\n\n    if (!buttonHeader || !buttonHeader.id) {\n      return console.error(Messages.NO_HEADER_ID_ERROR(buttonId))\n    }\n\n    const buttonContentChildren = getFocusableElements(`#${buttonContent.id}`)\n\n    button.setAttribute(Selectors.ARIA_CONTROLS, buttonId)\n    buttonContent.setAttribute(Selectors.ARIA_LABELLEDBY, buttonHeader.id)\n\n    const contentShouldExpand = accordionRow.getAttribute(Selectors.DATA_VISIBLE)\n\n    if (!contentShouldExpand) {\n      return console.error(Messages.NO_VISIBLE_ERROR(buttonId))\n    }\n\n    if (contentShouldExpand === \"true\") {\n      buttonContent.style.maxHeight = `${buttonContent.scrollHeight}px`\n      button.setAttribute(Selectors.ARIA_EXPANDED, \"true\")\n      buttonContent.setAttribute(Selectors.ARIA_HIDDEN, \"false\")\n      buttonContentChildren.forEach(element => {\n        element.setAttribute(Selectors.TABINDEX, \"0\")\n      })\n    } else {\n      button.setAttribute(Selectors.ARIA_EXPANDED, \"false\")\n      buttonContent.setAttribute(Selectors.ARIA_HIDDEN, \"true\")\n      buttonContentChildren.forEach(element => {\n        element.setAttribute(Selectors.TABINDEX, \"-1\")\n      })\n    }\n  }\n\n  /**\n   * Build a selector string to match possible accordion buttons\n   * @param {String} attr - A unique attribute\n   * @return {String} - String of possible button selectors\n   */\n  _getPossibleAccordionButtonAttrs(attr) {\n    return this._headerLevels\n      .map(\n        num => `${attr} > [${Selectors.DATA_ACCORDION_ROW}] > h${num} [${Selectors.DATA_TARGET}]`\n      )\n      .join(\", \")\n  }\n\n  /**\n   * Build a selector string to match possible accordion headers\n   * @param {String} attr - A unique attribute\n   * @return {String} - String of possible header selectors\n   */\n  _getPossibleAccordionHeaderAttrs(attr) {\n    return this._headerLevels.map(num => `${attr} > h${num}`).join(\", \")\n  }\n\n  /**\n   * Build a unique accordion row attribute selector.\n   * @param {String} id - An id value associated with a given Selectors.DATA_TARGET\n   * @return {String} - A unique accordion row selector\n   */\n  _getAccordionRowAttr(id) {\n    return `[${Selectors.DATA_ACCORDION_ROW}='${id}']`\n  }\n\n  /**\n   * If toggling multiple rows at once isn't enabled, close all rows except the selected one.\n   * This ensures the selected one can be closed if it's already open.\n   */\n  _closeAllIfToggleable() {\n    if (this._activeContainer.hasAttribute(Selectors.DATA_TOGGLE_MULTIPLE)) return\n\n    const allContentAttr = `${this._activeContainerAttr} [${Selectors.ARIA_HIDDEN}]`\n    const allRows = nodeListToArray(`${this._activeContainerAttr} [${Selectors.DATA_VISIBLE}]`)\n    const allContent = nodeListToArray(allContentAttr)\n\n    const accordionButtonSelector = this._getPossibleAccordionButtonAttrs(this._activeContainerAttr)\n    const allButtons = nodeListToArray(accordionButtonSelector)\n\n    allContent.forEach(content => {\n      if (content !== this._activeContent) content.style.maxHeight = null\n    })\n\n    getFocusableElements(allContentAttr).forEach(element => {\n      element.setAttribute(Selectors.TABINDEX, \"-1\")\n    })\n\n    this._toggleAttributeInCollection(allRows, Selectors.DATA_VISIBLE, \"true\", \"false\")\n    this._toggleAttributeInCollection(allButtons, Selectors.ARIA_EXPANDED, \"true\", \"false\")\n    this._toggleAttributeInCollection(allContent, Selectors.ARIA_HIDDEN, \"false\", \"true\")\n  }\n\n  /**\n   * Toggle the currently selected accordion button's content.\n   */\n  _toggleSelectedAccordion() {\n    this._activeRow.setAttribute(Selectors.DATA_VISIBLE, this._activeButtonExpandState)\n    this._activeButton.setAttribute(Selectors.ARIA_EXPANDED, this._activeButtonExpandState)\n    this._activeContent.setAttribute(Selectors.ARIA_HIDDEN, this._activeContentHiddenState)\n\n    const activeContentBlock = `#${this._activeAccordionRowId}`\n    getFocusableElements(activeContentBlock).forEach(element => {\n      const value = this._activeButtonExpandState === \"true\" ? \"0\" : \"-1\"\n      element.setAttribute(Selectors.TABINDEX, value)\n    })\n\n    if (this._activeContent.style.maxHeight) {\n      this._activeContent.style.maxHeight = null\n    } else {\n      this._activeContent.style.maxHeight = `${this._activeContent.scrollHeight}px`\n    }\n  }\n\n  /**\n   * Toggles a single attribute of a series of elements.\n   * @param {Array} elements - An array of elements to be operated on.\n   * @param {String} attributeName - An attribute to be changed.\n   * @param {String} currentValue - The current value of attributeName\n   * @param {String} newValue - The new value of attributeName\n   */\n  _toggleAttributeInCollection(elements, attributeName, currentValue, newValue) {\n    elements.forEach(element => {\n      if (element.hasAttribute(attributeName, currentValue)) {\n        element.setAttribute(attributeName, newValue)\n      }\n    })\n  }\n}\n","import Utils, { iOSMobile, nodeListToArray } from \"./utils\"\n\nconst KeyCodes = {\n  TAB: 9,\n  SHIFT: 16,\n  ESCAPE: 27,\n  ARROW_UP: 38,\n  ARROW_DOWN: 40,\n}\n\nconst Selectors = {\n  // unique\n  DATA_DROPDOWN: \"data-dropdown\",\n  // common\n  DATA_TARGET: \"data-target\",\n  DATA_PARENT: \"data-parent\",\n  DATA_VISIBLE: \"data-visible\",\n  // accessibility\n  TABINDEX: \"tabindex\",\n  ARIA_HASPOPUP: \"aria-haspopup\",\n  ARIA_CONTROLS: \"aria-controls\",\n  ARIA_LABELLEDBY: \"aria-labelledby\",\n  ARIA_EXPANDED: \"aria-expanded\",\n  ROLE: \"role\",\n}\n\nconst Events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n}\n\nconst Messages = {\n  NO_PARENT_ERROR: \"Could not find dropdown button's [data-parent] attribute.\",\n  NO_DROPDOWN_ERROR: attr => `Could not find dropdown container associated with ${attr}.`,\n  NO_MENU_ERROR: attr => `Could not find menu associated with ${attr}.`,\n}\n\n/**\n * Dropdown component class.\n * @module Dropdown\n * @requires Utils\n */\nexport default class Dropdown extends Utils {\n  constructor() {\n    super()\n    // events\n    this._render = this._render.bind(this)\n    this._handleFirstTabClose = this._handleFirstTabClose.bind(this)\n    this._handleLastTabClose = this._handleLastTabClose.bind(this)\n    this._renderWithKeys = this._renderWithKeys.bind(this)\n    this._handleClose = this._handleClose.bind(this)\n    this._handleEscapeKeyPress = this._handleEscapeKeyPress.bind(this)\n    this._handleOffMenuClick = this._handleOffMenuClick.bind(this)\n\n    // active dropdown\n    this._activeDropdownButton = null\n    this._activeDropdown = null\n    this._activeDropdownMenu = null\n    this._activeDropdownLinks = []\n    this._allowFocusReturn = true\n    this._activeDropdownId = \"\"\n    this._activeDropdownAttr = \"\"\n    this._activeDropdownMenuId = \"\"\n\n    // all dropdowns\n    this._dropdownButtons = []\n    this._dropdowns = []\n\n    // dropdown element selectors\n    this._dropdownContainerAttr = `[${Selectors.DATA_DROPDOWN}]`\n    this._dropdownTargetAttr = `[${Selectors.DATA_TARGET}]`\n  }\n\n  // public\n\n  /**\n   * Begin listening to dropdowns.\n   */\n  start() {\n    this._dropdowns = nodeListToArray(`${this._dropdownContainerAttr}`)\n    this._dropdownButtons = nodeListToArray(\n      `${this._dropdownContainerAttr} > ${this._dropdownTargetAttr}`\n    )\n\n    if (this._dropdowns.length) {\n      this._dropdowns.forEach(dropdown => this._setupDropdown(dropdown))\n    }\n\n    this._dropdownButtons.forEach(button => {\n      button.addEventListener(Events.CLICK, this._render)\n      button.addEventListener(Events.KEYDOWN, this._renderWithKeys)\n    })\n  }\n\n  /**\n   * Stop listening to dropdowns.\n   */\n  stop() {\n    this._dropdownButtons.forEach(button => {\n      button.removeEventListener(Events.CLICK, this._render)\n      button.removeEventListener(Events.KEYDOWN, this._renderWithKeys)\n    })\n  }\n\n  // private\n\n  /**\n   * Find a button through event.target, then render the corresponding modal attribute via matching target id\n   * @param {Object} event - The event object\n   * @param {Number} key - The key code that called _render()\n   */\n  _render(event, key) {\n    event.preventDefault()\n    event.stopPropagation()\n\n    if (this._activeDropdownButton) {\n      this._allowFocusReturn = false\n      this._handleClose(event)\n      this._allowFocusReturn = true\n    }\n\n    // dropdown button / trigger\n    this._activeDropdownButton = event.target\n    this._activeDropdownId = this._activeDropdownButton.getAttribute(Selectors.DATA_PARENT)\n\n    if (!this._activeDropdownId) {\n      return console.error(Messages.NO_PARENT_ERROR)\n    }\n\n    // dropdown container\n    this._activeDropdownAttr = `[${Selectors.DATA_DROPDOWN}=\"${this._activeDropdownId}\"]`\n    this._activeDropdown = document.querySelector(this._activeDropdownAttr)\n\n    if (!this._activeDropdown) {\n      return console.error(Messages.NO_DROPDOWN_ERROR(this._activeDropdownAttr))\n    }\n\n    // dropdown menu\n    this._activeDropdownMenuId = this._activeDropdownButton.getAttribute(Selectors.DATA_TARGET)\n    this._activeDropdownMenu = document.getElementById(this._activeDropdownMenuId)\n\n    // toggle attributes on dropdown button, indicating a visible dropdown is present\n    this._activeDropdownButton.setAttribute(Selectors.ARIA_EXPANDED, \"true\")\n    this._activeDropdown.setAttribute(Selectors.DATA_VISIBLE, \"true\")\n\n    // trade button event listener to close the menu, instead of open it\n    this._activeDropdownButton.removeEventListener(Events.CLICK, this._render)\n    this._activeDropdownButton.addEventListener(Events.CLICK, this._handleClose)\n\n    document.addEventListener(Events.KEYDOWN, this._handleEscapeKeyPress)\n    document.addEventListener(Events.CLICK, this._handleOffMenuClick)\n\n    // make click events work on mobile iOS\n    if (iOSMobile) {\n      document.body.style.cursor = \"pointer\"\n    }\n\n    this._activeDropdownLinks = this._getDropdownLinks(this._activeDropdownAttr)\n\n    this.firstDropdownLink = this._activeDropdownLinks[0]\n    this.lastDropdownLink = this._activeDropdownLinks[this._activeDropdownLinks.length - 1]\n\n    this.firstDropdownLink.addEventListener(Events.KEYDOWN, this._handleFirstTabClose)\n    this.lastDropdownLink.addEventListener(Events.KEYDOWN, this._handleLastTabClose)\n\n    if (key && key === KeyCodes.ARROW_UP) {\n      this.lastDropdownLink.focus()\n    } else {\n      this.firstDropdownLink.focus()\n    }\n\n    this._activeDropdownLinks.forEach(link => {\n      link.setAttribute(Selectors.TABINDEX, \"0\")\n      link.addEventListener(Events.CLICK, this._handleClose)\n    })\n\n    this.captureFocus(`${this._activeDropdownAttr} > ul`, { useArrows: true })\n  }\n\n  /**\n   * Closes the dropdown if user uses shift and tab keys on the first dropdown element.\n   * @param {Object} event - The event object\n   */\n  _handleFirstTabClose(event) {\n    const shiftKey = event.which === KeyCodes.SHIFT || event.shiftKey\n    const tabKey = event.which === KeyCodes.TAB\n\n    if (shiftKey && tabKey) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Closes the dropdown if user uses tab key on the last dropdown element.\n   * @param {Object} event - The event object\n   */\n  _handleLastTabClose(event) {\n    const shiftKey = event.which === KeyCodes.SHIFT || event.shiftKey\n    const tabKey = event.which === KeyCodes.TAB\n\n    if (tabKey && !shiftKey) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Renders dropdown if the user uses arrow up or down.\n   * @param {Object} event - The event object\n   */\n  _renderWithKeys(event) {\n    if (event.which === KeyCodes.ARROW_UP || event.which === KeyCodes.ARROW_DOWN) {\n      this._render(event, event.which)\n    }\n  }\n\n  /**\n   * Closes currently open dropdown.\n   * @param {Object} event - The event object\n   */\n  _handleClose(event) {\n    event.preventDefault()\n\n    this.releaseFocus()\n\n    this._activeDropdownButton.setAttribute(Selectors.ARIA_EXPANDED, \"false\")\n    this._activeDropdown.setAttribute(Selectors.DATA_VISIBLE, \"false\")\n\n    this._activeDropdownLinks.forEach(link => {\n      link.setAttribute(Selectors.TABINDEX, \"-1\")\n      link.removeEventListener(Events.CLICK, this._handleClose)\n    })\n\n    this._activeDropdownButton.removeEventListener(Events.CLICK, this._handleClose)\n    this._activeDropdownButton.addEventListener(Events.CLICK, this._render)\n\n    document.removeEventListener(Events.KEYDOWN, this._handleEscapeKeyPress)\n\n    if (iOSMobile) {\n      document.body.style.cursor = \"auto\"\n    }\n\n    document.removeEventListener(Events.CLICK, this._handleOffMenuClick)\n\n    if (this._allowFocusReturn) {\n      this._handleReturnFocus()\n    }\n\n    this._activeDropdownButton = null\n    this._activeDropdownId = null\n    this._activeDropdown = null\n  }\n\n  /**\n   * Use escape key to close dropdown.\n   * @param {Object} event - The event object\n   */\n  _handleEscapeKeyPress(event) {\n    if (event.which === KeyCodes.ESCAPE) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Closes dropdown\n   * @param {Object} event - The event object\n   */\n  _handleOffMenuClick(event) {\n    if (event.target !== this._activeDropdownButton && event.target !== this._activeDropdownMenu) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Puts focus on a the active dropdown button.\n   */\n  _handleReturnFocus() {\n    this._activeDropdownButton.setAttribute(Selectors.TAB_INDEX, \"-1\")\n    this._activeDropdownButton.focus()\n    this._activeDropdownButton.removeAttribute(Selectors.TAB_INDEX)\n  }\n\n  /**\n   * Retrieve possible menu links or buttons as an array\n   * @param {String} attr - The unique attribute for a dropdown.\n   * @return {String} - Selector for possible menu item links.\n   */\n  _getDropdownLinks(attr) {\n    return nodeListToArray(`${attr} > ul > li > a, ${attr} > ul > li > button`)\n  }\n\n  /**\n   * Add starting attributes to a dropdown.\n   * @param {Element} dropdown - A dropdown element.\n   */\n  _setupDropdown(dropdown) {\n    const dropdownId = dropdown.getAttribute(Selectors.DATA_DROPDOWN)\n\n    // no id error\n\n    const dropdownAttr = `[${Selectors.DATA_DROPDOWN}=\"${dropdownId}\"]`\n    const dropdownMenuItemsAttr = `${dropdownAttr} > ul > li`\n    const dropdownMenu = document.querySelector(`${dropdownAttr} > ul`)\n\n    if (!dropdownMenu) {\n      return console.error(Messages.NO_MENU_ERROR(dropdownAttr))\n    }\n\n    const dropdownButton = document.querySelector(`${dropdownAttr} > ${this._dropdownTargetAttr}`)\n\n    dropdownButton.setAttribute(Selectors.ARIA_CONTROLS, dropdownMenu.id)\n    dropdownButton.setAttribute(Selectors.ARIA_HASPOPUP, \"true\")\n    dropdownButton.setAttribute(Selectors.ARIA_EXPANDED, \"false\")\n    dropdownMenu.setAttribute(Selectors.ARIA_LABELLEDBY, dropdownButton.id)\n\n    const dropdownMenuListItems = nodeListToArray(dropdownMenuItemsAttr)\n\n    // no menu items error\n\n    dropdownMenuListItems.forEach(item => item.setAttribute(Selectors.ROLE, \"none\"))\n\n    const dropdownMenuButtons = this._getDropdownLinks(dropdownAttr)\n\n    // no menu buttons error\n\n    dropdownMenuButtons.forEach(link => {\n      link.setAttribute(Selectors.ROLE, \"menuitem\")\n      link.setAttribute(Selectors.TABINDEX, \"-1\")\n    })\n  }\n}\n","import Utils, { iOSMobile, getFocusableElements, nodeListToArray } from \"./utils\"\n\nconst KeyCodes = {\n  ESCAPE: 27,\n}\n\nconst Selectors = {\n  // unique\n  DATA_MODAL: \"data-modal\",\n  // common\n  DATA_TARGET: \"data-target\",\n  DATA_VISIBLE: \"data-visible\",\n  DATA_CLOSE: \"data-close\",\n  DATA_PARENT: \"data-parent\",\n  // accessibility\n  ARIA_HIDDEN: \"aria-hidden\",\n  ARIA_MODAL: \"aria-modal\",\n  ROLE: \"role\",\n  TABINDEX: \"tabindex\",\n  // classes\n  NO_SCROLL: \"no-scroll\",\n}\n\nconst Events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n  RESIZE: \"resize\",\n}\n\nconst Messages = {\n  NO_BUTTON_ID_ERROR:\n    \"Could not find an id on your [data-modal-button] element. Modal can't be opened.\",\n  NO_MODAL_ID_ERROR:\n    \"Could not detect an id on your [data-modal] element. Please add a value matching a button's [data-modal-button] attribute.\",\n  NO_MODAL_ERROR: id =>\n    `Could not find a [data-parent='${id}'] attribute within your [data-modal='${id}'] element.`,\n}\n\n/**\n * Modal component class.\n * @module Modal\n * @requires Utils\n */\nexport default class Modal extends Utils {\n  constructor() {\n    super()\n\n    // events\n    this._render = this._render.bind(this)\n    this._handleClose = this._handleClose.bind(this)\n    this._handleOverlayClick = this._handleOverlayClick.bind(this)\n    this._handleEscapeKeyPress = this._handleEscapeKeyPress.bind(this)\n\n    // all modals\n    this._modals = []\n    this._modalButtons = []\n\n    // active modal\n    this._activeModalButton = {}\n    this._activeModalOverlay = {}\n    this._activeModal = {}\n    this._activeModalId = \"\"\n    this._activeModalOverlayAttr = \"\"\n    this._activeModalSelector = \"\"\n    this._activeModalCloseButtons = []\n\n    // attribute helpers\n    this._modalContainerAttr = `[${Selectors.DATA_MODAL}]`\n  }\n\n  // public\n\n  /**\n   * Begin listening to modals.\n   */\n  start() {\n    this._modals = nodeListToArray(this._modalContainerAttr)\n\n    getFocusableElements(this._modalContainerAttr).forEach(element => {\n      element.setAttribute(Selectors.TABINDEX, \"-1\")\n    })\n\n    if (this._modals.length) {\n      this._modals.forEach(instance => {\n        this._setupModal(instance)\n        const id = instance.getAttribute(Selectors.DATA_MODAL)\n        const button = document.querySelector(`[${Selectors.DATA_TARGET}='${id}']`)\n        button.addEventListener(Events.CLICK, this._render)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to modals\n   */\n  stop() {\n    this._modals.forEach(instance => {\n      const id = instance.getAttribute(Selectors.DATA_MODAL)\n      const button = document.querySelector(`[${Selectors.DATA_TARGET}='${id}']`)\n      button.removeEventListener(Events.CLICK, this._render)\n    })\n  }\n\n  // private\n\n  /**\n   * Find a button through event.target, then render the corresponding modal attribute via matching target id\n   * @param {Object} event - The event object\n   */\n  _render(event) {\n    event.preventDefault()\n    this._activeModalButton = event.target\n    this._activeModalId = this._activeModalButton.getAttribute(Selectors.DATA_TARGET)\n\n    if (!this._activeModalId) {\n      return console.error(Messages.NO_BUTTON_ID_ERROR)\n    }\n\n    this._activeModalOverlay = document.querySelector(\n      `[${Selectors.DATA_MODAL}=\"${this._activeModalId}\"]`\n    )\n\n    this._activeModalSelector = `[${Selectors.DATA_PARENT}='${this._activeModalId}']`\n    this._activeModal = this._activeModalOverlay.querySelector(this._activeModalSelector)\n\n    this._activeModalCloseButtons = nodeListToArray(\n      `${this._activeModalSelector} [${Selectors.DATA_CLOSE}]`\n    )\n\n    getFocusableElements(this._activeModalSelector).forEach(element => {\n      element.setAttribute(Selectors.TABINDEX, \"0\")\n    })\n\n    this._handleScrollStop()\n    this.captureFocus(this._activeModalSelector)\n    this._activeModalOverlay.setAttribute(Selectors.ARIA_HIDDEN, \"false\")\n    this._activeModalOverlay.setAttribute(Selectors.DATA_VISIBLE, \"true\")\n\n    this._activeModal.setAttribute(Selectors.TABINDEX, \"-1\")\n    this._activeModal.focus()\n\n    this._activeModalOverlay.scrollTop = 0\n\n    if (iOSMobile) {\n      this._activeModalOverlay.style.cursor = \"pointer\"\n    }\n\n    // begin listening to events\n    document.addEventListener(Events.KEYDOWN, this._handleEscapeKeyPress)\n    document.addEventListener(Events.CLICK, this._handleOverlayClick)\n    this._activeModalCloseButtons.forEach(button => {\n      button.addEventListener(Events.CLICK, this._handleClose)\n    })\n  }\n\n  /**\n   * Setup a modal instance.\n   * @param {Object} instance - The modal element\n   */\n  _setupModal(instance) {\n    const modalId = instance.getAttribute(Selectors.DATA_MODAL)\n\n    if (!modalId) {\n      return console.error(Messages.NO_MODAL_ID_ERROR)\n    }\n\n    const modal = instance.querySelector(`[${Selectors.DATA_PARENT}='${modalId}']`)\n\n    if (!modal) {\n      return console.error(Messages.NO_MODAL_ERROR(modalId))\n    }\n\n    const modalWrapper = document.querySelector(`[${Selectors.DATA_MODAL}='${modalId}']`)\n\n    modalWrapper.setAttribute(Selectors.ARIA_HIDDEN, \"true\")\n    modalWrapper.setAttribute(Selectors.DATA_VISIBLE, \"false\")\n    modal.setAttribute(Selectors.ARIA_MODAL, \"true\")\n    modal.setAttribute(Selectors.ROLE, \"dialog\")\n  }\n\n  /**\n   * Turn off event listeners and reset focus to last selected DOM node (button)\n   * @param {Object} event - The event object\n   */\n  _handleClose(event) {\n    event.preventDefault()\n    this._activeModalOverlay.setAttribute(Selectors.DATA_VISIBLE, \"false\")\n    this._handleReturnFocus()\n    this._handleScrollRestore()\n    this.releaseFocus()\n    this._activeModalOverlay.setAttribute(Selectors.ARIA_HIDDEN, \"true\")\n    this._activeModal.removeAttribute(Selectors.TABINDEX)\n\n    getFocusableElements(this._activeModalSelector).forEach(element => {\n      element.setAttribute(Selectors.TABINDEX, \"-1\")\n    })\n\n    if (iOSMobile) {\n      this._activeModalOverlay.style.cursor = \"auto\"\n    }\n\n    // stop listening to events\n    document.removeEventListener(Events.KEYDOWN, this._handleEscapeKeyPress)\n    document.removeEventListener(Events.CLICK, this._handleOverlayClick)\n    this._activeModalCloseButtons.forEach(button => {\n      button.removeEventListener(Events.CLICK, this._handleClose)\n    })\n\n    this._activeModalId = null\n  }\n\n  /**\n   * Handles click event on the modal background to close it.\n   * @param {Object} event - The event object\n   */\n  _handleOverlayClick(event) {\n    if (event.target === this._activeModalOverlay) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Handles escape key event to close the current modal\n   * @param {Object} event - The event object\n   */\n  _handleEscapeKeyPress(event) {\n    if (event.which === KeyCodes.ESCAPE) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Returns focus to the last focused element before the modal was called.\n   * @param {Object} button - The current modal's corresponding button.\n   */\n  _handleReturnFocus() {\n    this._activeModalButton.setAttribute(Selectors.TABINDEX, \"-1\")\n    this._activeModalButton.focus()\n    this._activeModalButton.removeAttribute(Selectors.TABINDEX)\n  }\n\n  /**\n   * Restores scroll behavior to <html> and <body>\n   */\n  _handleScrollRestore() {\n    document.body.classList.remove(Selectors.NO_SCROLL)\n    document.documentElement.classList.remove(Selectors.NO_SCROLL)\n  }\n\n  /**\n   * Prevents scroll behavior on <html> and <body>\n   */\n  _handleScrollStop() {\n    document.body.classList.add(Selectors.NO_SCROLL)\n    document.documentElement.classList.add(Selectors.NO_SCROLL)\n  }\n}\n","import { iOSMobile } from \"./utils\"\n\nconst KeyCodes = {\n  ESCAPE: 27,\n}\n\nconst Selectors = {\n  // unique\n  DATA_TOOLTIP: \"data-tooltip\",\n  // common\n  DATA_VISIBLE: \"data-visible\",\n  DATA_TARGET: \"data-target\",\n  // accessibility\n  ROLE: \"role\",\n  ARIA_DESCRIBEDBY: \"aria-describedby\",\n  // classes\n  DROP_LEFT_CLASS: \"is-drop-left\",\n  DROP_RIGHT_CLASS: \"is-drop-right\",\n}\n\nconst Events = {\n  CLICK: \"click\",\n  MOUSEOVER: \"mouseover\",\n  MOUSEOUT: \"mouseout\",\n  FOCUS: \"focus\",\n  BLUR: \"blur\",\n  KEYDOWN: \"keydown\",\n}\n\nconst Messages = {\n  NO_ID_ERROR: \"Could not find your tooltip's id.\",\n  NO_TRIGGER_ERROR: id => `Could not find a tooltip trigger with id of ${id}.`,\n  NO_TOOLTIP_ERROR: id => `Could not find a tooltip with id of ${id}.`,\n}\n\n/**\n * Tooltip component class.\n * @module Tooltip\n */\nexport default class Tooltip {\n  constructor() {\n    // events\n    this._render = this._render.bind(this)\n    this._handleClose = this._handleClose.bind(this)\n    this._handleEscapeKeyPress = this._handleEscapeKeyPress.bind(this)\n\n    // active tooltip\n    this._activeTrigger = null\n    this._activeTooltip = null\n\n    // all tooltips\n    this._allTooltips = []\n  }\n\n  // public\n\n  /**\n   * Begin listening to tooltips.\n   */\n  start() {\n    this._allTooltips = document.querySelectorAll(`[${Selectors.DATA_TOOLTIP}]`)\n\n    this._allTooltips.forEach(instance => {\n      this._setupTooltip(instance)\n    })\n  }\n\n  /**\n   * Stop listening to tooltips.\n   */\n  stop() {\n    this._allTooltips.forEach(instance => {\n      const id = instance.getAttribute(Selectors.DATA_TOOLTIP)\n      const trigger = instance.querySelector(this._getTrigger(id))\n\n      trigger.removeEventListener(Events.MOUSEOVER, this._render)\n      trigger.removeEventListener(Events.FOCUS, this._render)\n    })\n  }\n\n  // private\n\n  /**\n   * Render a tooltip.\n   * @param {Object} event - The event object\n   */\n  _render(event) {\n    this._activeTrigger = event.target\n    const tooltipId = this._activeTrigger.getAttribute(Selectors.DATA_TARGET)\n    this._activeTooltip = document.getElementById(tooltipId)\n\n    // align tooltip to its trigger\n    // -> if the trigger is on the left or right side, use height\n    // -> else use width\n    if (this._isLeftOrRight()) {\n      this._alignTooltip(\"height\")\n    } else {\n      this._alignTooltip(\"width\")\n    }\n\n    this._showTooltip()\n    this._listenForClose()\n  }\n\n  /**\n   * Close a tooltip.\n   */\n  _handleClose() {\n    this._hideTooltip()\n    this._listenForOpen()\n\n    this._activeTrigger = null\n    this._activeTooltip = null\n  }\n\n  /**\n   * Add data-visible attribute to currently active tooltip.\n   */\n  _showTooltip() {\n    this._activeTooltip.setAttribute(Selectors.DATA_VISIBLE, \"true\")\n  }\n\n  /**\n   * Remove data-visible attribute from currently active tooltip.\n   */\n  _hideTooltip() {\n    this._activeTooltip.setAttribute(Selectors.DATA_VISIBLE, \"false\")\n  }\n\n  /**\n   * Stop listening for render events, and start listening to close events.\n   */\n  _listenForClose() {\n    this._activeTrigger.removeEventListener(Events.MOUSEOVER, this._render)\n    this._activeTrigger.removeEventListener(Events.FOCUS, this._render)\n    this._activeTrigger.addEventListener(Events.MOUSEOUT, this._handleClose)\n    this._activeTrigger.addEventListener(Events.BLUR, this._handleClose)\n    document.addEventListener(Events.KEYDOWN, this._handleEscapeKeyPress)\n\n    if (iOSMobile) {\n      document.body.style.cursor = \"pointer\"\n    }\n  }\n\n  /**\n   * Close a tooltip with the escape key.\n   * @param {Object} event - The event object\n   */\n  _handleEscapeKeyPress(event) {\n    if (event.which === KeyCodes.ESCAPE) {\n      this._handleClose()\n    }\n  }\n\n  /**\n   * Stop listening to close events, start listening for render events.\n   */\n  _listenForOpen() {\n    this._activeTrigger.removeEventListener(Events.MOUSEOUT, this._handleClose)\n    this._activeTrigger.removeEventListener(Events.BLUR, this._handleClose)\n    this._activeTrigger.addEventListener(Events.MOUSEOVER, this._render)\n    this._activeTrigger.addEventListener(Events.FOCUS, this._render)\n    document.removeEventListener(Events.KEYDOWN, this._handleEscapeKeyPress)\n\n    if (iOSMobile) {\n      document.body.style.cursor = \"auto\"\n    }\n  }\n\n  /**\n   * Aligns a tooltip vertically or horizontally.\n   * @param {String} property - String specifying \"height\" or \"width\"\n   */\n  _alignTooltip(property) {\n    const triggerLength = this._getComputedLength(this._activeTrigger, property)\n    const tooltipLength = this._getComputedLength(this._activeTooltip, property)\n    const triggerIsLongest = triggerLength > tooltipLength\n\n    const offset = triggerIsLongest\n      ? (triggerLength - tooltipLength) / 2\n      : (tooltipLength - triggerLength) / -2\n\n    if (property === \"height\") {\n      this._activeTooltip.style.top = `${offset}px`\n    } else {\n      this._activeTooltip.style.left = `${offset}px`\n    }\n  }\n\n  /**\n   * Setup a tooltip and trigger with appropriate event listeners and attributes.\n   * @param {Object} instance - A tooltip instance\n   */\n  _setupTooltip(instance) {\n    const id = instance.getAttribute(Selectors.DATA_TOOLTIP)\n    const trigger = instance.querySelector(this._getTrigger(id))\n    const tooltip = document.getElementById(id)\n\n    if (!id) {\n      return console.error(Messages.NO_ID_ERROR)\n    }\n\n    if (!trigger) {\n      return console.error(Messages.NO_TRIGGER_ERROR(id))\n    }\n\n    if (!tooltip) {\n      return console.error(Messages.NO_TOOLTIP_ERROR(id))\n    }\n\n    trigger.setAttribute(Selectors.ARIA_DESCRIBEDBY, id)\n    tooltip.setAttribute(Selectors.ROLE, \"tooltip\")\n\n    trigger.addEventListener(Events.MOUSEOVER, this._render)\n    trigger.addEventListener(Events.FOCUS, this._render)\n  }\n\n  /**\n   * Get an attribute selector string.\n   * @param {String} id - A unique tooltip id\n   * @return {String}\n   */\n  _getTrigger(id) {\n    return `[${Selectors.DATA_TARGET}=\"${id}\"]`\n  }\n\n  /**\n   * Render a tooltip.\n   * @param {Object} element - A tooltip element\n   * @param {String} property - The \"height\" or \"width\" property.\n   * @return {Number}\n   */\n  _getComputedLength(element, property) {\n    return parseInt(window.getComputedStyle(element)[property].slice(0, -2))\n  }\n\n  /**\n   * Determine if a tooltip is rendering on the left or right.\n   * @return {Boolean}\n   */\n  _isLeftOrRight() {\n    const classes = this._activeTooltip.classList\n    return (\n      classes.contains(Selectors.DROP_LEFT_CLASS) || classes.contains(Selectors.DROP_RIGHT_CLASS)\n    )\n  }\n}\n","import _Accordion from \"./accordion\"\nimport _Dropdown from \"./dropdown\"\nimport _Modals from \"./modal\"\nimport _Tooltips from \"./tooltip\"\nimport _Utils from \"./utils\"\n\nexport const Accordions = new _Accordion()\nexport const Dropdowns = new _Dropdown()\nexport const Modals = new _Modals()\nexport const Tooltips = new _Tooltips()\nexport const Utils = new _Utils()\n\nconst Undernet = {\n  // Components\n  Modals,\n  Accordions,\n  Dropdowns,\n  Tooltips,\n\n  // Utils\n  Utils,\n}\n\nUndernet.start = () => {\n  // Components\n  Undernet.Modals.start()\n  Undernet.Accordions.start()\n  Undernet.Dropdowns.start()\n  Undernet.Tooltips.start()\n\n  // Utils\n  Undernet.Utils.enableFocusOutline()\n}\n\nUndernet.stop = () => {\n  // Components\n  Undernet.Modals.stop()\n  Undernet.Accordions.stop()\n  Undernet.Dropdowns.stop()\n\n  // Utils\n  Undernet.Utils.disableFocusOutline()\n}\n\nexport default Undernet\n","import Undernet from \"./index\"\n\nwindow.Undernet = Undernet\nexport { default as Undernet, Modals, Accordions, Dropdowns, Tooltips, Utils } from \"./index\"\n"],"names":["KeyCodes","Selectors","NOT_VISUALLY_HIDDEN","FOCUSABLE_TAGS","KEYBOARD_CLASS","Events","nodeListToArray","nodeList","document","querySelectorAll","getFocusableElements","container","focusables","map","element","join","iOSMobile","test","navigator","userAgent","Utils","_listenForKeyboard","this","bind","_listenForClick","_handleFocusTrapWithTab","_handleFocusTrapWithArrows","_focusContainerSelector","_focusableChildren","_focusableFirstChild","_focusableLastChild","_listeningForKeydown","_trapFocusWithArrows","options","length","useArrows","addEventListener","removeEventListener","body","classList","add","remove","event","containerElement","querySelector","containerActive","activeElement","firstActive","lastActive","tabKey","which","shiftKey","noShift","preventDefault","focus","arrowUp","arrowDown","_focusNextChild","_focusLastChild","i","Messages","NO_VISIBLE_ERROR","id","NO_ROW_ERROR","NO_HEADER_ID_ERROR","NO_PARENT_ERROR","NO_CONTENT_ERROR","Accordion","_render","_this","_accordionButtons","_accordionContentsAttr","_accordionContents","_activeContainer","_activeButton","_activeAccordionRowId","_activeRowAttr","_activeRow","_activeContainerId","_activeContainerAttr","_activeContent","_activeButtonExpandState","_activeContentHiddenState","_headerLevels","accordionButtonSelector","_getPossibleAccordionButtonAttrs","forEach","button","_this2","_setupAccordion","_this3","target","getAttribute","_getAccordionRowAttr","console","error","NO_ACCORDION_ERROR","getElementById","accordionButtonState","_closeAllIfToggleable","_toggleSelectedAccordion","buttonId","buttonContent","accordionRowAttr","accordionRow","buttonHeaderAttr","_getPossibleAccordionHeaderAttrs","buttonHeader","buttonContentChildren","setAttribute","contentShouldExpand","style","maxHeight","scrollHeight","attr","num","hasAttribute","allContentAttr","allRows","allContent","allButtons","content","_this4","_toggleAttributeInCollection","activeContentBlock","value","_this5","elements","attributeName","currentValue","newValue","DATA_DROPDOWN","DATA_TARGET","DATA_PARENT","DATA_VISIBLE","TABINDEX","ARIA_HASPOPUP","ARIA_CONTROLS","ARIA_LABELLEDBY","ARIA_EXPANDED","ROLE","Dropdown","_handleFirstTabClose","_handleLastTabClose","_renderWithKeys","_handleClose","_handleEscapeKeyPress","_handleOffMenuClick","_activeDropdownButton","_activeDropdown","_activeDropdownMenu","_activeDropdownLinks","_allowFocusReturn","_activeDropdownId","_activeDropdownAttr","_activeDropdownMenuId","_dropdownButtons","_dropdowns","_dropdownContainerAttr","_dropdownTargetAttr","dropdown","_setupDropdown","key","stopPropagation","cursor","_getDropdownLinks","firstDropdownLink","lastDropdownLink","link","captureFocus","releaseFocus","_handleReturnFocus","TAB_INDEX","removeAttribute","dropdownId","dropdownAttr","dropdownMenuItemsAttr","dropdownMenu","dropdownButton","item","Modal","_handleOverlayClick","_modals","_modalButtons","_activeModalButton","_activeModalOverlay","_activeModal","_activeModalId","_activeModalOverlayAttr","_activeModalSelector","_activeModalCloseButtons","_modalContainerAttr","instance","_setupModal","_handleScrollStop","scrollTop","modalId","modal","modalWrapper","_handleScrollRestore","documentElement","Tooltip","_activeTrigger","_activeTooltip","_allTooltips","_setupTooltip","trigger","_getTrigger","tooltipId","_isLeftOrRight","_alignTooltip","_showTooltip","_listenForClose","_hideTooltip","_listenForOpen","property","triggerLength","_getComputedLength","tooltipLength","offset","top","left","tooltip","parseInt","window","getComputedStyle","slice","classes","contains","Accordions","_Accordion","Dropdowns","_Dropdown","Modals","_Modals","Tooltips","_Tooltips","_Utils","Undernet","start","enableFocusOutline","stop","disableFocusOutline"],"mappings":"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"}