{"version":3,"file":"undernet.bundle.min.js","sources":["../js/src/utils.js","../js/src/components/modal.js","../js/src/components/accordion.js","../js/src/undernet.js"],"sourcesContent":["\"use strict\"\n\nconst keyCodes = {\n  SHIFT: 16,\n  TAB: 9,\n}\n\nconst selectors = {\n  FOCUSABLE_SELECTOR: \":not(.is-visually-hidden)\",\n  FOCUSABLE_TAGS: [\"a\", \"button\", \"input\", \"object\", \"select\", \"textarea\", \"[tabindex]\"],\n  KEYBOARD_CLASS: \"using-keyboard\",\n}\n\nconst events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n}\n\n/**\n * Utility methods for DOM traversal and focus trapping.\n * @module Utils\n */\nexport default class Utils {\n  constructor() {\n    this._handleFocusTrap = this._handleFocusTrap.bind(this)\n    this._listenForKeyboard = this._listenForKeyboard.bind(this)\n    this._listenForClick = this._listenForClick.bind(this)\n  }\n\n  // public\n\n  /**\n   * Listens to the first and last elements matched from this._getFocusableElements()\n   * @param {String} container - The container's class, attribute, etc.\n   */\n  captureFocus(container) {\n    this.focusContainerSelector = container\n    const children = this._getFocusableElements(this.focusContainerSelector)\n    this.focusableFirstChild = children[0]\n    this.focusableLastChild = children[children.length - 1]\n\n    document.addEventListener(events.KEYDOWN, this._handleFocusTrap)\n  }\n\n  /**\n   * Stop trapping focus set in this.captureFocus()\n   */\n  releaseFocus() {\n    document.removeEventListener(events.KEYDOWN, this._handleFocusTrap)\n  }\n\n  /**\n   * Begin listening to _listenForKeyboard()\n   */\n  enableFocusOutline() {\n    document.addEventListener(events.KEYDOWN, this._listenForKeyboard)\n  }\n\n  /**\n   * Completely disable focus outline utility.\n   */\n  disableFocusOutline() {\n    document.removeEventListener(events.KEYDOWN, this._listenForKeyboard)\n    document.removeEventListener(events.CLICK, this.__listenForClick)\n  }\n\n  // private\n\n  /**\n   * When a key is pressed, detect if it's tab or shift keys and enable\n   * focus outlines on currently focused element(s). Then, remove keydown listener\n   * and add click listener on _listenForClick().\n   * @param {Object} event - Event (keypress).\n   */\n  _listenForKeyboard(event) {\n    const tabKey = event.which === keyCodes.TAB\n    const shiftKey = event.which === keyCodes.SHIFT || event.shiftKey\n\n    if (tabKey || shiftKey) {\n      document.body.classList.add(selectors.KEYBOARD_CLASS)\n      document.removeEventListener(events.KEYDOWN, this._listenForKeyboard)\n      document.addEventListener(events.CLICK, this._listenForClick)\n    }\n  }\n\n  /**\n   * On click, remove selectors.KEYBOARD_CLASS and re-add keydown listener.\n   * @param {Object} event - Event (keypress).\n   */\n  _listenForClick(event) {\n    document.body.classList.remove(selectors.KEYBOARD_CLASS)\n    document.removeEventListener(events.CLICK, this._listenForClick)\n    document.addEventListener(events.KEYDOWN, this._listenForKeyboard)\n  }\n\n  /**\n   * Because IE does not recognize NodeList.forEach(),\n   * we use a cross-browser solution for returning an array of DOM nodes every time.\n   * @param {String} element - A DOM node's class, attribute, etc., to search the document.\n   * @return {Array}\n   */\n  _getElements(element) {\n    const nodeList = document.querySelectorAll(element)\n    return Array.apply(null, nodeList)\n  }\n\n  /**\n   * Creates a string of element selector patterns using common elements.\n   * @param {String} container - The enclosing container's class, attribute, etc.\n   * @return {String}\n   */\n  _getFocusableElements(container) {\n    let focusables = []\n    selectors.FOCUSABLE_TAGS.map(element =>\n      focusables.push(`${container} ${element}${selectors.FOCUSABLE_SELECTOR}`),\n    )\n    return this._getElements(focusables.join(\", \"))\n  }\n\n  /**\n   * Handles focus on first or last child in a container.\n   * @param {Object} event - Event (keypress)\n   */\n  _handleFocusTrap(event) {\n    const activeElement = document.activeElement\n    const containerElement = document.querySelector(this.focusContainerSelector)\n    const containerActive = activeElement === containerElement\n    const firstActive = activeElement === this.focusableFirstChild\n    const lastActive = activeElement === this.focusableLastChild\n    const tabKey = event.which === keyCodes.TAB\n    const shiftKey = event.which === keyCodes.SHIFT || event.shiftKey\n    const hasShift = shiftKey && tabKey\n    const noShift = !shiftKey && tabKey\n\n    // Just in case the first or last child have changed -\n    // recapture focus and continue trapping.\n    this.releaseFocus()\n    this.captureFocus(this.focusContainerSelector)\n\n    if (hasShift && (firstActive || containerActive)) {\n      event.preventDefault()\n      this.focusableLastChild.focus()\n    } else if (noShift && lastActive) {\n      event.preventDefault()\n      this.focusableFirstChild.focus()\n    }\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst keyCodes = {\n  ESCAPE: 27,\n}\n\nconst selectors = {\n  // unique\n  MODAL_CONTAINER: \"data-modal\",\n  MODAL_ID: \"data-modal-id\",\n  MODAL_BUTTON: \"data-modal-button\",\n  NO_SCROLL: \"no-scroll\",\n  // common\n  VISIBLE: \"data-visible\",\n  CLOSE: \"data-close\",\n  TARGET: \"data-target\",\n  // accessibility\n  ARIA_HIDDEN: \"aria-hidden\",\n  ARIA_MODAL: \"aria-modal\",\n  ROLE: \"role\",\n  TAB_INDEX: \"tabindex\",\n}\n\nconst events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n  RESIZE: \"resize\",\n}\n\nconst messages = {\n  MISSING_MODAL:\n    \"Your button is missing its corresponding modal. Check to make sure your modal is in the DOM, and that it has a [data-modal-id=*] attribute matchin its [data-modal-button] and [data-target] attributes. It's possible the modal script ran before the button appeared on the page!\",\n}\n\n/**\n * Modal component class.\n * @module Modal\n * @requires Utils\n */\nexport default class Modal extends Utils {\n  constructor() {\n    super()\n    // modal event methods\n    this._getModal = this._getModal.bind(this)\n    this._handleModalClose = this._handleModalClose.bind(this)\n    this._handleEscapeKeyPress = this._handleEscapeKeyPress.bind(this)\n    this._handleOverlayClick = this._handleOverlayClick.bind(this)\n\n    // all modals\n    this.modalContainerAttr = `[${selectors.MODAL_CONTAINER}]`\n    this.closeButtonAttr = `[${selectors.MODAL_CONTAINER}] [${selectors.CLOSE}]`\n    this.modals = null\n    this.modalButtons = null\n    this.closeButtons = null\n\n    // active modal\n    this.activeModalButton = {}\n    this.activeModalId = \"\"\n    this.activeModalOverlayAttr = \"\"\n    this.activeModalOverlay = {}\n    this.activeModalSelector = \"\"\n    this.activeModal = null\n    this.activeModalCloseButtons = []\n  }\n\n  // public\n\n  /**\n   * Add accessible attributes to modal containers\n   * Begin listening to elements with [data-modal-button]\n   */\n  start() {\n    this.modals = this._getElements(this.modalContainerAttr)\n    this.modalButtons = this._getElements(`[${selectors.MODAL_BUTTON}]`)\n    this.closeButtons = this._getElements(this.closeButtonAttr)\n\n    this._getFocusableElements(this.modalContainerAttr).forEach(element => {\n      element.setAttribute(selectors.TAB_INDEX, \"-1\")\n    })\n\n    if (this.modals.length) {\n      this.modals.forEach(modal => {\n        modal.setAttribute(selectors.ARIA_MODAL, \"true\")\n        modal.parentNode.setAttribute(selectors.ARIA_HIDDEN, \"true\")\n        modal.parentNode.setAttribute(selectors.VISIBLE, \"false\")\n        modal.setAttribute(selectors.ROLE, \"dialog\")\n      })\n    }\n\n    if (this.modalButtons.length) {\n      this.modalButtons.forEach(button => {\n        button.addEventListener(events.CLICK, this._getModal)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to modal buttons\n   */\n  stop() {\n    this.modalButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this._getModal)\n    })\n  }\n\n  // private\n\n  /**\n   * Locate a button's corresponding modal container.\n   * @param {Object} event - The event object\n   */\n  _getModal(event) {\n    event.preventDefault()\n    this._renderModal(event)\n  }\n\n  /**\n   * Find a button through event.target, then render the corresponding modal attribute via matching target id\n   * @param {Object} event - The event object\n   */\n  _renderModal(event) {\n    this.activeModalButton = event.target\n    this.activeModalId = this.activeModalButton.getAttribute(selectors.TARGET)\n    this.activeModalOverlayAttr = `[${selectors.MODAL_ID}='${this.activeModalId}']`\n    this.activeModalOverlay = document.querySelector(this.activeModalOverlayAttr)\n\n    if (!this.activeModalOverlay) {\n      throw messages.MISSING_MODAL\n      return\n    }\n\n    this.activeModalSelector = `${this.activeModalOverlayAttr} ${this.modalContainerAttr}`\n    this.activeModal = document.querySelector(this.activeModalSelector)\n    this.activeModalCloseButtons = this._getElements(\n      `${this.activeModalOverlayAttr} ${this.closeButtonAttr}`,\n    )\n\n    this._getFocusableElements(this.activeModalSelector).forEach(element => {\n      element.setAttribute(selectors.TAB_INDEX, \"0\")\n    })\n\n    this._handleScrollStop()\n    this.captureFocus(this.activeModalSelector)\n    this.activeModalOverlay.setAttribute(selectors.ARIA_HIDDEN, \"false\")\n    this.activeModal.setAttribute(\"tabindex\", \"-1\")\n    this.activeModalOverlay.setAttribute(selectors.VISIBLE, \"true\")\n    this.activeModal.focus()\n\n    // offset slight scroll caused by this.activeModal.focus()\n    this.activeModalOverlay.scrollTop = 0\n\n    // begin listening to events\n    document.addEventListener(events.KEYDOWN, this._handleEscapeKeyPress)\n    document.addEventListener(events.CLICK, this._handleOverlayClick)\n    this.activeModalCloseButtons.forEach(button => {\n      button.addEventListener(events.CLICK, this._handleModalClose)\n    })\n  }\n\n  /**\n   * Turn off event listeners and reset focus to last selected DOM node (button)\n   * @param {Object} event - Event (keydown or click)\n   */\n  _handleModalClose(event) {\n    event.preventDefault()\n    this.activeModalOverlay.setAttribute(selectors.VISIBLE, \"false\")\n    this._handleReturnFocus()\n    this._handleScrollRestore()\n    this.releaseFocus()\n    this.activeModalOverlay.setAttribute(selectors.ARIA_HIDDEN, \"true\")\n    this.activeModal.removeAttribute(\"tabindex\")\n\n    this._getFocusableElements(this.activeModalSelector).forEach(element => {\n      element.setAttribute(selectors.TAB_INDEX, \"-1\")\n    })\n\n    // stop listening to events\n    document.removeEventListener(events.KEYDOWN, this._handleEscapeKeyPress)\n    document.removeEventListener(events.CLICK, this._handleOverlayClick)\n    this.activeModalCloseButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this._handleModalClose)\n    })\n  }\n\n  /**\n   * Handles click event on the modal background to close it.\n   * @param {Object} event - Event (keydown)\n   */\n  _handleOverlayClick(event) {\n    if (event.target === this.activeModalOverlay) {\n      this._handleModalClose(event)\n    }\n  }\n\n  /**\n   * Handles escape key event to close the current modal\n   * @param {Object} event - Event (keydown)\n   */\n  _handleEscapeKeyPress(event) {\n    if (event.which === keyCodes.ESCAPE) {\n      this._handleModalClose(event)\n    }\n  }\n\n  /**\n   * Returns focus to the last focused element before the modal was called.\n   * @param {Object} button - The current modal's corresponding button.\n   */\n  _handleReturnFocus() {\n    this.activeModalButton.setAttribute(\"tabindex\", \"-1\")\n    this.activeModalButton.focus()\n    this.activeModalButton.removeAttribute(\"tabindex\")\n  }\n\n  /**\n   * Restores scroll behavior to <html> and <body>\n   */\n  _handleScrollRestore() {\n    document.body.classList.remove(selectors.NO_SCROLL)\n    document.querySelector(\"html\").classList.remove(selectors.NO_SCROLL)\n  }\n\n  /**\n   * Prevents scroll behavior on <html> and <body>\n   */\n  _handleScrollStop() {\n    document.body.classList.add(selectors.NO_SCROLL)\n    document.querySelector(\"html\").classList.add(selectors.NO_SCROLL)\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst keyCodes = {\n  SPACE: 32,\n}\n\nconst selectors = {\n  // unique\n  ACCORDION_CONTAINER: \"data-accordion\",\n  ACCORDION_ROW: \"data-accordion-row\",\n  // common\n  EXPANDED: \"data-expanded\",\n  TARGET: \"data-target\",\n  CONTENT: \"data-content\",\n  TOGGLE_MULTIPLE: \"data-toggle-multiple\",\n  PARENT: \"data-parent\",\n  // accessibility\n  ARIA_EXPANDED: \"aria-expanded\",\n  ARIA_CONTROLS: \"aria-controls\",\n  ARIA_HIDDEN: \"aria-hidden\",\n  TAB_INDEX: \"tabindex\",\n}\n\nconst events = {\n  CLICK: \"click\",\n  KEYDOWN: \"keydown\",\n}\n\nconst messages = {\n  MISSING_CONTENT:\n    \"You have an accordion button that is missing its [data-content] attribute, and has a matching id to the button's [data-target] attribute's value.\",\n}\n\n/**\n * Accordion component class.\n * @module Accordion\n * @requires Utils\n */\nexport default class Accordion extends Utils {\n  constructor() {\n    super()\n    // accordion event methods\n    this._renderAccordionContent = this._renderAccordionContent.bind(this)\n    this._handleSpaceKeyPress = this._handleSpaceKeyPress.bind(this)\n\n    // all accordions\n    this.accordionButtons = null\n    this.accordionContentsAttr = \"\"\n    this.accordionContents = []\n\n    // active accordion\n    this.activeContainer = {}\n    this.activeButton = {}\n    this.activeAccordionRowId = \"\"\n    this.activeRowAttr = \"\"\n    this.activeRow = \"\"\n    this.activeContainerId = \"\"\n    this.activeContainerAttr = \"\"\n    this.activeContainer = {}\n    this.activeContent = {}\n    this.toggleExpandState = null\n    this.toggleContentState = null\n    this.toggleHiddenState = null\n    this.allContentAttr = \"\"\n  }\n\n  // public\n\n  /**\n   * Add accessible attributes [data-accordion-button] and [data-accordion-content] elements\n   * Begin listening to [data-accordion-button] elements\n   */\n  start() {\n    this.accordionButtons = this._getElements(\n      `[${selectors.ACCORDION_CONTAINER}] [${selectors.TARGET}]`,\n    )\n\n    this.accordionContentsAttr = `[${selectors.ACCORDION_CONTAINER}] [${selectors.CONTENT}]`\n    this.accordionContents = this._getElements(this.accordionContentsAttr)\n\n    this._getFocusableElements(this.accordionContentsAttr).forEach(element => {\n      element.setAttribute(selectors.TAB_INDEX, \"-1\")\n    })\n\n    if (this.accordionButtons.length) {\n      this.accordionButtons.forEach(button => {\n        this._setupButton(button)\n        button.addEventListener(events.CLICK, this._renderAccordionContent)\n        button.addEventListener(events.KEYDOWN, this._handleSpaceKeyPress)\n      })\n    }\n\n    if (this.accordionContents.length) {\n      this.accordionContents.forEach(content => {\n        const contentRowAttr = this._getAccordionRowAttr(content.id)\n        const contentRow = document.querySelector(contentRowAttr)\n        const contentHiddenState = contentRow.getAttribute(selectors.EXPANDED)\n        const toggleContentHiddenState = contentHiddenState === \"true\" ? \"false\" : \"true\"\n        content.setAttribute(selectors.ARIA_HIDDEN, toggleContentHiddenState)\n\n        if (toggleContentHiddenState === \"false\") {\n          this._getFocusableElements(`#${content.id}`).forEach(element => {\n            element.setAttribute(selectors.TAB_INDEX, \"0\")\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Stop listening to accordion buttons.\n   */\n  stop() {\n    this.accordionButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this._renderAccordionContent)\n      button.removeEventListener(events.KEYDOWN, this._handleSpaceKeyPress)\n    })\n  }\n\n  // private\n\n  _setupButton(button) {\n    const buttonId = button.getAttribute(selectors.TARGET)\n    const accordionRowAttr = this._getAccordionRowAttr(buttonId)\n    const accordionRow = document.querySelector(accordionRowAttr)\n    const shouldContentExpand = accordionRow.getAttribute(selectors.EXPANDED)\n    const buttonContent = document.getElementById(buttonId)\n\n    button.setAttribute(selectors.ARIA_CONTROLS, buttonId)\n\n    if (shouldContentExpand === \"true\") {\n      buttonContent.style.maxHeight = `${buttonContent.scrollHeight}px`\n      button.setAttribute(selectors.ARIA_EXPANDED, \"true\")\n    } else {\n      button.setAttribute(selectors.ARIA_EXPANDED, \"false\")\n    }\n  }\n\n  /**\n   * Return a selector that targets `selectors.ACCORDION_ROW` with value of the id.\n   * @param {String} id - An id value associated with a given selectors.TARGET\n   * @return {String}\n   */\n  _getAccordionRowAttr(id) {\n    return `[${selectors.ACCORDION_ROW}='${id}']`\n  }\n\n  /**\n   * Open accordion content associated with a [data-accordion-button] element.\n   * @param {Object} event - The event object.\n   */\n  _renderAccordionContent(event) {\n    event.preventDefault()\n\n    this.activeButton = event.target\n    this.activeAccordionRowId = this.activeButton.getAttribute(selectors.TARGET)\n\n    this.activeRowAttr = this._getAccordionRowAttr(this.activeAccordionRowId)\n    this.activeRow = document.querySelector(this.activeRowAttr)\n    this.activeContainerId = this.activeButton.getAttribute(selectors.PARENT)\n    this.activeContainerAttr = `[${selectors.ACCORDION_CONTAINER}='${this.activeContainerId}']`\n    this.activeContainer = document.querySelector(this.activeContainerAttr)\n\n    this.activeContent = document.getElementById(this.activeAccordionRowId)\n\n    const accordionContentHasAttr = this.activeContent.hasAttribute(selectors.CONTENT)\n    if (!accordionContentHasAttr) {\n      throw messages.MISSING_CONTENT\n      return\n    }\n\n    const accordionButtonState = this.activeRow.getAttribute(selectors.EXPANDED)\n    const accordionContentState = this.activeContent.getAttribute(selectors.CONTENT)\n\n    this.toggleExpandState = accordionButtonState === \"true\" ? \"false\" : \"true\"\n    this.toggleContentState = accordionContentState === \"visible\" ? \"hidden\" : \"visible\"\n    this.toggleHiddenState = this.toggleExpandState === \"false\" ? \"true\" : \"false\"\n\n    this._closeAllIfToggleable()\n    this._toggleSelectedAccordion()\n  }\n\n  /**\n   * If a keypress is the spacebar on a button, open its correlated content.\n   * @param {Object} event - The event object.\n   */\n  _handleSpaceKeyPress(event) {\n    if (event.which === keyCodes.SPACE) this._renderAccordionContent(event)\n  }\n\n  /**\n   * If toggling multiple rows at once isn't enabled, close all rows except the selected one.\n   * This ensures the selected one can be closed if it's already open.\n   */\n  _closeAllIfToggleable() {\n    if (this.activeContainer.hasAttribute(selectors.TOGGLE_MULTIPLE)) return\n    this.allContentAttr = `${this.activeContainerAttr} [${selectors.CONTENT}]`\n    const allRows = this._getElements(`${this.activeContainerAttr} [${selectors.EXPANDED}]`)\n    const allContent = this._getElements(this.allContentAttr)\n    const allButtons = this._getElements(`${this.activeContainerAttr} [${selectors.TARGET}]`)\n\n    allContent.forEach(content => {\n      if (!(content === this.activeContent)) content.style.maxHeight = null\n    })\n\n    this._getFocusableElements(this.allContentAttr).forEach(element => {\n      element.setAttribute(selectors.TAB_INDEX, \"-1\")\n    })\n\n    this._toggleAttributeInCollection(allRows, selectors.EXPANDED, \"true\", \"false\")\n    this._toggleAttributeInCollection(allButtons, selectors.ARIA_EXPANDED, \"true\", \"false\")\n    this._toggleAttributeInCollection(allContent, selectors.ARIA_HIDDEN, \"false\", \"true\")\n    this._toggleAttributeInCollection(allContent, selectors.CONTENT, \"visible\", \"hidden\")\n  }\n\n  /**\n   * Toggle a [data-accordion-button]'s corresponding [data-accordion-content] element.\n   */\n  _toggleSelectedAccordion() {\n    this.activeRow.setAttribute(selectors.EXPANDED, this.toggleExpandState)\n    this.activeContent.setAttribute(selectors.CONTENT, this.toggleContentState)\n    this.activeButton.setAttribute(selectors.ARIA_EXPANDED, this.toggleExpandState)\n    this.activeContent.setAttribute(selectors.ARIA_HIDDEN, this.toggleHiddenState)\n\n    const activeContentBlock = `#${this.activeAccordionRowId}`\n    this._getFocusableElements(activeContentBlock).forEach(element => {\n      const value = this.toggleExpandState === \"true\" ? \"0\" : \"-1\"\n      element.setAttribute(selectors.TAB_INDEX, value)\n    })\n\n    if (this.activeContent.style.maxHeight) {\n      this.activeContent.style.maxHeight = null\n    } else {\n      this.activeContent.style.maxHeight = `${this.activeContent.scrollHeight}px`\n    }\n  }\n\n  /**\n   * Toggles a single attribute of a series of elements within a parent.\n   */\n  _toggleAttributeInCollection(elements, attributeName, currentValue, newValue) {\n    elements.forEach(element => {\n      if (element.hasAttribute(attributeName, currentValue)) {\n        element.setAttribute(attributeName, newValue)\n      }\n    })\n  }\n}\n","\"use strict\"\n\nimport _Modals from \"./components/modal\"\nimport _Accordion from \"./components/accordion\"\nimport _Utils from \"./utils\"\n\nconst Modals = new _Modals()\nconst Accordions = new _Accordion()\nconst Utils = new _Utils()\n\nconst Undernet = {\n  // Components\n  Modals,\n  Accordions,\n\n  // Utils\n  Utils,\n}\n\nUndernet.start = () => {\n  // Components\n  Undernet.Modals.start()\n  Undernet.Accordions.start()\n\n  // Utils\n  Undernet.Utils.enableFocusOutline()\n}\n\nUndernet.stop = () => {\n  // Components\n  Undernet.Modals.stop()\n  Undernet.Accordions.stop()\n\n  // Utils\n  Undernet.Utils.disableFocusOutline()\n}\n\nwindow.Undernet = Undernet\nexport default Undernet\n"],"names":["keyCodes","selectors","FOCUSABLE_SELECTOR","FOCUSABLE_TAGS","KEYBOARD_CLASS","events","Utils","_handleFocusTrap","this","bind","_listenForKeyboard","_listenForClick","container","focusContainerSelector","children","_getFocusableElements","focusableFirstChild","focusableLastChild","length","document","addEventListener","removeEventListener","__listenForClick","event","tabKey","which","shiftKey","body","classList","add","remove","element","nodeList","querySelectorAll","Array","apply","focusables","map","push","_getElements","join","activeElement","containerActive","querySelector","firstActive","lastActive","hasShift","noShift","releaseFocus","captureFocus","preventDefault","focus","messages","Modal","_getModal","_this","_handleModalClose","_handleEscapeKeyPress","_handleOverlayClick","modalContainerAttr","closeButtonAttr","modals","modalButtons","closeButtons","activeModalButton","activeModalId","activeModalOverlayAttr","activeModalOverlay","activeModalSelector","activeModal","activeModalCloseButtons","forEach","setAttribute","modal","parentNode","button","_this2","_this3","_renderModal","target","getAttribute","_handleScrollStop","scrollTop","_this4","_handleReturnFocus","_handleScrollRestore","removeAttribute","_this5","Accordion","_renderAccordionContent","_handleSpaceKeyPress","accordionButtons","accordionContentsAttr","accordionContents","activeContainer","activeButton","activeAccordionRowId","activeRowAttr","activeRow","activeContainerId","activeContainerAttr","activeContent","toggleExpandState","toggleContentState","toggleHiddenState","allContentAttr","_setupButton","content","contentRowAttr","_getAccordionRowAttr","id","toggleContentHiddenState","buttonId","accordionRowAttr","shouldContentExpand","buttonContent","getElementById","style","maxHeight","scrollHeight","hasAttribute","accordionButtonState","accordionContentState","_closeAllIfToggleable","_toggleSelectedAccordion","allRows","allContent","allButtons","_toggleAttributeInCollection","activeContentBlock","value","elements","attributeName","currentValue","newValue","Undernet","Modals","_Modals","Accordions","_Accordion","_Utils","start","enableFocusOutline","stop","disableFocusOutline","window"],"mappings":"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"}