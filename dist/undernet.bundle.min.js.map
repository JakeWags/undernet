{"version":3,"file":"undernet.bundle.min.js","sources":["../js/src/utils.js","../js/src/components/modal.js","../js/src/components/accordion.js","../js/src/components/dropdown.js","../js/src/index.js","../js/src/index.bundle.js"],"sourcesContent":["const KeyCodes = {\n  SHIFT: 16,\n  TAB: 9,\n  ARROW_UP: 38,\n  ARROW_DOWN: 40,\n}\n\nconst Selectors = {\n  NOT_VISUALLY_HIDDEN: \":not(.is-visually-hidden)\",\n  FOCUSABLE_TAGS: [\"a\", \"button\", \"input\", \"object\", \"select\", \"textarea\", \"[tabindex]\"],\n  KEYBOARD_CLASS: \"using-keyboard\",\n}\n\nconst Events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n}\n\n/**\n * Creates a string of element selector patterns using common elements.\n * @param {String} container - The enclosing container's class, attribute, etc.\n * @return {String}\n */\nexport const getFocusableElements = container => {\n  const focusables = Selectors.FOCUSABLE_TAGS.map(\n    element => `${container} ${element}${Selectors.NOT_VISUALLY_HIDDEN}`\n  ).join(\", \")\n\n  return document.querySelectorAll(focusables)\n}\n\n/**\n * Utility methods for DOM traversal and focus trapping.\n * @module Utils\n */\nexport default class Utils {\n  constructor() {\n    // events\n    this._listenForKeyboard = this._listenForKeyboard.bind(this)\n    this._listenForClick = this._listenForClick.bind(this)\n    this._handleFocusTrapWithTab = this._handleFocusTrapWithTab.bind(this)\n    this._handleFocusTrapWithArrows = this._handleFocusTrapWithArrows.bind(this)\n\n    this._focusContainerSelector = \"\"\n    this._focusableChildren = []\n    this._focusableFirstChild = {}\n    this._focusableLastChild = {}\n    this._listeningForKeydown = false\n    this._trapFocusWithArrows = false\n  }\n\n  // public\n\n  /**\n   * Listens to the first and last elements matched from this.getFocusableElements()\n   * @param {String} container - The container's class, attribute, etc.\n   * @param {Object} options - Optional has hof options.\n   */\n  captureFocus(container, options) {\n    this._focusContainerSelector = container\n    this._focusableChildren = getFocusableElements(this._focusContainerSelector)\n    this._focusableFirstChild = this._focusableChildren[0]\n    this._focusableLastChild = this._focusableChildren[this._focusableChildren.length - 1]\n\n    if (options) {\n      if (options.useArrows) {\n        this._trapFocusWithArrows = options.useArrows || this._trapFocusWithArrows\n        document.addEventListener(Events.KEYDOWN, this._handleFocusTrapWithArrows)\n      }\n    } else {\n      document.addEventListener(Events.KEYDOWN, this._handleFocusTrapWithTab)\n    }\n  }\n\n  /**\n   * Stop trapping focus set in this.captureFocus()\n   */\n  releaseFocus() {\n    if (this._trapFocusWithArrows) {\n      document.removeEventListener(Events.KEYDOWN, this._handleFocusTrapWithArrows)\n      this._trapFocusWithArrows = false\n    } else {\n      document.removeEventListener(Events.KEYDOWN, this._handleFocusTrapWithTab)\n    }\n  }\n\n  /**\n   * Begin listening to _listenForKeyboard()\n   */\n  enableFocusOutline() {\n    document.addEventListener(Events.KEYDOWN, this._listenForKeyboard)\n  }\n\n  /**\n   * Completely disable focus outline utility.\n   */\n  disableFocusOutline() {\n    if (this._listeningForKeydown) {\n      document.removeEventListener(Events.KEYDOWN, this._listenForKeyboard)\n    } else {\n      document.removeEventListener(Events.CLICK, this._listenForClick)\n    }\n  }\n\n  // private\n\n  /**\n   * When a key is pressed, detect if it's tab or shift keys and enable\n   * focus outlines on currently focused element(s). Then, remove keydown listener\n   * and add click listener on _listenForClick().\n   * @param {Object} event - Event (keypress).\n   */\n  _listenForKeyboard(event) {\n    const tabKey = event.which === KeyCodes.TAB\n    const shiftKey = event.which === KeyCodes.SHIFT || event.shiftKey\n    const arrowUp = event.which === KeyCodes.ARROW_UP\n    const arrowDown = event.which === KeyCodes.ARROW_DOWN\n\n    if (tabKey || shiftKey || arrowUp || arrowDown) {\n      document.body.classList.add(Selectors.KEYBOARD_CLASS)\n      document.removeEventListener(Events.KEYDOWN, this._listenForKeyboard)\n      document.addEventListener(Events.CLICK, this._listenForClick)\n      this._listeningForKeydown = false\n    }\n  }\n\n  /**\n   * On click, remove Selectors.KEYBOARD_CLASS and re-add keydown listener.\n   * @param {Object} event - Event (keypress).\n   */\n  _listenForClick(event) {\n    document.body.classList.remove(Selectors.KEYBOARD_CLASS)\n    document.removeEventListener(Events.CLICK, this._listenForClick)\n    document.addEventListener(Events.KEYDOWN, this._listenForKeyboard)\n    this._listeningForKeydown = true\n  }\n\n  /**\n   * Handles focus on first or last child in a container, using tab and tab+shift keys.\n   * @param {Object} event - Event (keypress)\n   */\n  _handleFocusTrapWithTab(event) {\n    const containerElement = document.querySelector(this._focusContainerSelector)\n    const containerActive = document.activeElement === containerElement\n    const firstActive = document.activeElement === this._focusableFirstChild\n    const lastActive = document.activeElement === this._focusableLastChild\n    const tabKey = event.which === KeyCodes.TAB\n    const shiftKey = event.which === KeyCodes.SHIFT || event.shiftKey\n    const hasShift = shiftKey && tabKey\n    const noShift = !shiftKey && tabKey\n\n    if (shiftKey && tabKey && (firstActive || containerActive)) {\n      event.preventDefault()\n      this._focusableLastChild.focus()\n    } else if (!shiftKey && tabKey && lastActive) {\n      event.preventDefault()\n      this._focusableFirstChild.focus()\n    }\n  }\n\n  /**\n   * Handles focus on the first, last, next, or previous child in a container, using up and down arrow keys.\n   * @param {Object} event - Event (keypress)\n   */\n  _handleFocusTrapWithArrows(event) {\n    const firstActive = document.activeElement === this._focusableFirstChild\n    const lastActive = document.activeElement === this._focusableLastChild\n    const arrowUp = event.which === KeyCodes.ARROW_UP\n    const arrowDown = event.which === KeyCodes.ARROW_DOWN\n\n    if (arrowUp || arrowDown) {\n      event.preventDefault()\n\n      if (firstActive && arrowUp) {\n        this._focusableLastChild.focus()\n      } else if (lastActive && arrowDown) {\n        this._focusableFirstChild.focus()\n      } else if (arrowDown) {\n        this._focusNextChild()\n      } else if (arrowUp) {\n        this._focusLastChild()\n      }\n    }\n  }\n\n  /**\n   * Focus the next child in this._focusableChildren.\n   */\n  _focusNextChild() {\n    for (let i = 0; i < this._focusableChildren.length; i++) {\n      if (this._focusableChildren[i] === document.activeElement) {\n        this._focusableChildren[i + 1].focus()\n        break\n      }\n    }\n  }\n\n  /**\n   * Focus the previous child in this._focusableChildren.\n   */\n  _focusLastChild() {\n    for (let i = 0; i < this._focusableChildren.length; i++) {\n      if (this._focusableChildren[i] === document.activeElement) {\n        this._focusableChildren[i - 1].focus()\n        break\n      }\n    }\n  }\n}\n","import Utils, { getFocusableElements } from \"../utils\"\n\nconst KeyCodes = {\n  ESCAPE: 27,\n}\n\nconst Selectors = {\n  // unique\n  DATA_MODAL: \"data-modal\",\n  DATA_MODAL_ID: \"data-modal-id\",\n  DATA_MODAL_BUTTON: \"data-modal-button\",\n  // common\n  DATA_VISIBLE: \"data-visible\",\n  DATA_CLOSE: \"data-close\",\n  DATA_TARGET: \"data-target\",\n  DATA_PARENT: \"data-parent\",\n  // accessibility\n  ARIA_HIDDEN: \"aria-hidden\",\n  ARIA_MODAL: \"aria-modal\",\n  ROLE: \"role\",\n  TABINDEX: \"tabindex\",\n  // classes\n  NO_SCROLL: \"no-scroll\",\n}\n\nconst Events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n  RESIZE: \"resize\",\n}\n\nconst Messages = {\n  NO_TARGET_ERROR: `Could not find [data-target] attribute associated with a [data-modal-button] element.`,\n  NO_PARENT_ERROR: `Could not find [data-parent] attribute associated with a [data-modal] element.`,\n  NO_ID_ERROR: id =>\n    `Could not find [data-modal-id='${id}'] associated with a [data-modal] element.`,\n}\n\n/**\n * Modal component class.\n * @module Modal\n * @requires Utils\n */\nexport default class Modal extends Utils {\n  constructor() {\n    super()\n\n    this._iosMobile = /(iphone|ipod)/i.test(navigator.userAgent)\n\n    // events\n    this._render = this._render.bind(this)\n    this._handleClose = this._handleClose.bind(this)\n    this._handleOverlayClick = this._handleOverlayClick.bind(this)\n    this._handleEscapeKeyPress = this._handleEscapeKeyPress.bind(this)\n\n    // all modals\n    this._modals = []\n    this._modalButtons = []\n\n    // active modal\n    this._activeModalButton = {}\n    this._activeModalOverlay = {}\n    this._activeModal = {}\n    this._activeModalId = \"\"\n    this._activeModalOverlayAttr = \"\"\n    this._activeModalSelector = \"\"\n    this._activeModalCloseButtons = []\n\n    // attribute helpers\n    this._modalContainerAttr = `[${Selectors.DATA_MODAL}]`\n  }\n\n  // public\n\n  /**\n   * Add accessible attributes to modal containers\n   * Begin listening to elements with [data-modal-button]\n   */\n  start() {\n    this._modals = document.querySelectorAll(this._modalContainerAttr)\n    this._modalButtons = document.querySelectorAll(`[${Selectors.DATA_MODAL_BUTTON}]`)\n\n    getFocusableElements(this._modalContainerAttr).forEach(element => {\n      element.setAttribute(Selectors.TABINDEX, \"-1\")\n    })\n\n    if (this._modals.length) {\n      this._modals.forEach(modal => {\n        this._setupModal(modal)\n      })\n    }\n\n    if (this._modalButtons.length) {\n      this._modalButtons.forEach(button => {\n        button.addEventListener(Events.CLICK, this._render)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to modal buttons\n   */\n  stop() {\n    this._modalButtons.forEach(button => {\n      button.removeEventListener(Events.CLICK, this._render)\n    })\n  }\n\n  // private\n\n  /**\n   * Find a button through event.target, then render the corresponding modal attribute via matching target id\n   * @param {Object} event - The event object\n   */\n  _render(event) {\n    event.preventDefault()\n    this._activeModalButton = event.target\n\n    if (!this._activeModalButton.getAttribute(Selectors.DATA_TARGET)) {\n      return console.error(Messages.NO_TARGET_ERROR)\n    }\n\n    this._activeModalId = this._activeModalButton.getAttribute(Selectors.DATA_TARGET)\n    this._activeModalOverlayAttr = `[${Selectors.DATA_MODAL_ID}=\"${this._activeModalId}\"]`\n\n    if (!document.querySelector(this._activeModalOverlayAttr)) {\n      return console.error(Messages.NO_ID_ERROR(this._activeModalId))\n    }\n\n    this._activeModalOverlay = document.querySelector(this._activeModalOverlayAttr)\n\n    this._activeModalSelector = `${this._activeModalOverlayAttr} ${this._modalContainerAttr}`\n    this._activeModal = document.querySelector(this._activeModalSelector)\n    this._activeModalCloseButtons = document.querySelectorAll(\n      `${this._activeModalOverlayAttr} [${Selectors.DATA_CLOSE}]`\n    )\n\n    // allow focusable elements to be focused\n    getFocusableElements(this._activeModalSelector).forEach(element => {\n      element.setAttribute(Selectors.TABINDEX, \"0\")\n    })\n\n    // capture focus, stop scrolling, and toggle attributes for visibility\n    this._handleScrollStop()\n    this.captureFocus(this._activeModalSelector)\n    this._activeModalOverlay.setAttribute(Selectors.ARIA_HIDDEN, \"false\")\n    this._activeModalOverlay.setAttribute(Selectors.DATA_VISIBLE, \"true\")\n\n    // focus the modal\n    this._activeModal.setAttribute(Selectors.TABINDEX, \"-1\")\n    this._activeModal.focus()\n\n    // offset slight scroll caused by this._activeModal.focus()\n    this._activeModalOverlay.scrollTop = 0\n\n    // on ios devices, let the modal close on overlay click\n    if (this._iosMobile) {\n      this._activeModalOverlay.style.cursor = \"pointer\"\n    }\n\n    // begin listening to events\n    document.addEventListener(Events.KEYDOWN, this._handleEscapeKeyPress)\n    document.addEventListener(Events.CLICK, this._handleOverlayClick)\n    this._activeModalCloseButtons.forEach(button => {\n      button.addEventListener(Events.CLICK, this._handleClose)\n    })\n  }\n\n  _setupModal(modal) {\n    let modalId\n    if (!modal.getAttribute(Selectors.DATA_PARENT)) {\n      return console.error(Messages.NO_PARENT_ERROR)\n    } else {\n      modalId = modal.getAttribute(Selectors.DATA_PARENT)\n    }\n\n    let modalWrapper\n    if (!document.querySelector(`[${Selectors.DATA_MODAL_ID}='${modalId}']`)) {\n      return console.error(Messages.NO_ID_ERROR(modalId))\n    } else {\n      modalWrapper = document.querySelector(`[${Selectors.DATA_MODAL_ID}='${modalId}']`)\n    }\n\n    modalWrapper.setAttribute(Selectors.ARIA_HIDDEN, \"true\")\n    modalWrapper.setAttribute(Selectors.DATA_VISIBLE, \"false\")\n    modal.setAttribute(Selectors.ARIA_MODAL, \"true\")\n    modal.setAttribute(Selectors.ROLE, \"dialog\")\n  }\n\n  /**\n   * Turn off event listeners and reset focus to last selected DOM node (button)\n   * @param {Object} event - The event object\n   */\n  _handleClose(event) {\n    event.preventDefault()\n    this._activeModalOverlay.setAttribute(Selectors.DATA_VISIBLE, \"false\")\n    this._handleReturnFocus()\n    this._handleScrollRestore()\n    this.releaseFocus()\n    this._activeModalOverlay.setAttribute(Selectors.ARIA_HIDDEN, \"true\")\n    this._activeModal.removeAttribute(Selectors.TABINDEX)\n\n    getFocusableElements(this._activeModalSelector).forEach(element => {\n      element.setAttribute(Selectors.TABINDEX, \"-1\")\n    })\n\n    if (this._iosMobile) {\n      this._activeModalOverlay.style.cursor = \"auto\"\n    }\n\n    // stop listening to events\n    document.removeEventListener(Events.KEYDOWN, this._handleEscapeKeyPress)\n    document.removeEventListener(Events.CLICK, this._handleOverlayClick)\n    this._activeModalCloseButtons.forEach(button => {\n      button.removeEventListener(Events.CLICK, this._handleClose)\n    })\n  }\n\n  /**\n   * Handles click event on the modal background to close it.\n   * @param {Object} event - The event object\n   */\n  _handleOverlayClick(event) {\n    if (event.target === this._activeModalOverlay) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Handles escape key event to close the current modal\n   * @param {Object} event - The event object\n   */\n  _handleEscapeKeyPress(event) {\n    if (event.which === KeyCodes.ESCAPE) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Returns focus to the last focused element before the modal was called.\n   * @param {Object} button - The current modal's corresponding button.\n   */\n  _handleReturnFocus() {\n    this._activeModalButton.setAttribute(Selectors.TABINDEX, \"-1\")\n    this._activeModalButton.focus()\n    this._activeModalButton.removeAttribute(Selectors.TABINDEX)\n  }\n\n  /**\n   * Restores scroll behavior to <html> and <body>\n   */\n  _handleScrollRestore() {\n    document.body.classList.remove(Selectors.NO_SCROLL)\n    document.querySelector(\"html\").classList.remove(Selectors.NO_SCROLL)\n  }\n\n  /**\n   * Prevents scroll behavior on <html> and <body>\n   */\n  _handleScrollStop() {\n    document.body.classList.add(Selectors.NO_SCROLL)\n    document.querySelector(\"html\").classList.add(Selectors.NO_SCROLL)\n  }\n}\n","import Utils, { getFocusableElements } from \"../utils\"\n\nconst Selectors = {\n  // unique\n  DATA_ACCORDION: \"data-accordion\",\n  DATA_ACCORDION_ROW: \"data-accordion-row\",\n  // common\n  DATA_VISIBLE: \"data-visible\",\n  DATA_TARGET: \"data-target\",\n  DATA_TOGGLE_MULTIPLE: \"data-toggle-multiple\",\n  DATA_PARENT: \"data-parent\",\n  // accessibility\n  ARIA_EXPANDED: \"aria-expanded\",\n  ARIA_CONTROLS: \"aria-controls\",\n  ARIA_HIDDEN: \"aria-hidden\",\n  ARIA_LABELLEDBY: \"aria-labelledby\",\n  TABINDEX: \"tabindex\",\n}\n\nconst Events = {\n  CLICK: \"click\",\n  KEYDOWN: \"keydown\",\n}\n\nconst Messages = {\n  NO_VISIBLE_ERROR: id =>\n    `Could not find parent with [data-visible] attribute associated with [data-target='${id}'].`,\n  NO_ROW_ERROR: id => `Could not find [data-accordion-row] associated with ${id}.`,\n  NO_HEADER_ID_ERROR: id => `Could not find header tag associated with [data-target='${id}'].`,\n  NO_PARENT_ERROR: id => `Could not find [data-parent] associated with [data-target='${id}'].`,\n  NO_CONTENT_ERROR: id =>\n    `Could not find accordion content block with [id] ${id} associated with [data-target='${id}'].`,\n}\n\n/**\n * Accordion component class.\n * @module Accordion\n * @requires Utils\n */\nexport default class Accordion extends Utils {\n  constructor() {\n    super()\n\n    // events\n    this._render = this._render.bind(this)\n\n    // all accordions\n    this._accordionButtons = []\n    this._accordionContentsAttr = \"\"\n    this._accordionContents = []\n\n    // active accordion\n    this._activeContainer = {}\n    this._activeButton = {}\n    this._activeAccordionRowId = \"\"\n    this._activeRowAttr = \"\"\n    this._activeRow = \"\"\n    this._activeContainerId = \"\"\n    this._activeContainerAttr = \"\"\n    this._activeContent = {}\n    this._activeButtonExpandState = \"\"\n    this._activeContentHiddenState = \"\"\n\n    // other data\n    this._headerLevels = [1, 2, 3, 4, 5, 6]\n  }\n\n  // public\n\n  /**\n   * Sets up accordion components and listens to buttons for events.\n   * Begin listening to [data-accordion-button] elements\n   */\n  start() {\n    const accordionButtonSelector = this._getPossibleAccordionButtonAttrs(\n      `[${Selectors.DATA_ACCORDION}]`\n    )\n    this._accordionButtons = document.querySelectorAll(accordionButtonSelector)\n\n    if (this._accordionButtons.length) {\n      this._accordionButtons.forEach(button => {\n        this._setupAccordion(button)\n        button.addEventListener(Events.CLICK, this._render)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to accordion button events.\n   */\n  stop() {\n    this._accordionButtons.forEach(button => {\n      button.removeEventListener(Events.CLICK, this._render)\n    })\n  }\n\n  // private\n\n  /**\n   * Open accordion content associated with an accordion button.\n   * @param {Object} event - The event object\n   */\n  _render(event) {\n    event.preventDefault()\n\n    this._activeButton = event.target\n    this._activeAccordionRowId = this._activeButton.getAttribute(Selectors.DATA_TARGET)\n\n    this._activeRowAttr = this._getAccordionRowAttr(this._activeAccordionRowId)\n    this._activeRow = document.querySelector(this._activeRowAttr)\n\n    if (!this._activeButton.getAttribute(Selectors.DATA_PARENT)) {\n      return console.error(Messages.NO_PARENT_ERROR(this._activeAccordionRowId))\n    }\n\n    this._activeContainerId = this._activeButton.getAttribute(Selectors.DATA_PARENT)\n    this._activeContainerAttr = `[${Selectors.DATA_ACCORDION}='${this._activeContainerId}']`\n\n    if (!document.querySelector(this._activeContainerAttr)) {\n      return console.error(Messages.NO_ACCORDION_ERROR(this._activeContainerId))\n    }\n\n    this._activeContainer = document.querySelector(this._activeContainerAttr)\n    this._activeContent = document.getElementById(this._activeAccordionRowId)\n\n    const accordionButtonState = this._activeRow.getAttribute(Selectors.DATA_VISIBLE)\n\n    this._activeButtonExpandState = accordionButtonState === \"true\" ? \"false\" : \"true\"\n    this._activeContentHiddenState = this._activeButtonExpandState === \"false\" ? \"true\" : \"false\"\n\n    this._closeAllIfToggleable()\n    this._toggleSelectedAccordion()\n  }\n\n  /**\n   * Add initial attributes to accordion elements.\n   * @param {Element} button - A button element that triggers an accordion.\n   */\n  _setupAccordion(button) {\n    const buttonId = button.getAttribute(Selectors.DATA_TARGET)\n\n    if (!document.getElementById(buttonId)) {\n      return console.error(Messages.NO_CONTENT_ERROR(buttonId))\n    }\n\n    const buttonContent = document.getElementById(buttonId)\n    const accordionRowAttr = this._getAccordionRowAttr(buttonId)\n\n    if (!document.querySelector(accordionRowAttr)) {\n      return console.error(Messages.NO_ROW_ERROR(buttonId))\n    }\n\n    const accordionRow = document.querySelector(accordionRowAttr)\n    const buttonHeaderAttr = this._getPossibleAccordionHeaderAttrs(accordionRowAttr)\n    const buttonHeader = document.querySelectorAll(buttonHeaderAttr)[0]\n\n    if (!buttonHeader || !buttonHeader.id) {\n      console.error(Messages.NO_HEADER_ID_ERROR(buttonId))\n    }\n\n    const buttonContentChildren = getFocusableElements(`#${buttonContent.id}`)\n\n    button.setAttribute(Selectors.ARIA_CONTROLS, buttonId)\n    buttonContent.setAttribute(Selectors.ARIA_LABELLEDBY, buttonHeader.id)\n\n    if (!accordionRow.getAttribute(Selectors.DATA_VISIBLE)) {\n      return console.error(Messages.NO_VISIBLE_ERROR(buttonId))\n    }\n\n    const contentShouldExpand = accordionRow.getAttribute(Selectors.DATA_VISIBLE)\n    if (contentShouldExpand === \"true\") {\n      buttonContent.style.maxHeight = `${buttonContent.scrollHeight}px`\n      button.setAttribute(Selectors.ARIA_EXPANDED, \"true\")\n      buttonContent.setAttribute(Selectors.ARIA_HIDDEN, \"false\")\n      buttonContentChildren.forEach(element => {\n        element.setAttribute(Selectors.TABINDEX, \"0\")\n      })\n    } else {\n      button.setAttribute(Selectors.ARIA_EXPANDED, \"false\")\n      buttonContent.setAttribute(Selectors.ARIA_HIDDEN, \"true\")\n      buttonContentChildren.forEach(element => {\n        element.setAttribute(Selectors.TABINDEX, \"-1\")\n      })\n    }\n  }\n\n  /**\n   * Build a selector string to match possible accordion buttons\n   * @param {String} attr - A unique attribute\n   * @return {String} - String of possible button selectors\n   */\n  _getPossibleAccordionButtonAttrs(attr) {\n    return this._headerLevels\n      .map(\n        num => `${attr} > [${Selectors.DATA_ACCORDION_ROW}] > h${num} [${Selectors.DATA_TARGET}]`\n      )\n      .join(\", \")\n  }\n\n  /**\n   * Build a selector string to match possible accordion headers\n   * @param {String} attr - A unique attribute\n   * @return {String} - String of possible header selectors\n   */\n  _getPossibleAccordionHeaderAttrs(attr) {\n    return this._headerLevels.map(num => `${attr} > h${num}`).join(\", \")\n  }\n\n  /**\n   * Build a unique accordion row attribute selector.\n   * @param {String} id - An id value associated with a given Selectors.DATA_TARGET\n   * @return {String} - A unique accordion row selector\n   */\n  _getAccordionRowAttr(id) {\n    return `[${Selectors.DATA_ACCORDION_ROW}='${id}']`\n  }\n\n  /**\n   * If toggling multiple rows at once isn't enabled, close all rows except the selected one.\n   * This ensures the selected one can be closed if it's already open.\n   */\n  _closeAllIfToggleable() {\n    if (this._activeContainer.hasAttribute(Selectors.DATA_TOGGLE_MULTIPLE)) return\n\n    const allContentAttr = `${this._activeContainerAttr} [${Selectors.ARIA_HIDDEN}]`\n    const allRows = document.querySelectorAll(\n      `${this._activeContainerAttr} [${Selectors.DATA_VISIBLE}]`\n    )\n    const allContent = document.querySelectorAll(allContentAttr)\n\n    const accordionButtonSelector = this._getPossibleAccordionButtonAttrs(this._activeContainerAttr)\n    const allButtons = document.querySelectorAll(accordionButtonSelector)\n\n    allContent.forEach(content => {\n      if (content !== this._activeContent) content.style.maxHeight = null\n    })\n\n    getFocusableElements(allContentAttr).forEach(element => {\n      element.setAttribute(Selectors.TABINDEX, \"-1\")\n    })\n\n    this._toggleAttributeInCollection(allRows, Selectors.DATA_VISIBLE, \"true\", \"false\")\n    this._toggleAttributeInCollection(allButtons, Selectors.ARIA_EXPANDED, \"true\", \"false\")\n    this._toggleAttributeInCollection(allContent, Selectors.ARIA_HIDDEN, \"false\", \"true\")\n  }\n\n  /**\n   * Toggle the currently selected accordion button's content.\n   */\n  _toggleSelectedAccordion() {\n    this._activeRow.setAttribute(Selectors.DATA_VISIBLE, this._activeButtonExpandState)\n    this._activeButton.setAttribute(Selectors.ARIA_EXPANDED, this._activeButtonExpandState)\n    this._activeContent.setAttribute(Selectors.ARIA_HIDDEN, this._activeContentHiddenState)\n\n    const activeContentBlock = `#${this._activeAccordionRowId}`\n    getFocusableElements(activeContentBlock).forEach(element => {\n      const value = this._activeButtonExpandState === \"true\" ? \"0\" : \"-1\"\n      element.setAttribute(Selectors.TABINDEX, value)\n    })\n\n    if (this._activeContent.style.maxHeight) {\n      this._activeContent.style.maxHeight = null\n    } else {\n      this._activeContent.style.maxHeight = `${this._activeContent.scrollHeight}px`\n    }\n  }\n\n  /**\n   * Toggles a single attribute of a series of elements.\n   * @param {Array} elements - An array of elements to be operated on.\n   * @param {String} attributeName - An attribute to be changed.\n   * @param {String} currentValue - The current value of attributeName\n   * @param {String} newValue - The new value of attributeName\n   */\n  _toggleAttributeInCollection(elements, attributeName, currentValue, newValue) {\n    elements.forEach(element => {\n      if (element.hasAttribute(attributeName, currentValue)) {\n        element.setAttribute(attributeName, newValue)\n      }\n    })\n  }\n}\n","import Utils from \"../utils\"\n\nconst KeyCodes = {\n  TAB: 9,\n  SHIFT: 16,\n  ESCAPE: 27,\n  ARROW_UP: 38,\n  ARROW_DOWN: 40,\n}\n\nconst Selectors = {\n  // unique\n  DATA_DROPDOWN: \"data-dropdown\",\n  // common\n  DATA_TARGET: \"data-target\",\n  DATA_PARENT: \"data-parent\",\n  DATA_VISIBLE: \"data-visible\",\n  // accessibility\n  TABINDEX: \"tabindex\",\n  ARIA_HASPOPUP: \"aria-haspopup\",\n  ARIA_CONTROLS: \"aria-controls\",\n  ARIA_LABELLEDBY: \"aria-labelledby\",\n  ARIA_EXPANDED: \"aria-expanded\",\n  ROLE: \"role\",\n}\n\nconst Events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n}\n\nconst Messages = {\n  NO_PARENT_ERROR: `Could not find dropdown button's [data-parent] attribute.`,\n  NO_DROPDOWN_ERROR: attr => `Could not find dropdown container associated with ${attr}.`,\n  NO_MENU_ERROR: attr => `Could not find menu associated with ${attr}.`,\n}\n\n/**\n * Dropdown component class.\n * @module Dropdown\n * @requires Utils\n */\nexport default class Dropdown extends Utils {\n  constructor() {\n    super()\n\n    this._iosMobile = /(iphone|ipod)/i.test(navigator.userAgent)\n\n    // events\n    this._render = this._render.bind(this)\n    this._handleFirstTabClose = this._handleFirstTabClose.bind(this)\n    this._handleLastTabClose = this._handleLastTabClose.bind(this)\n    this._renderWithKeys = this._renderWithKeys.bind(this)\n    this._handleClose = this._handleClose.bind(this)\n    this._handleEscapeKeyPress = this._handleEscapeKeyPress.bind(this)\n    this._handleOffMenuClick = this._handleOffMenuClick.bind(this)\n\n    // active dropdown\n    this._activeDropdownButton = null\n    this._activeDropdown = null\n    this._activeDropdownMenu = null\n    this._activeDropdownLinks = []\n    this._allowFocusReturn = true\n    this._activeDropdownId = \"\"\n    this._activeDropdownAttr = \"\"\n    this._activeDropdownMenuId = \"\"\n\n    // all dropdowns\n    this._dropdownButtons = []\n    this._dropdowns = []\n\n    // dropdown element selectors\n    this._dropdownContainerAttr = `[${Selectors.DATA_DROPDOWN}]`\n    this._dropdownTargetAttr = `[${Selectors.DATA_TARGET}]`\n  }\n\n  // public\n\n  /**\n   * Find and set up dropdown buttons and menus.\n   * Begin listening to dropdowns for events.\n   */\n  start() {\n    this._dropdowns = document.querySelectorAll(`${this._dropdownContainerAttr}`)\n    this._dropdownButtons = document.querySelectorAll(\n      `${this._dropdownContainerAttr} > ${this._dropdownTargetAttr}`\n    )\n\n    if (this._dropdowns.length) {\n      this._dropdowns.forEach(dropdown => this._setupDropdown(dropdown))\n    }\n\n    this._dropdownButtons.forEach(button => {\n      button.addEventListener(Events.CLICK, this._render)\n      button.addEventListener(Events.KEYDOWN, this._renderWithKeys)\n    })\n  }\n\n  /**\n   * Stop listening for dropdown events.\n   */\n  stop() {\n    this._dropdownButtons.forEach(button => {\n      button.removeEventListener(Events.CLICK, this._render)\n      button.removeEventListener(Events.KEYDOWN, this._renderWithKeys)\n    })\n  }\n\n  // private\n\n  /**\n   * Find a button through event.target, then render the corresponding modal attribute via matching target id\n   * @param {Object} event - The event object\n   * @param {Number} key - The key code that called _render()\n   */\n  _render(event, key) {\n    event.preventDefault()\n    event.stopPropagation()\n\n    if (this._activeDropdownButton) {\n      this._allowFocusReturn = false\n      this._handleClose(event)\n      this._allowFocusReturn = true\n    }\n\n    // dropdown button / trigger\n    this._activeDropdownButton = event.target\n\n    if (!this._activeDropdownButton.getAttribute(Selectors.DATA_PARENT)) {\n      return console.error(Messages.NO_PARENT_ERROR)\n    }\n\n    this._activeDropdownId = this._activeDropdownButton.getAttribute(Selectors.DATA_PARENT)\n\n    // dropdown container\n    this._activeDropdownAttr = `[${Selectors.DATA_DROPDOWN}=\"${this._activeDropdownId}\"]`\n\n    if (!document.querySelector(this._activeDropdownAttr)) {\n      return console.error(Messages.NO_DROPDOWN_ERROR(this._activeDropdownAttr))\n    }\n\n    this._activeDropdown = document.querySelector(this._activeDropdownAttr)\n\n    // dropdown menu\n    this._activeDropdownMenuId = this._activeDropdownButton.getAttribute(Selectors.DATA_TARGET)\n    this._activeDropdownMenu = document.getElementById(this._activeDropdownMenuId)\n\n    // toggle attributes on dropdown button, indicating a visible dropdown is present\n    this._activeDropdownButton.setAttribute(Selectors.ARIA_EXPANDED, \"true\")\n    this._activeDropdown.setAttribute(Selectors.DATA_VISIBLE, \"true\")\n\n    // trade button event listener to close the menu, instead of open it\n    this._activeDropdownButton.removeEventListener(Events.CLICK, this._render)\n    this._activeDropdownButton.addEventListener(Events.CLICK, this._handleClose)\n\n    document.addEventListener(Events.KEYDOWN, this._handleEscapeKeyPress)\n    document.addEventListener(Events.CLICK, this._handleOffMenuClick)\n\n    // make click events work on mobile iOS\n    if (this._iosMobile) {\n      document.body.style.cursor = \"pointer\"\n    }\n\n    this._activeDropdownLinks = this._getDropdownLinks(this._activeDropdownAttr)\n\n    this.firstDropdownLink = this._activeDropdownLinks[0]\n    this.lastDropdownLink = this._activeDropdownLinks[this._activeDropdownLinks.length - 1]\n\n    this.firstDropdownLink.addEventListener(Events.KEYDOWN, this._handleFirstTabClose)\n    this.lastDropdownLink.addEventListener(Events.KEYDOWN, this._handleLastTabClose)\n\n    if (key && key === KeyCodes.ARROW_UP) {\n      this.lastDropdownLink.focus()\n    } else {\n      this.firstDropdownLink.focus()\n    }\n\n    this._activeDropdownLinks.forEach(link => {\n      link.setAttribute(Selectors.TABINDEX, \"0\")\n      link.addEventListener(Events.CLICK, this._handleClose)\n    })\n\n    this.captureFocus(`${this._activeDropdownAttr} > ul`, { useArrows: true })\n  }\n\n  /**\n   * Closes the dropdown if user uses shift and tab keys on the first dropdown element.\n   * @param {Object} event - The event object\n   */\n  _handleFirstTabClose(event) {\n    const shiftKey = event.which === KeyCodes.SHIFT || event.shiftKey\n    const tabKey = event.which === KeyCodes.TAB\n\n    if (shiftKey && tabKey) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Closes the dropdown if user uses tab key on the last dropdown element.\n   * @param {Object} event - The event object\n   */\n  _handleLastTabClose(event) {\n    const shiftKey = event.which === KeyCodes.SHIFT || event.shiftKey\n    const tabKey = event.which === KeyCodes.TAB\n\n    if (tabKey && !shiftKey) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Renders dropdown if the user uses arrow up or down.\n   * @param {Object} event - The event object\n   */\n  _renderWithKeys(event) {\n    if (event.which === KeyCodes.ARROW_UP || event.which === KeyCodes.ARROW_DOWN) {\n      this._render(event, event.which)\n    }\n  }\n\n  /**\n   * Closes currently open dropdown.\n   * @param {Object} event - The event object\n   */\n  _handleClose(event) {\n    event.preventDefault()\n\n    this.releaseFocus()\n\n    this._activeDropdownButton.setAttribute(Selectors.ARIA_EXPANDED, \"false\")\n    this._activeDropdown.setAttribute(Selectors.DATA_VISIBLE, \"false\")\n\n    this._activeDropdownLinks.forEach(link => {\n      link.setAttribute(Selectors.TABINDEX, \"-1\")\n      link.removeEventListener(Events.CLICK, this._handleClose)\n    })\n\n    this._activeDropdownButton.removeEventListener(Events.CLICK, this._handleClose)\n    this._activeDropdownButton.addEventListener(Events.CLICK, this._render)\n\n    document.removeEventListener(Events.KEYDOWN, this._handleEscapeKeyPress)\n\n    if (this._iosMobile) {\n      document.body.style.cursor = \"auto\"\n    }\n\n    document.removeEventListener(Events.CLICK, this._handleOffMenuClick)\n\n    if (this._allowFocusReturn) {\n      this._handleReturnFocus()\n    }\n\n    this._activeDropdownButton = null\n  }\n\n  /**\n   * Use escape key to close dropdown.\n   * @param {Object} event - The event object\n   */\n  _handleEscapeKeyPress(event) {\n    if (event.which === KeyCodes.ESCAPE) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Closes dropdown\n   * @param {Object} event - The event object\n   */\n  _handleOffMenuClick(event) {\n    if (event.target !== this._activeDropdownButton && event.target !== this._activeDropdownMenu) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Puts focus on a the active dropdown button.\n   */\n  _handleReturnFocus() {\n    this._activeDropdownButton.setAttribute(Selectors.TAB_INDEX, \"-1\")\n    this._activeDropdownButton.focus()\n    this._activeDropdownButton.removeAttribute(Selectors.TAB_INDEX)\n  }\n\n  /**\n   * Retrieve possible menu links or buttons as an array\n   * @param {String} attr - The unique attribute for a dropdown.\n   * @return {String} - Selector for possible menu item links.\n   */\n  _getDropdownLinks(attr) {\n    return document.querySelectorAll(`${attr} > ul > li > a, ${attr} > ul > li > button`)\n  }\n\n  /**\n   * Add starting attributes to a dropdown.\n   * @param {Element} dropdown - A dropdown element.\n   */\n  _setupDropdown(dropdown) {\n    const dropdownId = dropdown.getAttribute(Selectors.DATA_DROPDOWN)\n    const dropdownIdAttr = `[${Selectors.DATA_DROPDOWN}=\"${dropdownId}\"]`\n    const dropdownMenuItemsAttr = `${dropdownIdAttr} > ul > li`\n\n    if (!document.querySelector(`${dropdownIdAttr} > ul`)) {\n      return console.error(Messages.NO_MENU_ERROR(dropdownIdAttr))\n    }\n\n    const dropdownMenu = document.querySelector(`${dropdownIdAttr} > ul`)\n    const dropdownButton = document.querySelector(`${dropdownIdAttr} > ${this._dropdownTargetAttr}`)\n\n    dropdownButton.setAttribute(Selectors.ARIA_CONTROLS, dropdownMenu.id)\n    dropdownButton.setAttribute(Selectors.ARIA_HASPOPUP, \"true\")\n    dropdownButton.setAttribute(Selectors.ARIA_EXPANDED, \"false\")\n    dropdownMenu.setAttribute(Selectors.ARIA_LABELLEDBY, dropdownButton.id)\n\n    const dropdownMenuItems = document.querySelectorAll(dropdownMenuItemsAttr)\n    dropdownMenuItems.forEach(item => item.setAttribute(Selectors.ROLE, \"none\"))\n\n    this._getDropdownLinks(dropdownIdAttr).forEach(link => {\n      link.setAttribute(Selectors.ROLE, \"menuitem\")\n      link.setAttribute(Selectors.TABINDEX, \"-1\")\n    })\n  }\n}\n","import _Modals from \"./components/modal\"\nimport _Accordion from \"./components/accordion\"\nimport _Dropdown from \"./components/dropdown\"\nimport _Utils from \"./utils\"\n\nexport const Modals = new _Modals()\nexport const Accordions = new _Accordion()\nexport const Dropdowns = new _Dropdown()\nexport const Utils = new _Utils()\n\nconst Undernet = {\n  // Components\n  Modals,\n  Accordions,\n  Dropdowns,\n\n  // Utils\n  Utils,\n}\n\nUndernet.start = () => {\n  // Components\n  Undernet.Modals.start()\n  Undernet.Accordions.start()\n  Undernet.Dropdowns.start()\n\n  // Utils\n  Undernet.Utils.enableFocusOutline()\n}\n\nUndernet.stop = () => {\n  // Components\n  Undernet.Modals.stop()\n  Undernet.Accordions.stop()\n  Undernet.Dropdowns.stop()\n\n  // Utils\n  Undernet.Utils.disableFocusOutline()\n}\n\nexport default Undernet\n","import Undernet from \"./index\"\n\nexport default Undernet\nexport { Modals, Accordions, Dropdowns, Utils } from \"./index\"\n\nwindow.Undernet = Undernet\n"],"names":["KeyCodes","Selectors","NOT_VISUALLY_HIDDEN","FOCUSABLE_TAGS","KEYBOARD_CLASS","Events","getFocusableElements","container","focusables","map","element","join","document","querySelectorAll","Utils","_listenForKeyboard","this","bind","_listenForClick","_handleFocusTrapWithTab","_handleFocusTrapWithArrows","_focusContainerSelector","_focusableChildren","_focusableFirstChild","_focusableLastChild","_listeningForKeydown","_trapFocusWithArrows","options","length","useArrows","addEventListener","removeEventListener","event","tabKey","which","shiftKey","arrowUp","arrowDown","body","classList","add","remove","containerElement","querySelector","containerActive","activeElement","firstActive","lastActive","preventDefault","focus","_focusNextChild","_focusLastChild","i","Messages","id","Modal","_iosMobile","test","navigator","userAgent","_render","_this","_handleClose","_handleOverlayClick","_handleEscapeKeyPress","_modals","_modalButtons","_activeModalButton","_activeModalOverlay","_activeModal","_activeModalId","_activeModalOverlayAttr","_activeModalSelector","_activeModalCloseButtons","_modalContainerAttr","forEach","setAttribute","modal","_this2","_setupModal","button","_this3","target","getAttribute","_handleScrollStop","captureFocus","scrollTop","style","cursor","_this4","console","error","modalId","modalWrapper","_handleReturnFocus","_handleScrollRestore","releaseFocus","removeAttribute","_this5","NO_VISIBLE_ERROR","NO_ROW_ERROR","NO_HEADER_ID_ERROR","NO_PARENT_ERROR","NO_CONTENT_ERROR","Accordion","_accordionButtons","_accordionContentsAttr","_accordionContents","_activeContainer","_activeButton","_activeAccordionRowId","_activeRowAttr","_activeRow","_activeContainerId","_activeContainerAttr","_activeContent","_activeButtonExpandState","_activeContentHiddenState","_headerLevels","accordionButtonSelector","_getPossibleAccordionButtonAttrs","_setupAccordion","_getAccordionRowAttr","NO_ACCORDION_ERROR","getElementById","accordionButtonState","_closeAllIfToggleable","_toggleSelectedAccordion","buttonId","buttonContent","accordionRowAttr","accordionRow","buttonHeaderAttr","_getPossibleAccordionHeaderAttrs","buttonHeader","buttonContentChildren","maxHeight","scrollHeight","attr","num","hasAttribute","allContentAttr","allRows","allContent","allButtons","content","_toggleAttributeInCollection","activeContentBlock","value","elements","attributeName","currentValue","newValue","DATA_DROPDOWN","DATA_TARGET","DATA_PARENT","DATA_VISIBLE","TABINDEX","ARIA_HASPOPUP","ARIA_CONTROLS","ARIA_LABELLEDBY","ARIA_EXPANDED","ROLE","Dropdown","_handleFirstTabClose","_handleLastTabClose","_renderWithKeys","_handleOffMenuClick","_activeDropdownButton","_activeDropdown","_activeDropdownMenu","_activeDropdownLinks","_allowFocusReturn","_activeDropdownId","_activeDropdownAttr","_activeDropdownMenuId","_dropdownButtons","_dropdowns","_dropdownContainerAttr","_dropdownTargetAttr","dropdown","_setupDropdown","key","stopPropagation","_getDropdownLinks","firstDropdownLink","lastDropdownLink","link","TAB_INDEX","dropdownId","dropdownIdAttr","dropdownMenuItemsAttr","dropdownMenu","dropdownButton","item","Modals","_Modals","Accordions","_Accordion","Dropdowns","_Dropdown","_Utils","Undernet","start","enableFocusOutline","stop","disableFocusOutline","window"],"mappings":"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"}