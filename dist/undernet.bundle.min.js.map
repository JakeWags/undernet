{"version":3,"file":"undernet.bundle.min.js","sources":["../js/src/utils.js","../js/src/components/modal.js","../js/src/components/accordion.js","../js/src/components/dropdown.js","../js/src/index.js","../js/src/index.bundle.js"],"sourcesContent":["\"use strict\"\n\nconst KeyCodes = {\n  SHIFT: 16,\n  TAB: 9,\n  ARROW_UP: 38,\n  ARROW_DOWN: 40,\n}\n\nconst Selectors = {\n  NOT_VISUALLY_HIDDEN: \":not(.is-visually-hidden)\",\n  FOCUSABLE_TAGS: [\"a\", \"button\", \"input\", \"object\", \"select\", \"textarea\", \"[tabindex]\"],\n  KEYBOARD_CLASS: \"using-keyboard\",\n}\n\nconst Events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n}\n\n/**\n * Utility methods for DOM traversal and focus trapping.\n * @module Utils\n */\nexport default class Utils {\n  #focusContainerSelector = \"\"\n  #focusableChildren = []\n  #focusableFirstChild = {}\n  #focusableLastChild = {}\n  #listeningForKeydown = false\n  #trapFocusWithArrows = false\n\n  // public\n\n  /**\n   * Listens to the first and last elements matched from this.getFocusableElements()\n   * @param {String} container - The container's class, attribute, etc.\n   * @param {Object} options - Optional has hof options.\n   */\n  captureFocus(container, options) {\n    this.#focusContainerSelector = container\n    this.#focusableChildren = this.getFocusableElements(this.#focusContainerSelector)\n    this.#focusableFirstChild = this.#focusableChildren[0]\n    this.#focusableLastChild = this.#focusableChildren[this.#focusableChildren.length - 1]\n\n    if (options) {\n      if (options.useArrows) {\n        this.#trapFocusWithArrows = options.useArrows || this.#trapFocusWithArrows\n        document.addEventListener(Events.KEYDOWN, this.#handleFocusTrapWithArrows)\n      }\n    } else {\n      document.addEventListener(Events.KEYDOWN, this.#handleFocusTrapWithTab)\n    }\n  }\n\n  /**\n   * Stop trapping focus set in this.captureFocus()\n   */\n  releaseFocus() {\n    if (this.#trapFocusWithArrows) {\n      document.removeEventListener(Events.KEYDOWN, this.#handleFocusTrapWithArrows)\n      this.#trapFocusWithArrows = false\n    } else {\n      document.removeEventListener(Events.KEYDOWN, this.#handleFocusTrapWithTab)\n    }\n  }\n\n  /**\n   * Begin listening to #listenForKeyboard()\n   */\n  enableFocusOutline() {\n    document.addEventListener(Events.KEYDOWN, this.#listenForKeyboard)\n  }\n\n  /**\n   * Completely disable focus outline utility.\n   */\n  disableFocusOutline() {\n    if (this.#listeningForKeydown) {\n      document.removeEventListener(Events.KEYDOWN, this.#listenForKeyboard)\n    } else {\n      document.removeEventListener(Events.CLICK, this.#listenForClick)\n    }\n  }\n\n  /**\n   * Because IE does not recognize NodeList.forEach(),\n   * we use a cross-browser solution for returning an array of DOM nodes every time.\n   * @param {String} element - A DOM node's class, attribute, etc., to search the document.\n   * @return {Array}\n   */\n  getElements(element) {\n    const nodeList = document.querySelectorAll(element)\n    return Array.apply(null, nodeList)\n  }\n\n  /**\n   * Creates a string of element selector patterns using common elements.\n   * @param {String} container - The enclosing container's class, attribute, etc.\n   * @return {String}\n   */\n  getFocusableElements(container) {\n    const focusables = Selectors.FOCUSABLE_TAGS.map(element => {\n      return `${container} ${element}${Selectors.NOT_VISUALLY_HIDDEN}`\n    })\n\n    return this.getElements(focusables.join(\", \"))\n  }\n\n  // private\n\n  /**\n   * When a key is pressed, detect if it's tab or shift keys and enable\n   * focus outlines on currently focused element(s). Then, remove keydown listener\n   * and add click listener on #listenForClick().\n   * @param {Object} event - Event (keypress).\n   */\n  #listenForKeyboard = event => {\n    const tabKey = event.which === KeyCodes.TAB\n    const shiftKey = event.which === KeyCodes.SHIFT || event.shiftKey\n    const arrowUp = event.which === KeyCodes.ARROW_UP\n    const arrowDown = event.which === KeyCodes.ARROW_DOWN\n\n    if (tabKey || shiftKey || arrowUp || arrowDown) {\n      document.body.classList.add(Selectors.KEYBOARD_CLASS)\n      document.removeEventListener(Events.KEYDOWN, this.#listenForKeyboard)\n      document.addEventListener(Events.CLICK, this.#listenForClick)\n      this.#listeningForKeydown = false\n    }\n  }\n\n  /**\n   * On click, remove Selectors.KEYBOARD_CLASS and re-add keydown listener.\n   * @param {Object} event - Event (keypress).\n   */\n  #listenForClick = event => {\n    document.body.classList.remove(Selectors.KEYBOARD_CLASS)\n    document.removeEventListener(Events.CLICK, this.#listenForClick)\n    document.addEventListener(Events.KEYDOWN, this.#listenForKeyboard)\n    this.#listeningForKeydown = true\n  }\n\n  /**\n   * Handles focus on first or last child in a container, using tab and tab+shift keys.\n   * @param {Object} event - Event (keypress)\n   */\n  #handleFocusTrapWithTab = event => {\n    const containerElement = document.querySelector(this.#focusContainerSelector)\n    const containerActive = document.activeElement === containerElement\n    const firstActive = document.activeElement === this.#focusableFirstChild\n    const lastActive = document.activeElement === this.#focusableLastChild\n    const tabKey = event.which === KeyCodes.TAB\n    const shiftKey = event.which === KeyCodes.SHIFT || event.shiftKey\n    const hasShift = shiftKey && tabKey\n    const noShift = !shiftKey && tabKey\n\n    if (shiftKey && tabKey && (firstActive || containerActive)) {\n      event.preventDefault()\n      this.#focusableLastChild.focus()\n    } else if (!shiftKey && tabKey && lastActive) {\n      event.preventDefault()\n      this.#focusableFirstChild.focus()\n    }\n  }\n\n  /**\n   * Handles focus on the first, last, next, or previous child in a container, using up and down arrow keys.\n   * @param {Object} event - Event (keypress)\n   */\n  #handleFocusTrapWithArrows = event => {\n    const firstActive = document.activeElement === this.#focusableFirstChild\n    const lastActive = document.activeElement === this.#focusableLastChild\n    const arrowUp = event.which === KeyCodes.ARROW_UP\n    const arrowDown = event.which === KeyCodes.ARROW_DOWN\n\n    if (arrowUp || arrowDown) {\n      event.preventDefault()\n\n      if (firstActive && arrowUp) {\n        this.#focusableLastChild.focus()\n      } else if (lastActive && arrowDown) {\n        this.#focusableFirstChild.focus()\n      } else if (arrowDown) {\n        this.#focusNextChild()\n      } else if (arrowUp) {\n        this.#focusLastChild()\n      }\n    }\n  }\n\n  /**\n   * Focus the next child in this.#focusableChildren.\n   */\n  #focusNextChild() {\n    for (let i = 0; i < this.#focusableChildren.length; i++) {\n      if (this.#focusableChildren[i] === document.activeElement) {\n        this.#focusableChildren[i + 1].focus()\n        break\n      }\n    }\n  }\n\n  /**\n   * Focus the previous child in this.#focusableChildren.\n   */\n  #focusLastChild() {\n    for (let i = 0; i < this.#focusableChildren.length; i++) {\n      if (this.#focusableChildren[i] === document.activeElement) {\n        this.#focusableChildren[i - 1].focus()\n        break\n      }\n    }\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst KeyCodes = {\n  ESCAPE: 27,\n}\n\nconst Selectors = {\n  // unique\n  DATA_MODAL: \"data-modal\",\n  DATA_MODAL_ID: \"data-modal-id\",\n  DATA_MODAL_BUTTON: \"data-modal-button\",\n  // common\n  DATA_VISIBLE: \"data-visible\",\n  DATA_CLOSE: \"data-close\",\n  DATA_TARGET: \"data-target\",\n  DATA_PARENT: \"data-parent\",\n  // accessibility\n  ARIA_HIDDEN: \"aria-hidden\",\n  ARIA_MODAL: \"aria-modal\",\n  ROLE: \"role\",\n  TABINDEX: \"tabindex\",\n  // classes\n  NO_SCROLL: \"no-scroll\",\n}\n\nconst Events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n  RESIZE: \"resize\",\n}\n\nconst Messages = {\n  NO_TARGET_ERROR: `Could not find [data-target] attribute associated with a [data-modal-button] element.`,\n  NO_PARENT_ERROR: `Could not find [data-parent] attribute associated with a [data-modal] element.`,\n  NO_ID_ERROR: id =>\n    `Could not find [data-modal-id='${id}'] associated with a [data-modal] element.`,\n}\n\n/**\n * Modal component class.\n * @module Modal\n * @requires Utils\n */\nexport default class Modal extends Utils {\n  constructor() {\n    super()\n  }\n\n  // all modals\n  #modals = []\n  #modalButtons = []\n\n  // active modal\n  #activeModalButton = {}\n  #activeModalOverlay = {}\n  #activeModal = {}\n  #activeModalId = \"\"\n  #activeModalOverlayAttr = \"\"\n  #activeModalSelector = \"\"\n  #activeModalCloseButtons = []\n\n  // attribute helpers\n  #modalContainerAttr = `[${Selectors.DATA_MODAL}]`\n\n  // public\n\n  /**\n   * Add accessible attributes to modal containers\n   * Begin listening to elements with [data-modal-button]\n   */\n  start() {\n    this.#modals = this.getElements(this.#modalContainerAttr)\n    this.#modalButtons = this.getElements(`[${Selectors.DATA_MODAL_BUTTON}]`)\n\n    this.getFocusableElements(this.#modalContainerAttr).forEach(element => {\n      element.setAttribute(Selectors.TABINDEX, \"-1\")\n    })\n\n    if (this.#modals.length) {\n      this.#modals.forEach(modal => {\n        this.#setupModal(modal)\n      })\n    }\n\n    if (this.#modalButtons.length) {\n      this.#modalButtons.forEach(button => {\n        button.addEventListener(Events.CLICK, this.#render)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to modal buttons\n   */\n  stop() {\n    this.#modalButtons.forEach(button => {\n      button.removeEventListener(Events.CLICK, this.#render)\n    })\n  }\n\n  // private\n\n  /**\n   * Find a button through event.target, then render the corresponding modal attribute via matching target id\n   * @param {Object} event - The event object\n   */\n  #render = event => {\n    event.preventDefault()\n    this.#activeModalButton = event.target\n\n    if (!this.#activeModalButton.getAttribute(Selectors.DATA_TARGET)) {\n      return console.error(Messages.NO_TARGET_ERROR)\n    }\n\n    this.#activeModalId = this.#activeModalButton.getAttribute(Selectors.DATA_TARGET)\n    this.#activeModalOverlayAttr = `[${Selectors.DATA_MODAL_ID}=\"${this.#activeModalId}\"]`\n\n    if (!document.querySelector(this.#activeModalOverlayAttr)) {\n      return console.error(Messages.NO_ID_ERROR(this.#activeModalId))\n    }\n\n    this.#activeModalOverlay = document.querySelector(this.#activeModalOverlayAttr)\n\n    this.#activeModalSelector = `${this.#activeModalOverlayAttr} ${this.#modalContainerAttr}`\n    this.#activeModal = document.querySelector(this.#activeModalSelector)\n    this.#activeModalCloseButtons = this.getElements(\n      `${this.#activeModalOverlayAttr} [${Selectors.DATA_CLOSE}]`,\n    )\n\n    this.getFocusableElements(this.#activeModalSelector).forEach(element => {\n      element.setAttribute(Selectors.TABINDEX, \"0\")\n    })\n\n    this.#handleScrollStop()\n    this.captureFocus(this.#activeModalSelector)\n    this.#activeModalOverlay.setAttribute(Selectors.ARIA_HIDDEN, \"false\")\n    this.#activeModal.setAttribute(Selectors.TABINDEX, \"-1\")\n    this.#activeModalOverlay.setAttribute(Selectors.DATA_VISIBLE, \"true\")\n    this.#activeModal.focus()\n\n    // offset slight scroll caused by this.#activeModal.focus()\n    this.#activeModalOverlay.scrollTop = 0\n\n    // begin listening to events\n    document.addEventListener(Events.KEYDOWN, this.#handleEscapeKeyPress)\n    document.addEventListener(Events.CLICK, this.#handleOverlayClick)\n    this.#activeModalCloseButtons.forEach(button => {\n      button.addEventListener(Events.CLICK, this.#handleClose)\n    })\n  }\n\n  #setupModal(modal) {\n    let modalId\n    if (!modal.getAttribute(Selectors.DATA_PARENT)) {\n      return console.error(Messages.NO_PARENT_ERROR)\n    } else {\n      modalId = modal.getAttribute(Selectors.DATA_PARENT)\n    }\n\n    let modalWrapper\n    if (!document.querySelector(`[${Selectors.DATA_MODAL_ID}='${modalId}']`)) {\n      return console.error(Messages.NO_ID_ERROR(modalId))\n    } else {\n      modalWrapper = document.querySelector(`[${Selectors.DATA_MODAL_ID}='${modalId}']`)\n    }\n\n    modalWrapper.setAttribute(Selectors.ARIA_HIDDEN, \"true\")\n    modalWrapper.setAttribute(Selectors.DATA_VISIBLE, \"false\")\n    modal.setAttribute(Selectors.ARIA_MODAL, \"true\")\n    modal.setAttribute(Selectors.ROLE, \"dialog\")\n  }\n\n  /**\n   * Turn off event listeners and reset focus to last selected DOM node (button)\n   * @param {Object} event - Event (keydown or click)\n   */\n  #handleClose = event => {\n    event.preventDefault()\n    this.#activeModalOverlay.setAttribute(Selectors.DATA_VISIBLE, \"false\")\n    this.#handleReturnFocus()\n    this.#handleScrollRestore()\n    this.releaseFocus()\n    this.#activeModalOverlay.setAttribute(Selectors.ARIA_HIDDEN, \"true\")\n    this.#activeModal.removeAttribute(Selectors.TABINDEX)\n\n    this.getFocusableElements(this.#activeModalSelector).forEach(element => {\n      element.setAttribute(Selectors.TABINDEX, \"-1\")\n    })\n\n    // stop listening to events\n    document.removeEventListener(Events.KEYDOWN, this.#handleEscapeKeyPress)\n    document.removeEventListener(Events.CLICK, this.#handleOverlayClick)\n    this.#activeModalCloseButtons.forEach(button => {\n      button.removeEventListener(Events.CLICK, this.#handleClose)\n    })\n  }\n\n  /**\n   * Handles click event on the modal background to close it.\n   * @param {Object} event - Event (keydown)\n   */\n  #handleOverlayClick = event => {\n    if (event.target === this.#activeModalOverlay) {\n      this.#handleClose(event)\n    }\n  }\n\n  /**\n   * Handles escape key event to close the current modal\n   * @param {Object} event - Event (keydown)\n   */\n  #handleEscapeKeyPress = event => {\n    if (event.which === KeyCodes.ESCAPE) {\n      this.#handleClose(event)\n    }\n  }\n\n  /**\n   * Returns focus to the last focused element before the modal was called.\n   * @param {Object} button - The current modal's corresponding button.\n   */\n  #handleReturnFocus() {\n    this.#activeModalButton.setAttribute(Selectors.TABINDEX, \"-1\")\n    this.#activeModalButton.focus()\n    this.#activeModalButton.removeAttribute(Selectors.TABINDEX)\n  }\n\n  /**\n   * Restores scroll behavior to <html> and <body>\n   */\n  #handleScrollRestore() {\n    document.body.classList.remove(Selectors.NO_SCROLL)\n    document.querySelector(\"html\").classList.remove(Selectors.NO_SCROLL)\n  }\n\n  /**\n   * Prevents scroll behavior on <html> and <body>\n   */\n  #handleScrollStop() {\n    document.body.classList.add(Selectors.NO_SCROLL)\n    document.querySelector(\"html\").classList.add(Selectors.NO_SCROLL)\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst Selectors = {\n  // unique\n  DATA_ACCORDION: \"data-accordion\",\n  DATA_ACCORDION_ROW: \"data-accordion-row\",\n  // common\n  DATA_VISIBLE: \"data-visible\",\n  DATA_TARGET: \"data-target\",\n  DATA_TOGGLE_MULTIPLE: \"data-toggle-multiple\",\n  DATA_PARENT: \"data-parent\",\n  // accessibility\n  ARIA_EXPANDED: \"aria-expanded\",\n  ARIA_CONTROLS: \"aria-controls\",\n  ARIA_HIDDEN: \"aria-hidden\",\n  ARIA_LABELLEDBY: \"aria-labelledby\",\n  TABINDEX: \"tabindex\",\n}\n\nconst Events = {\n  CLICK: \"click\",\n  KEYDOWN: \"keydown\",\n}\n\nconst Messages = {\n  NO_VISIBLE_ERROR: id =>\n    `Could not find parent with [data-visible] attribute associated with [data-target='${id}'].`,\n  NO_ROW_ERROR: id => `Could not find [data-accordion-row] associated with ${id}.`,\n  NO_HEADER_ID_ERROR: id => `Could not find header tag associated with [data-target='${id}'].`,\n  NO_PARENT_ERROR: id => `Could not find [data-parent] associated with [data-target='${id}'].`,\n  NO_CONTENT_ERROR: id =>\n    `Could not find accordion content block with [id] ${id} associated with [data-target='${id}'].`,\n}\n\n/**\n * Accordion component class.\n * @module Accordion\n * @requires Utils\n */\nexport default class Accordion extends Utils {\n  constructor() {\n    super()\n  }\n\n  // all accordions\n  #accordionButtons = []\n  #accordionContentsAttr = \"\"\n  #accordionContents = []\n\n  // active accordion\n  #activeContainer = {}\n  #activeButton = {}\n  #activeAccordionRowId = \"\"\n  #activeRowAttr = \"\"\n  #activeRow = \"\"\n  #activeContainerId = \"\"\n  #activeContainerAttr = \"\"\n  #activeContent = {}\n  #activeButtonExpandState = \"\"\n  #activeContentHiddenState = \"\"\n\n  // other data\n  #headerLevels = [1, 2, 3, 4, 5, 6]\n\n  // public\n\n  /**\n   * Sets up accordion components and listens to buttons for events.\n   * Begin listening to [data-accordion-button] elements\n   */\n  start() {\n    const accordionButtonSelector = this.#getPossibleAccordionButtonAttrs(`[${Selectors.DATA_ACCORDION}]`)\n    this.#accordionButtons = this.getElements(accordionButtonSelector)\n\n    if (this.#accordionButtons.length) {\n      this.#accordionButtons.forEach(button => {\n        this.#setupAccordion(button)\n        button.addEventListener(Events.CLICK, this.#render)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to accordion button events.\n   */\n  stop() {\n    this.#accordionButtons.forEach(button => {\n      button.removeEventListener(Events.CLICK, this.#render)\n    })\n  }\n\n  // private\n\n  /**\n   * Add initial attributes to accordion elements.\n   * @param {Element} button - A button element that triggers an accordion.\n   */\n  #setupAccordion(button) {\n    const buttonId = button.getAttribute(Selectors.DATA_TARGET)\n\n    if (!document.getElementById(buttonId)) {\n      return console.error(Messages.NO_CONTENT_ERROR(buttonId))\n    }\n\n    const buttonContent = document.getElementById(buttonId)\n    const accordionRowAttr = this.#getAccordionRowAttr(buttonId)\n\n    if (!document.querySelector(accordionRowAttr)) {\n      return console.error(Messages.NO_ROW_ERROR(buttonId))\n    }\n\n    const accordionRow = document.querySelector(accordionRowAttr)\n    const buttonHeaderAttr = this.#getPossibleAccordionHeaderAttrs(accordionRowAttr)\n    const buttonHeader = this.getElements(buttonHeaderAttr)[0]\n\n    if (!buttonHeader || !buttonHeader.id) {\n      console.error(Messages.NO_HEADER_ID_ERROR(buttonId))\n    }\n\n    const buttonContentChildren = this.getFocusableElements(`#${buttonContent.id}`)\n\n    button.setAttribute(Selectors.ARIA_CONTROLS, buttonId)\n    buttonContent.setAttribute(Selectors.ARIA_LABELLEDBY, buttonHeader.id)\n\n    if (!accordionRow.getAttribute(Selectors.DATA_VISIBLE)) {\n      return console.error(Messages.NO_VISIBLE_ERROR(buttonId))\n    }\n\n    const contentShouldExpand = accordionRow.getAttribute(Selectors.DATA_VISIBLE)\n    if (contentShouldExpand === \"true\") {\n      buttonContent.style.maxHeight = `${buttonContent.scrollHeight}px`\n      button.setAttribute(Selectors.ARIA_EXPANDED, \"true\")\n      buttonContent.setAttribute(Selectors.ARIA_HIDDEN, \"false\")\n      buttonContentChildren.forEach(element => {\n        element.setAttribute(Selectors.TABINDEX, \"0\")\n      })\n    } else {\n      button.setAttribute(Selectors.ARIA_EXPANDED, \"false\")\n      buttonContent.setAttribute(Selectors.ARIA_HIDDEN, \"true\")\n      buttonContentChildren.forEach(element => {\n        element.setAttribute(Selectors.TABINDEX, \"-1\")\n      })\n    }\n  }\n\n  /**\n   * Build a selector string to match possible accordion buttons\n   * @param {String} attr - A unique attribute\n   * @return {String} - String of possible button selectors\n   */\n  #getPossibleAccordionButtonAttrs(attr) {\n    return this.#headerLevels\n      .map(num => `${attr} > [${Selectors.DATA_ACCORDION_ROW}] > h${num} [${Selectors.DATA_TARGET}]`)\n      .join(\", \")\n  }\n\n  /**\n   * Build a selector string to match possible accordion headers\n   * @param {String} attr - A unique attribute\n   * @return {String} - String of possible header selectors\n   */\n  #getPossibleAccordionHeaderAttrs(attr) {\n    return this.#headerLevels.map(num => `${attr} > h${num}`).join(\", \")\n  }\n\n  /**\n   * Build a unique accordion row attribute selector.\n   * @param {String} id - An id value associated with a given Selectors.DATA_TARGET\n   * @return {String} - A unique accordion row selector\n   */\n  #getAccordionRowAttr(id) {\n    return `[${Selectors.DATA_ACCORDION_ROW}='${id}']`\n  }\n\n  /**\n   * Open accordion content associated with an accordion button.\n   * @param {Object} event - The event object\n   */\n  #render = event => {\n    event.preventDefault()\n\n    this.#activeButton = event.target\n    this.#activeAccordionRowId = this.#activeButton.getAttribute(Selectors.DATA_TARGET)\n\n    this.#activeRowAttr = this.#getAccordionRowAttr(this.#activeAccordionRowId)\n    this.#activeRow = document.querySelector(this.#activeRowAttr)\n\n    if (!this.#activeButton.getAttribute(Selectors.DATA_PARENT)) {\n      return console.error(Messages.NO_PARENT_ERROR(this.#activeAccordionRowId))\n    }\n\n    this.#activeContainerId = this.#activeButton.getAttribute(Selectors.DATA_PARENT)\n    this.#activeContainerAttr = `[${Selectors.DATA_ACCORDION}='${this.#activeContainerId}']`\n\n    if (!document.querySelector(this.#activeContainerAttr)) {\n      return console.error(Messages.NO_ACCORDION_ERROR(this.#activeContainerId))\n    }\n\n    this.#activeContainer = document.querySelector(this.#activeContainerAttr)\n    this.#activeContent = document.getElementById(this.#activeAccordionRowId)\n\n    const accordionButtonState = this.#activeRow.getAttribute(Selectors.DATA_VISIBLE)\n\n    this.#activeButtonExpandState = accordionButtonState === \"true\" ? \"false\" : \"true\"\n    this.#activeContentHiddenState = this.#activeButtonExpandState === \"false\" ? \"true\" : \"false\"\n\n    this.#closeAllIfToggleable()\n    this.#toggleSelectedAccordion()\n  }\n\n  /**\n   * If toggling multiple rows at once isn't enabled, close all rows except the selected one.\n   * This ensures the selected one can be closed if it's already open.\n   */\n  #closeAllIfToggleable() {\n    if (this.#activeContainer.hasAttribute(Selectors.DATA_TOGGLE_MULTIPLE)) return\n\n    const allContentAttr = `${this.#activeContainerAttr} [${Selectors.ARIA_HIDDEN}]`\n    const allRows = this.getElements(`${this.#activeContainerAttr} [${Selectors.DATA_VISIBLE}]`)\n    const allContent = this.getElements(allContentAttr)\n\n    const accordionButtonSelector = this.#getPossibleAccordionButtonAttrs(this.#activeContainerAttr)\n    const allButtons = this.getElements(accordionButtonSelector)\n\n    allContent.forEach(content => {\n      if (content !== this.#activeContent) content.style.maxHeight = null\n    })\n\n    this.getFocusableElements(allContentAttr).forEach(element => {\n      element.setAttribute(Selectors.TABINDEX, \"-1\")\n    })\n\n    this.#toggleAttributeInCollection(allRows, Selectors.DATA_VISIBLE, \"true\", \"false\")\n    this.#toggleAttributeInCollection(allButtons, Selectors.ARIA_EXPANDED, \"true\", \"false\")\n    this.#toggleAttributeInCollection(allContent, Selectors.ARIA_HIDDEN, \"false\", \"true\")\n  }\n\n  /**\n   * Toggle the currently selected accordion button's content.\n   */\n  #toggleSelectedAccordion() {\n    this.#activeRow.setAttribute(Selectors.DATA_VISIBLE, this.#activeButtonExpandState)\n    this.#activeButton.setAttribute(Selectors.ARIA_EXPANDED, this.#activeButtonExpandState)\n    this.#activeContent.setAttribute(Selectors.ARIA_HIDDEN, this.#activeContentHiddenState)\n\n    const activeContentBlock = `#${this.#activeAccordionRowId}`\n    this.getFocusableElements(activeContentBlock).forEach(element => {\n      const value = this.#activeButtonExpandState === \"true\" ? \"0\" : \"-1\"\n      element.setAttribute(Selectors.TABINDEX, value)\n    })\n\n    if (this.#activeContent.style.maxHeight) {\n      this.#activeContent.style.maxHeight = null\n    } else {\n      this.#activeContent.style.maxHeight = `${this.#activeContent.scrollHeight}px`\n    }\n  }\n\n  /**\n   * Toggles a single attribute of a series of elements.\n   * @param {Array} elements - An array of elements to be operated on.\n   * @param {String} attributeName - An attribute to be changed.\n   * @param {String} currentValue - The current value of attributeName\n   * @param {String} newValue - The new value of attributeName\n   */\n  #toggleAttributeInCollection(elements, attributeName, currentValue, newValue) {\n    elements.forEach(element => {\n      if (element.hasAttribute(attributeName, currentValue)) {\n        element.setAttribute(attributeName, newValue)\n      }\n    })\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst KeyCodes = {\n  TAB: 9,\n  SHIFT: 16,\n  ESCAPE: 27,\n  ARROW_UP: 38,\n  ARROW_DOWN: 40,\n}\n\nconst Selectors = {\n  // unique\n  DATA_DROPDOWN: \"data-dropdown\",\n  // common\n  DATA_TARGET: \"data-target\",\n  DATA_PARENT: \"data-parent\",\n  DATA_VISIBLE: \"data-visible\",\n  // accessibility\n  TABINDEX: \"tabindex\",\n  ARIA_HASPOPUP: \"aria-haspopup\",\n  ARIA_CONTROLS: \"aria-controls\",\n  ARIA_LABELLEDBY: \"aria-labelledby\",\n  ARIA_EXPANDED: \"aria-expanded\",\n  ROLE: \"role\",\n}\n\nconst Events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n}\n\nconst Messages = {\n  NO_PARENT_ERROR: `Could not find dropdown button's [data-parent] attribute.`,\n  NO_DROPDOWN_ERROR: attr => `Could not find dropdown container associated with ${attr}.`,\n  NO_MENU_ERROR: attr => `Could not find menu associated with ${attr}.`,\n}\n\n/**\n * Dropdown component class.\n * @module Dropdown\n * @requires Utils\n */\nexport default class Dropdown extends Utils {\n  constructor() {\n    super()\n  }\n\n  // active dropdown\n  #activeDropdownButton = null\n  #activeDropdown = null\n  #activeDropdownMenu = null\n  #activeDropdownLinks = []\n  #allowFocusReturn = true\n  #activeDropdownId = \"\"\n  #activeDropdownAttr = \"\"\n  #activeDropdownMenuId = \"\"\n\n  // all dropdowns\n  #dropdownButtons = []\n  #dropdowns = []\n\n  // dropdown element selectors\n  #dropdownContainerAttr = `[${Selectors.DATA_DROPDOWN}]`\n  #dropdownTargetAttr = `[${Selectors.DATA_TARGET}]`\n\n  // public\n\n  /**\n   * Find and set up dropdown buttons and menus.\n   * Begin listening to dropdowns for events.\n   */\n  start() {\n    this.#dropdowns = this.getElements(`${this.#dropdownContainerAttr}`)\n    this.#dropdownButtons = this.getElements(\n      `${this.#dropdownContainerAttr} > ${this.#dropdownTargetAttr}`,\n    )\n\n    if (this.#dropdowns.length) {\n      this.#dropdowns.forEach(dropdown => this.#setupDropdown(dropdown))\n    }\n\n    this.#dropdownButtons.forEach(button => {\n      button.addEventListener(Events.CLICK, this.#render)\n      button.addEventListener(Events.KEYDOWN, this.#renderWithKeys)\n    })\n  }\n\n  /**\n   * Stop listening for dropdown events.\n   */\n  stop() {\n    this.#dropdownButtons.forEach(button => {\n      button.removeEventListener(Events.CLICK, this.#render)\n      button.removeEventListener(Events.KEYDOWN, this.#renderWithKeys)\n    })\n  }\n\n  // private\n\n  /**\n   * Find a button through event.target, then render the corresponding modal attribute via matching target id\n   * @param {Object} event - The event object\n   * @param {Number} key - The key code that called #render()\n   */\n  #render = (event, key) => {\n    if (!key) event.preventDefault()\n    event.stopPropagation()\n\n    if (this.#activeDropdownButton) {\n      this.#allowFocusReturn = false\n      this.#handleClose(event)\n      this.#allowFocusReturn = true\n    }\n\n    // dropdown button / trigger\n    this.#activeDropdownButton = event.target\n\n    if (!this.#activeDropdownButton.getAttribute(Selectors.DATA_PARENT)) {\n      return console.error(Messages.NO_PARENT_ERROR)\n    }\n\n    this.#activeDropdownId = this.#activeDropdownButton.getAttribute(Selectors.DATA_PARENT)\n\n    // dropdown container\n    this.#activeDropdownAttr = `[${Selectors.DATA_DROPDOWN}=\"${this.#activeDropdownId}\"]`\n\n    if (!document.querySelector(this.#activeDropdownAttr)) {\n      return console.error(Messages.NO_DROPDOWN_ERROR(this.#activeDropdownAttr))\n    }\n\n    this.#activeDropdown = document.querySelector(this.#activeDropdownAttr)\n\n    // dropdown menu\n    this.#activeDropdownMenuId = this.#activeDropdownButton.getAttribute(Selectors.DATA_TARGET)\n    this.#activeDropdownMenu = document.getElementById(this.#activeDropdownMenuId)\n\n    // dropdown button\n    this.#activeDropdownButton.setAttribute(Selectors.ARIA_EXPANDED, \"true\")\n    this.#activeDropdown.setAttribute(Selectors.DATA_VISIBLE, \"true\")\n\n    // reset button event listener to close the menu, instead of open it\n    this.#activeDropdownButton.removeEventListener(Events.CLICK, this.#render)\n    this.#activeDropdownButton.addEventListener(Events.CLICK, this.#handleClose)\n\n    document.addEventListener(Events.KEYDOWN, this.#handleEscapeKeyPress)\n    document.addEventListener(Events.CLICK, this.#handleOffMenuClick)\n\n    this.#activeDropdownLinks = this.#getDropdownLinks(this.#activeDropdownAttr)\n\n    this.firstDropdownLink = this.#activeDropdownLinks[0]\n    this.lastDropdownLink = this.#activeDropdownLinks[this.#activeDropdownLinks.length - 1]\n\n    this.firstDropdownLink.addEventListener(Events.KEYDOWN, this.#handleFirstTabClose)\n    this.lastDropdownLink.addEventListener(Events.KEYDOWN, this.#handleLastTabClose)\n\n    if (key && key === KeyCodes.ARROW_UP) {\n      this.lastDropdownLink.focus()\n    } else {\n      this.firstDropdownLink.focus()\n    }\n\n    this.#activeDropdownLinks.forEach(link => {\n      link.setAttribute(Selectors.TABINDEX, \"0\")\n      link.addEventListener(Events.CLICK, this.#handleClose)\n    })\n\n    this.captureFocus(`${this.#activeDropdownAttr} > ul`, { useArrows: true })\n  }\n\n  /**\n   * Closes the dropdown if user uses shift and tab keys on the first dropdown element.\n   * @param {Object} event - The event object\n   */\n  #handleFirstTabClose = event => {\n    const shiftKey = event.which === KeyCodes.SHIFT || event.shiftKey\n    const tabKey = event.which === KeyCodes.TAB\n\n    if (shiftKey && tabKey) {\n      this.#handleClose(event)\n    }\n  }\n\n  /**\n   * Closes the dropdown if user uses tab key on the last dropdown element.\n   * @param {Object} event - The event object\n   */\n  #handleLastTabClose = event => {\n    const shiftKey = event.which === KeyCodes.SHIFT || event.shiftKey\n    const tabKey = event.which === KeyCodes.TAB\n\n    if (tabKey && !shiftKey) {\n      this.#handleClose(event)\n    }\n  }\n\n  /**\n   * Renders dropdown if the user uses arrow up or down.\n   * @param {Object} event - The event object\n   */\n  #renderWithKeys = event => {\n    if (event.which === KeyCodes.ARROW_UP || event.which === KeyCodes.ARROW_DOWN) {\n      this.#render(event, event.which)\n    }\n  }\n\n  /**\n   * Closes currently open dropdown.\n   * @param {Object} event - The event object\n   */\n  #handleClose = event => {\n    event.preventDefault()\n\n    this.releaseFocus()\n\n    this.#activeDropdownButton.setAttribute(Selectors.ARIA_EXPANDED, \"false\")\n    this.#activeDropdown.setAttribute(Selectors.DATA_VISIBLE, \"false\")\n\n    this.#activeDropdownLinks.forEach(link => {\n      link.setAttribute(Selectors.TABINDEX, \"-1\")\n      link.removeEventListener(Events.CLICK, this.#handleClose)\n    })\n\n    this.#activeDropdownButton.removeEventListener(Events.CLICK, this.#handleClose)\n    this.#activeDropdownButton.addEventListener(Events.CLICK, this.#render)\n\n    document.removeEventListener(Events.KEYDOWN, this.#handleEscapeKeyPress)\n    document.removeEventListener(Events.CLICK, this.#handleOffMenuClick)\n\n    if (this.#allowFocusReturn) {\n      this.#handleReturnFocus()\n    }\n  }\n\n  /**\n   * Use escape key to close dropdown.\n   * @param {Object} event - The event object\n   */\n  #handleEscapeKeyPress = event => {\n    if (event.which === KeyCodes.ESCAPE) {\n      this.#handleClose(event)\n    }\n  }\n\n  /**\n   * Closes dropdown\n   * @param {Object} event - The event object\n   */\n  #handleOffMenuClick = event => {\n    if (event.target !== this.#activeDropdownButton && event.target !== this.#activeDropdownMenu) {\n      this.#handleClose(event)\n    }\n  }\n\n  /**\n   * Puts focus on a the active dropdown button.\n   */\n  #handleReturnFocus() {\n    this.#activeDropdownButton.setAttribute(Selectors.TAB_INDEX, \"-1\")\n    this.#activeDropdownButton.focus()\n    this.#activeDropdownButton.removeAttribute(Selectors.TAB_INDEX)\n  }\n\n  /**\n   * Retrieve possible menu links or buttons as an array\n   * @param {String} attr - The unique attribute for a dropdown.\n   * @return {String} - Selector for possible menu item links.\n   */\n  #getDropdownLinks(attr) {\n    return this.getElements(`${attr} > ul > li > a, ${attr} > ul > li > button`)\n  }\n\n  /**\n   * Add starting attributes to a dropdown.\n   * @param {Element} dropdown - A dropdown element.\n   */\n  #setupDropdown(dropdown) {\n    const dropdownId = dropdown.getAttribute(Selectors.DATA_DROPDOWN)\n    const dropdownIdAttr = `[${Selectors.DATA_DROPDOWN}=\"${dropdownId}\"]`\n    const dropdownMenuItemsAttr = `${dropdownIdAttr} > ul > li`\n\n    if (!document.querySelector(`${dropdownIdAttr} > ul`)) {\n      return console.error(Messages.NO_MENU_ERROR(dropdownIdAttr))\n    }\n\n    const dropdownMenu = document.querySelector(`${dropdownIdAttr} > ul`)\n    const dropdownButton = document.querySelector(`${dropdownIdAttr} > ${this.#dropdownTargetAttr}`)\n\n    dropdownButton.setAttribute(Selectors.ARIA_CONTROLS, dropdownMenu.id)\n    dropdownButton.setAttribute(Selectors.ARIA_HASPOPUP, \"true\")\n    dropdownButton.setAttribute(Selectors.ARIA_EXPANDED, \"false\")\n    dropdownMenu.setAttribute(Selectors.ARIA_LABELLEDBY, dropdownButton.id)\n\n    const dropdownMenuItems = this.getElements(dropdownMenuItemsAttr)\n    dropdownMenuItems.forEach(item => item.setAttribute(Selectors.ROLE, \"none\"))\n\n    this.#getDropdownLinks(dropdownIdAttr).forEach(link => {\n      link.setAttribute(Selectors.ROLE, \"menuitem\")\n      link.setAttribute(Selectors.TABINDEX, \"-1\")\n    })\n  }\n}\n","\"use strict\"\n\nimport _Modals from \"./components/modal\"\nimport _Accordion from \"./components/accordion\"\nimport _Dropdown from \"./components/dropdown\"\nimport _Utils from \"./utils\"\n\nexport const Modals = new _Modals()\nexport const Accordions = new _Accordion()\nexport const Dropdowns = new _Dropdown()\nexport const Utils = new _Utils()\n\nconst Undernet = {\n  // Components\n  Modals,\n  Accordions,\n  Dropdowns,\n\n  // Utils\n  Utils,\n}\n\nUndernet.start = () => {\n  // Components\n  Undernet.Modals.start()\n  Undernet.Accordions.start()\n  Undernet.Dropdowns.start()\n\n  // Utils\n  Undernet.Utils.enableFocusOutline()\n}\n\nUndernet.stop = () => {\n  // Components\n  Undernet.Modals.stop()\n  Undernet.Accordions.stop()\n  Undernet.Dropdowns.stop()\n\n  // Utils\n  Undernet.Utils.disableFocusOutline()\n}\n\nexport default Undernet\n","import Undernet from \"./index\"\n\nexport default Undernet\nexport { Modals, Accordions, Dropdowns, Utils } from \"./index\"\n\nwindow.Undernet = Undernet\n"],"names":["KeyCodes","Selectors","NOT_VISUALLY_HIDDEN","FOCUSABLE_TAGS","KEYBOARD_CLASS","Events","Utils","event","tabKey","which","shiftKey","arrowUp","arrowDown","document","body","classList","add","removeEventListener","_this","addEventListener","remove","containerElement","querySelector","containerActive","activeElement","firstActive","lastActive","preventDefault","focus","container","options","this","getFocusableElements","_classPrivateFieldGet","length","useArrows","element","nodeList","querySelectorAll","Array","apply","focusables","map","getElements","join","i","Messages","id","Modal","target","getAttribute","forEach","setAttribute","captureFocus","scrollTop","button","console","error","releaseFocus","removeAttribute","modal","_this2","_this3","modalId","modalWrapper","NO_VISIBLE_ERROR","NO_ROW_ERROR","NO_HEADER_ID_ERROR","NO_PARENT_ERROR","NO_CONTENT_ERROR","Accordion","NO_ACCORDION_ERROR","getElementById","accordionButtonState","accordionButtonSelector","buttonId","buttonContent","accordionRowAttr","accordionRow","buttonHeaderAttr","buttonHeader","buttonContentChildren","style","maxHeight","scrollHeight","attr","num","hasAttribute","allContentAttr","allRows","allContent","allButtons","content","_this4","activeContentBlock","value","_this5","elements","attributeName","currentValue","newValue","DATA_DROPDOWN","DATA_TARGET","DATA_PARENT","DATA_VISIBLE","TABINDEX","ARIA_HASPOPUP","ARIA_CONTROLS","ARIA_LABELLEDBY","ARIA_EXPANDED","ROLE","Dropdown","key","stopPropagation","firstDropdownLink","lastDropdownLink","link","dropdown","TAB_INDEX","dropdownId","dropdownIdAttr","dropdownMenuItemsAttr","dropdownMenu","dropdownButton","item","Modals","_Modals","Accordions","_Accordion","Dropdowns","_Dropdown","_Utils","Undernet","start","enableFocusOutline","stop","disableFocusOutline","window"],"mappings":"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"}