{"version":3,"file":"undernet.bundle.min.js","sources":["../js/src/utils.js","../js/src/components/modal.js","../js/src/components/accordion.js","../js/src/components/dropdown.js","../js/src/undernet.js"],"sourcesContent":["\"use strict\"\n\nconst keyCodes = {\n  SHIFT: 16,\n  TAB: 9,\n  ARROW_UP: 38,\n  ARROW_DOWN: 40,\n}\n\nconst selectors = {\n  NOT_VISUALLY_HIDDEN: \":not(.is-visually-hidden)\",\n  FOCUSABLE_TAGS: [\"a\", \"button\", \"input\", \"object\", \"select\", \"textarea\", \"[tabindex]\"],\n  KEYBOARD_CLASS: \"using-keyboard\",\n}\n\nconst events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n}\n\n/**\n * Utility methods for DOM traversal and focus trapping.\n * @module Utils\n */\nexport default class Utils {\n  constructor() {\n    this.focusContainerSelector = \"\"\n    this.focusableChildren = []\n    this.focusableFirstChild = null\n    this.focusableLastChild = null\n\n    // Used for focus outline helper\n    this.listeningForKeydown = false\n\n    // Used for captureFocus() if options.useArrows is passed\n    this.trapFocusWithArrows = false\n  }\n\n  // public\n\n  /**\n   * Listens to the first and last elements matched from this.getFocusableElements()\n   * @param {String} container - The container's class, attribute, etc.\n   * @param {Object} options - Optional has hof options.\n   */\n  captureFocus(container, options) {\n    this.focusContainerSelector = container\n    this.focusableChildren = this.getFocusableElements(this.focusContainerSelector)\n    this.focusableFirstChild = this.focusableChildren[0]\n    this.focusableLastChild = this.focusableChildren[this.focusableChildren.length - 1]\n\n    if (options) {\n      if (options.useArrows) {\n        this.trapFocusWithArrows = options.useArrows || this.trapFocusWithArrows\n        document.addEventListener(events.KEYDOWN, this._handleFocusTrapWithArrows)\n      }\n    } else {\n      document.addEventListener(events.KEYDOWN, this._handleFocusTrapWithTab)\n    }\n  }\n\n  /**\n   * Stop trapping focus set in this.captureFocus()\n   */\n  releaseFocus() {\n    if (this.trapFocusWithArrows) {\n      document.removeEventListener(events.KEYDOWN, this._handleFocusTrapWithArrows)\n      this.trapFocusWithArrows = false\n    } else {\n      document.removeEventListener(events.KEYDOWN, this._handleFocusTrapWithTab)\n    }\n  }\n\n  /**\n   * Begin listening to _listenForKeyboard()\n   */\n  enableFocusOutline() {\n    document.addEventListener(events.KEYDOWN, this._listenForKeyboard)\n  }\n\n  /**\n   * Completely disable focus outline utility.\n   */\n  disableFocusOutline() {\n    if (this.listeningForKeydown) {\n      document.removeEventListener(events.KEYDOWN, this._listenForKeyboard)\n    } else {\n      document.removeEventListener(events.CLICK, this._listenForClick)\n    }\n  }\n\n  /**\n   * Because IE does not recognize NodeList.forEach(),\n   * we use a cross-browser solution for returning an array of DOM nodes every time.\n   * @param {String} element - A DOM node's class, attribute, etc., to search the document.\n   * @return {Array}\n   */\n  getElements(element) {\n    const nodeList = document.querySelectorAll(element)\n    return Array.apply(null, nodeList)\n  }\n\n  /**\n   * Creates a string of element selector patterns using common elements.\n   * @param {String} container - The enclosing container's class, attribute, etc.\n   * @return {String}\n   */\n  getFocusableElements(container) {\n    const focusables = selectors.FOCUSABLE_TAGS.map(element => {\n      return `${container} ${element}${selectors.NOT_VISUALLY_HIDDEN}`\n    })\n\n    return this.getElements(focusables.join(\", \"))\n  }\n\n  // private\n\n  /**\n   * When a key is pressed, detect if it's tab or shift keys and enable\n   * focus outlines on currently focused element(s). Then, remove keydown listener\n   * and add click listener on _listenForClick().\n   * @param {Object} event - Event (keypress).\n   */\n  _listenForKeyboard = event => {\n    const tabKey = event.which === keyCodes.TAB\n    const shiftKey = event.which === keyCodes.SHIFT || event.shiftKey\n    const arrowUp = event.which === keyCodes.ARROW_UP\n    const arrowDown = event.which === keyCodes.ARROW_DOWN\n\n    if (tabKey || shiftKey || arrowUp || arrowDown) {\n      document.body.classList.add(selectors.KEYBOARD_CLASS)\n      document.removeEventListener(events.KEYDOWN, this._listenForKeyboard)\n      document.addEventListener(events.CLICK, this._listenForClick)\n      this.listeningForKeydown = false\n    }\n  }\n\n  /**\n   * On click, remove selectors.KEYBOARD_CLASS and re-add keydown listener.\n   * @param {Object} event - Event (keypress).\n   */\n  _listenForClick = event => {\n    document.body.classList.remove(selectors.KEYBOARD_CLASS)\n    document.removeEventListener(events.CLICK, this._listenForClick)\n    document.addEventListener(events.KEYDOWN, this._listenForKeyboard)\n    this.listeningForKeydown = true\n  }\n\n  /**\n   * Handles focus on first or last child in a container, using tab and tab+shift keys.\n   * @param {Object} event - Event (keypress)\n   */\n  _handleFocusTrapWithTab = event => {\n    const containerElement = document.querySelector(this.focusContainerSelector)\n    const containerActive = document.activeElement === containerElement\n    const firstActive = document.activeElement === this.focusableFirstChild\n    const lastActive = document.activeElement === this.focusableLastChild\n    const tabKey = event.which === keyCodes.TAB\n    const shiftKey = event.which === keyCodes.SHIFT || event.shiftKey\n    const hasShift = shiftKey && tabKey\n    const noShift = !shiftKey && tabKey\n\n    if (shiftKey && tabKey && (firstActive || containerActive)) {\n      event.preventDefault()\n      this.focusableLastChild.focus()\n    } else if (!shiftKey && tabKey && lastActive) {\n      event.preventDefault()\n      this.focusableFirstChild.focus()\n    }\n  }\n\n  /**\n   * Handles focus on the first, last, next, or previous child in a container, using up and down arrow keys.\n   * @param {Object} event - Event (keypress)\n   */\n  _handleFocusTrapWithArrows = event => {\n    const firstActive = document.activeElement === this.focusableFirstChild\n    const lastActive = document.activeElement === this.focusableLastChild\n    const arrowUp = event.which === keyCodes.ARROW_UP\n    const arrowDown = event.which === keyCodes.ARROW_DOWN\n\n    if (arrowUp || arrowDown) {\n      event.preventDefault()\n\n      if (firstActive && arrowUp) {\n        this.focusableLastChild.focus()\n      } else if (lastActive && arrowDown) {\n        this.focusableFirstChild.focus()\n      } else if (arrowDown) {\n        this._focusNextChild()\n      } else if (arrowUp) {\n        this._focusLastChild()\n      }\n    }\n  }\n\n  /**\n   * Focus the next child in this.focusableChildren.\n   */\n  _focusNextChild() {\n    for (let i = 0; i < this.focusableChildren.length; i++) {\n      if (this.focusableChildren[i] === document.activeElement) {\n        this.focusableChildren[i + 1].focus()\n        break\n      }\n    }\n  }\n\n  /**\n   * Focus the previous child in this.focusableChildren.\n   */\n  _focusLastChild() {\n    for (let i = 0; i < this.focusableChildren.length; i++) {\n      if (this.focusableChildren[i] === document.activeElement) {\n        this.focusableChildren[i - 1].focus()\n        break\n      }\n    }\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst keyCodes = {\n  ESCAPE: 27,\n}\n\nconst selectors = {\n  // unique\n  MODAL_CONTAINER: \"data-modal\",\n  MODAL_ID: \"data-modal-id\",\n  MODAL_BUTTON: \"data-modal-button\",\n  NO_SCROLL: \"no-scroll\",\n  // common\n  DATA_VISIBLE: \"data-visible\",\n  DATA_CLOSE: \"data-close\",\n  DATA_TARGET: \"data-target\",\n  DATA_PARENT: \"data-parent\",\n  // accessibility\n  ARIA_HIDDEN: \"aria-hidden\",\n  ARIA_MODAL: \"aria-modal\",\n  ROLE: \"role\",\n  TABINDEX: \"tabindex\",\n}\n\nconst events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n  RESIZE: \"resize\",\n}\n\nconst messages = {\n  NO_TARGET_ERROR: `Could not find [data-target] attribute associated with a [data-modal-button] element.`,\n  NO_PARENT_ERROR: `Could not find [data-parent] attribute associated with a [data-modal] element.`,\n  NO_ID_ERROR: id =>\n    `Could not find [data-modal-id='${id}'] associated with a [data-modal] element.`,\n}\n\n/**\n * Modal component class.\n * @module Modal\n * @requires Utils\n */\nexport default class Modal extends Utils {\n  constructor() {\n    super()\n    // all modals\n    this.modals = []\n    this.modalButtons = []\n\n    // active modal\n    this.activeModalButton = null\n    this.activeModalOverlay = null\n    this.activeModal = null\n    this.activeModalId = \"\"\n    this.activeModalOverlayAttr = \"\"\n    this.activeModalSelector = \"\"\n    this.activeModalCloseButtons = []\n\n    // attribute helpers\n    this.modalContainerAttr = `[${selectors.MODAL_CONTAINER}]`\n    this.closeButtonAttr = `[${selectors.MODAL_CONTAINER}] [${selectors.DATA_CLOSE}]`\n  }\n\n  // public\n\n  /**\n   * Add accessible attributes to modal containers\n   * Begin listening to elements with [data-modal-button]\n   */\n  start() {\n    this.modals = this.getElements(this.modalContainerAttr)\n    this.modalButtons = this.getElements(`[${selectors.MODAL_BUTTON}]`)\n\n    this.getFocusableElements(this.modalContainerAttr).forEach(element => {\n      element.setAttribute(selectors.TABINDEX, \"-1\")\n    })\n\n    if (this.modals.length) {\n      this.modals.forEach(modal => {\n        this._setupModal(modal)\n      })\n    }\n\n    if (this.modalButtons.length) {\n      this.modalButtons.forEach(button => {\n        button.addEventListener(events.CLICK, this._render)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to modal buttons\n   */\n  stop() {\n    this.modalButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this._render)\n    })\n  }\n\n  // private\n\n  /**\n   * Find a button through event.target, then render the corresponding modal attribute via matching target id\n   * @param {Object} event - The event object\n   */\n  _render = event => {\n    event.preventDefault()\n    this.activeModalButton = event.target\n\n    if (!this.activeModalButton.getAttribute(selectors.DATA_TARGET)) {\n      return console.error(messages.NO_TARGET_ERROR)\n    }\n\n    this.activeModalId = this.activeModalButton.getAttribute(selectors.DATA_TARGET)\n    this.activeModalOverlayAttr = `[${selectors.MODAL_ID}=\"${this.activeModalId}\"]`\n\n    if (!document.querySelector(this.activeModalOverlayAttr)) {\n      return console.error(messages.NO_ID_ERROR(this.activeModalId))\n    }\n\n    this.activeModalOverlay = document.querySelector(this.activeModalOverlayAttr)\n\n    this.activeModalSelector = `${this.activeModalOverlayAttr} ${this.modalContainerAttr}`\n    this.activeModal = document.querySelector(this.activeModalSelector)\n    this.activeModalCloseButtons = this.getElements(\n      `${this.activeModalOverlayAttr} [${selectors.MODAL_CONTAINER}] [${selectors.DATA_CLOSE}]`,\n    )\n\n    this.getFocusableElements(this.activeModalSelector).forEach(element => {\n      element.setAttribute(selectors.TABINDEX, \"0\")\n    })\n\n    this._handleScrollStop()\n    this.captureFocus(this.activeModalSelector)\n    this.activeModalOverlay.setAttribute(selectors.ARIA_HIDDEN, \"false\")\n    this.activeModal.setAttribute(selectors.TABINDEX, \"-1\")\n    this.activeModalOverlay.setAttribute(selectors.DATA_VISIBLE, \"true\")\n    this.activeModal.focus()\n\n    // offset slight scroll caused by this.activeModal.focus()\n    this.activeModalOverlay.scrollTop = 0\n\n    // begin listening to events\n    document.addEventListener(events.KEYDOWN, this._handleEscapeKeyPress)\n    document.addEventListener(events.CLICK, this._handleOverlayClick)\n    this.activeModalCloseButtons.forEach(button => {\n      button.addEventListener(events.CLICK, this._handleClose)\n    })\n  }\n\n  _setupModal(modal) {\n    let modalId\n    if (!modal.getAttribute(selectors.DATA_PARENT)) {\n      return console.warn(messages.NO_PARENT_ERROR)\n    } else {\n      modalId = modal.getAttribute(selectors.DATA_PARENT)\n    }\n\n    let modalWrapper\n    if (!document.querySelector(`[${selectors.MODAL_ID}='${modalId}']`)) {\n      return console.error(messages.NO_ID_ERROR(modalId))\n    } else {\n      modalWrapper = document.querySelector(`[${selectors.MODAL_ID}='${modalId}']`)\n    }\n\n    modalWrapper.setAttribute(selectors.ARIA_HIDDEN, \"true\")\n    modalWrapper.setAttribute(selectors.DATA_VISIBLE, \"false\")\n    modal.setAttribute(selectors.ARIA_MODAL, \"true\")\n    modal.setAttribute(selectors.ROLE, \"dialog\")\n  }\n\n  /**\n   * Turn off event listeners and reset focus to last selected DOM node (button)\n   * @param {Object} event - Event (keydown or click)\n   */\n  _handleClose = event => {\n    event.preventDefault()\n    this.activeModalOverlay.setAttribute(selectors.DATA_VISIBLE, \"false\")\n    this._handleReturnFocus()\n    this._handleScrollRestore()\n    this.releaseFocus()\n    this.activeModalOverlay.setAttribute(selectors.ARIA_HIDDEN, \"true\")\n    this.activeModal.removeAttribute(selectors.TABINDEX)\n\n    this.getFocusableElements(this.activeModalSelector).forEach(element => {\n      element.setAttribute(selectors.TABINDEX, \"-1\")\n    })\n\n    // stop listening to events\n    document.removeEventListener(events.KEYDOWN, this._handleEscapeKeyPress)\n    document.removeEventListener(events.CLICK, this._handleOverlayClick)\n    this.activeModalCloseButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this._handleClose)\n    })\n  }\n\n  /**\n   * Handles click event on the modal background to close it.\n   * @param {Object} event - Event (keydown)\n   */\n  _handleOverlayClick = event => {\n    if (event.target === this.activeModalOverlay) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Handles escape key event to close the current modal\n   * @param {Object} event - Event (keydown)\n   */\n  _handleEscapeKeyPress = event => {\n    if (event.which === keyCodes.ESCAPE) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Returns focus to the last focused element before the modal was called.\n   * @param {Object} button - The current modal's corresponding button.\n   */\n  _handleReturnFocus() {\n    this.activeModalButton.setAttribute(selectors.TABINDEX, \"-1\")\n    this.activeModalButton.focus()\n    this.activeModalButton.removeAttribute(selectors.TABINDEX)\n  }\n\n  /**\n   * Restores scroll behavior to <html> and <body>\n   */\n  _handleScrollRestore() {\n    document.body.classList.remove(selectors.NO_SCROLL)\n    document.querySelector(\"html\").classList.remove(selectors.NO_SCROLL)\n  }\n\n  /**\n   * Prevents scroll behavior on <html> and <body>\n   */\n  _handleScrollStop() {\n    document.body.classList.add(selectors.NO_SCROLL)\n    document.querySelector(\"html\").classList.add(selectors.NO_SCROLL)\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst keyCodes = {\n  SPACE: 32,\n}\n\nconst selectors = {\n  // unique\n  ACCORDION_CONTAINER: \"data-accordion\",\n  ACCORDION_ROW: \"data-accordion-row\",\n  // common\n  DATA_VISIBLE: \"data-visible\",\n  DATA_TARGET: \"data-target\",\n  DATA_TOGGLE_MULTIPLE: \"data-toggle-multiple\",\n  DATA_PARENT: \"data-parent\",\n  // accessibility\n  ARIA_EXPANDED: \"aria-expanded\",\n  ARIA_CONTROLS: \"aria-controls\",\n  ARIA_HIDDEN: \"aria-hidden\",\n  ARIA_LABELLEDBY: \"aria-labelledby\",\n  TABINDEX: \"tabindex\",\n}\n\nconst events = {\n  CLICK: \"click\",\n  KEYDOWN: \"keydown\",\n}\n\nconst messages = {\n  NO_VISIBLE_ERROR: id =>\n    `Could not find parent with [data-visible] attribute associated with [data-target='${id}'].`,\n  NO_ROW_ERROR: id => `Could not find [data-accordion-row] associated with ${id}.`,\n  NO_HEADER_ID_ERROR: id => `Could not find header tag associated with [data-target='${id}'].`,\n  NO_PARENT_ERROR: id => `Could not find [data-parent] associated with [data-target='${id}'].`,\n  NO_CONTENT_ERROR: id =>\n    `Could not accordion content block with [id] ${id} associated with [data-target='${id}'].`,\n}\n\n/**\n * Accordion component class.\n * @module Accordion\n * @requires Utils\n */\nexport default class Accordion extends Utils {\n  constructor() {\n    super()\n    // all accordions\n    this.accordionButtons = []\n    this.accordionContentsAttr = \"\"\n    this.accordionContents = []\n\n    // active accordion\n    this.activeContainer = null\n    this.activeButton = null\n    this.activeAccordionRowId = \"\"\n    this.activeRowAttr = \"\"\n    this.activeRow = \"\"\n    this.activeContainerId = \"\"\n    this.activeContainerAttr = \"\"\n    this.activeContent = null\n    this.activeButtonExpandState = \"\"\n    this.activeContentHiddenState = \"\"\n  }\n\n  // public\n\n  /**\n   * Sets up accordion components and listens to buttons for events.\n   * Begin listening to [data-accordion-button] elements\n   */\n  start() {\n    this.accordionButtons = this.getElements(\n      `[${selectors.ACCORDION_CONTAINER}] [${selectors.DATA_TARGET}]`,\n    )\n\n    if (this.accordionButtons.length) {\n      this.accordionButtons.forEach(button => {\n        this._setupAccordion(button)\n        button.addEventListener(events.CLICK, this._render)\n        button.addEventListener(events.KEYDOWN, this._handleSpaceKeyPress)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to accordion buttons.\n   */\n  stop() {\n    this.accordionButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this._render)\n      button.removeEventListener(events.KEYDOWN, this._handleSpaceKeyPress)\n    })\n  }\n\n  // private\n\n  /**\n   * Add initial attributes to accordion elements.\n   * @param {Element} button - A button element that triggers an accordion.\n   */\n  _setupAccordion(button) {\n    const buttonId = button.getAttribute(selectors.DATA_TARGET)\n\n    if (!document.getElementById(buttonId)) {\n      return console.error(messages.NO_CONTENT_ERROR(buttonId))\n    }\n\n    const buttonContent = document.getElementById(buttonId)\n    const accordionRowAttr = this._getAccordionRowAttr(buttonId)\n\n    if (!document.querySelector(accordionRowAttr)) {\n      return console.error(messages.NO_ROW_ERROR(buttonId))\n    }\n\n    const accordionRow = document.querySelector(accordionRowAttr)\n    const buttonHeaderAttr = this._getPossibleAccordionHeaderAttrs(accordionRowAttr)\n    const buttonHeader = this.getElements(buttonHeaderAttr)[0]\n\n    if (!buttonHeader || !buttonHeader.id) {\n      console.error(messages.NO_HEADER_ID_ERROR(buttonId))\n    }\n\n    const buttonContentChildren = this.getFocusableElements(`#${buttonContent.id}`)\n\n    button.setAttribute(selectors.ARIA_CONTROLS, buttonId)\n    buttonContent.setAttribute(selectors.ARIA_LABELLEDBY, buttonHeader.id)\n\n    if (!accordionRow.getAttribute(selectors.DATA_VISIBLE)) {\n      return console.error(messages.NO_VISIBLE_ERROR(buttonId))\n    }\n\n    const contentShouldExpand = accordionRow.getAttribute(selectors.DATA_VISIBLE)\n    if (contentShouldExpand === \"true\") {\n      buttonContent.style.maxHeight = `${buttonContent.scrollHeight}px`\n      button.setAttribute(selectors.ARIA_EXPANDED, \"true\")\n      buttonContent.setAttribute(selectors.ARIA_HIDDEN, \"false\")\n      buttonContentChildren.forEach(element => {\n        element.setAttribute(selectors.TABINDEX, \"0\")\n      })\n    } else {\n      button.setAttribute(selectors.ARIA_EXPANDED, \"false\")\n      buttonContent.setAttribute(selectors.ARIA_HIDDEN, \"true\")\n      buttonContentChildren.forEach(element => {\n        element.setAttribute(selectors.TABINDEX, \"-1\")\n      })\n    }\n  }\n\n  /**\n   * Build a selector string to be passed into querySelectorAll() / _getElements()\n   * @param {String} - A unique attribute.\n   */\n  _getPossibleAccordionHeaderAttrs(attr) {\n    return `${attr} h1, ${attr} h2, ${attr} h3, ${attr} h4, ${attr} h5, ${attr} h6`\n  }\n\n  /**\n   * Return a unique accordion row attribute selector.\n   * @param {String} id - An id value associated with a given selectors.DATA_TARGET\n   * @return {String}\n   */\n  _getAccordionRowAttr(id) {\n    return `[${selectors.ACCORDION_ROW}='${id}']`\n  }\n\n  /**\n   * Open accordion content associated with an accordion button.\n   * @param {Object} event - The event object.\n   */\n  _render = event => {\n    event.preventDefault()\n\n    this.activeButton = event.target\n    this.activeAccordionRowId = this.activeButton.getAttribute(selectors.DATA_TARGET)\n\n    this.activeRowAttr = this._getAccordionRowAttr(this.activeAccordionRowId)\n    this.activeRow = document.querySelector(this.activeRowAttr)\n\n    if (!this.activeButton.getAttribute(selectors.DATA_PARENT)) {\n      return console.error(messages.NO_PARENT_ERROR(this.activeAccordionRowId))\n    }\n\n    this.activeContainerId = this.activeButton.getAttribute(selectors.DATA_PARENT)\n    this.activeContainerAttr = `[${selectors.ACCORDION_CONTAINER}='${this.activeContainerId}']`\n\n    if (!document.querySelector(this.activeContainerAttr)) {\n      return console.error(messages.NO_ACCORDION_ERROR(this.activeContainerId))\n    }\n\n    this.activeContainer = document.querySelector(this.activeContainerAttr)\n    this.activeContent = document.getElementById(this.activeAccordionRowId)\n\n    const accordionButtonState = this.activeRow.getAttribute(selectors.DATA_VISIBLE)\n\n    this.activeButtonExpandState = accordionButtonState === \"true\" ? \"false\" : \"true\"\n    this.activeContentHiddenState = this.activeButtonExpandState === \"false\" ? \"true\" : \"false\"\n\n    this._closeAllIfToggleable()\n    this._toggleSelectedAccordion()\n  }\n\n  /**\n   * If a keypress is the spacebar on a button, open its accordion content.\n   * @param {Object} event - The event object.\n   */\n  _handleSpaceKeyPress = event => {\n    if (event.which === keyCodes.SPACE) this._render(event)\n  }\n\n  /**\n   * If toggling multiple rows at once isn't enabled, close all rows except the selected one.\n   * This ensures the selected one can be closed if it's already open.\n   */\n  _closeAllIfToggleable() {\n    if (this.activeContainer.hasAttribute(selectors.DATA_TOGGLE_MULTIPLE)) return\n\n    const allContentAttr = `${this.activeContainerAttr} [${selectors.ARIA_HIDDEN}]`\n    const allRows = this.getElements(`${this.activeContainerAttr} [${selectors.DATA_VISIBLE}]`)\n    const allContent = this.getElements(allContentAttr)\n    const allButtons = this.getElements(`${this.activeContainerAttr} [${selectors.DATA_TARGET}]`)\n\n    allContent.forEach(content => {\n      if (!(content === this.activeContent)) content.style.maxHeight = null\n    })\n\n    this.getFocusableElements(allContentAttr).forEach(element => {\n      element.setAttribute(selectors.TABINDEX, \"-1\")\n    })\n\n    this._toggleAttributeInCollection(allRows, selectors.DATA_VISIBLE, \"true\", \"false\")\n    this._toggleAttributeInCollection(allButtons, selectors.ARIA_EXPANDED, \"true\", \"false\")\n    this._toggleAttributeInCollection(allContent, selectors.ARIA_HIDDEN, \"false\", \"true\")\n  }\n\n  /**\n   * Toggle the currently selected accordion button's content.\n   */\n  _toggleSelectedAccordion() {\n    this.activeRow.setAttribute(selectors.DATA_VISIBLE, this.activeButtonExpandState)\n    this.activeButton.setAttribute(selectors.ARIA_EXPANDED, this.activeButtonExpandState)\n    this.activeContent.setAttribute(selectors.ARIA_HIDDEN, this.activeContentHiddenState)\n\n    const activeContentBlock = `#${this.activeAccordionRowId}`\n    this.getFocusableElements(activeContentBlock).forEach(element => {\n      const value = this.activeButtonExpandState === \"true\" ? \"0\" : \"-1\"\n      element.setAttribute(selectors.TABINDEX, value)\n    })\n\n    if (this.activeContent.style.maxHeight) {\n      this.activeContent.style.maxHeight = null\n    } else {\n      this.activeContent.style.maxHeight = `${this.activeContent.scrollHeight}px`\n    }\n  }\n\n  /**\n   * Toggles a single attribute of a series of elements.\n   */\n  _toggleAttributeInCollection(elements, attributeName, currentValue, newValue) {\n    elements.forEach(element => {\n      if (element.hasAttribute(attributeName, currentValue)) {\n        element.setAttribute(attributeName, newValue)\n      }\n    })\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst keyCodes = {\n  TAB: 9,\n  SHIFT: 16,\n  ESCAPE: 27,\n  ARROW_UP: 38,\n  ARROW_DOWN: 40,\n}\n\nconst selectors = {\n  // unique\n  DATA_DROPDOWN: \"data-dropdown\",\n  // common\n  DATA_TARGET: \"data-target\",\n  DATA_PARENT: \"data-parent\",\n  DATA_VISIBLE: \"data-visible\",\n  // accessibility\n  TABINDEX: \"tabindex\",\n  ARIA_HASPOPUP: \"aria-haspopup\",\n  ARIA_CONTROLS: \"aria-controls\",\n  ARIA_LABELLEDBY: \"aria-labelledby\",\n  ARIA_EXPANDED: \"aria-expanded\",\n  ROLE: \"role\",\n}\n\nconst events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n}\n\nconst messages = {\n  NO_PARENT_ERROR: `Could not find dropdown button's [data-parent] attribute.`,\n  NO_DROPDOWN_ERROR: attr => `Could not find dropdown container associated with ${attr}.`,\n  NO_MENU_ERROR: attr => `Could not find menu associated with ${attr}.`,\n}\n\n/**\n * Dropdown component class.\n * @module Dropdown\n * @requires Utils\n */\nexport default class Dropdown extends Utils {\n  constructor() {\n    super()\n    // active dropdown\n    this.activeDropdownButton = null\n    this.activeDropdown = null\n    this.activeDropdownMenu = null\n    this.activeDropdownLinks = []\n    this.allowFocusReturn = true\n    this.activeDropdownId = \"\"\n    this.activeDropdownAttr = \"\"\n    this.activeDropdownMenuId = \"\"\n\n    // all dropdowns\n    this.dropdownButtons = []\n    this.dropdowns = []\n\n    // dropdown element selectors\n    this.dropdownTargetAttr = `[${selectors.DATA_TARGET}]`\n    this.dropdownButtonAttr = `[${selectors.DATA_DROPDOWN}] > ${this.dropdownTargetAttr}`\n  }\n\n  // public\n\n  /**\n   * Find and set up dropdown buttons and menus.\n   * Begin listening to dropdowns for events.\n   */\n  start() {\n    this.dropdowns = this.getElements(`[${selectors.DATA_DROPDOWN}]`)\n    this.dropdownButtons = this.getElements(this.dropdownButtonAttr)\n\n    if (this.dropdowns.length) {\n      this.dropdowns.forEach(dropdown => this._setupDropdown(dropdown))\n    }\n\n    this.dropdownButtons.forEach(button => {\n      button.addEventListener(events.CLICK, this._render)\n      button.addEventListener(events.KEYDOWN, this._renderWithKeys)\n    })\n  }\n\n  /**\n   * Stop listening for dropdown events.\n   */\n  stop() {\n    this.dropdownButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this._render)\n      button.removeEventListener(events.KEYDOWN, this._renderWithKeys)\n    })\n  }\n\n  // private\n\n  /**\n   * Find a button through event.target, then render the corresponding modal attribute via matching target id\n   * @param {Object} event - The event object\n   * @param {Number} key - The key code that called _render()\n   */\n  _render = (event, key) => {\n    if (!key) event.preventDefault()\n    event.stopPropagation()\n\n    if (this.activeDropdownButton) {\n      this.allowFocusReturn = false\n      this._handleClose(event)\n      this.allowFocusReturn = true\n    }\n\n    // dropdown button / trigger\n    this.activeDropdownButton = event.target\n\n    if (!this.activeDropdownButton.getAttribute(selectors.DATA_PARENT)) {\n      return messages.NO_PARENT_ERROR\n    }\n\n    this.activeDropdownId = this.activeDropdownButton.getAttribute(selectors.DATA_PARENT)\n\n    // dropdown container\n    this.activeDropdownAttr = `[${selectors.DATA_DROPDOWN}=\"${this.activeDropdownId}\"]`\n\n    if (!document.querySelector(this.activeDropdownAttr)) {\n      return messages.NO_DROPDOWN_ERROR(this.activeDropdownAttr)\n    }\n\n    this.activeDropdown = document.querySelector(this.activeDropdownAttr)\n\n    // dropdown menu\n    this.activeDropdownMenuId = this.activeDropdownButton.getAttribute(selectors.DATA_TARGET)\n    this.activeDropdownMenu = document.getElementById(this.activeDropdownMenuId)\n\n    // dropdown button\n    this.activeDropdownButton.setAttribute(selectors.ARIA_EXPANDED, \"true\")\n    this.activeDropdown.setAttribute(selectors.DATA_VISIBLE, \"true\")\n\n    // reset button event listener to close the menu, instead of open it\n    this.activeDropdownButton.removeEventListener(events.CLICK, this._render)\n    this.activeDropdownButton.addEventListener(events.CLICK, this._handleClose)\n\n    document.addEventListener(events.KEYDOWN, this._handleEscapeKeyPress)\n    document.addEventListener(events.CLICK, this._handleOffMenuClick)\n\n    this.activeDropdownLinks = this._getDropdownLinks(this.activeDropdownAttr)\n\n    this.firstDropdownLink = this.activeDropdownLinks[0]\n    this.lastDropdownLink = this.activeDropdownLinks[this.activeDropdownLinks.length - 1]\n\n    this.firstDropdownLink.addEventListener(events.KEYDOWN, this._handleFirstTabClose)\n    this.lastDropdownLink.addEventListener(events.KEYDOWN, this._handleLastTabClose)\n\n    if (key && key === keyCodes.ARROW_UP) {\n      this.lastDropdownLink.focus()\n    } else {\n      this.firstDropdownLink.focus()\n    }\n\n    this.activeDropdownLinks.forEach(link => {\n      link.setAttribute(selectors.TABINDEX, \"0\")\n      link.addEventListener(events.CLICK, this._handleClose)\n    })\n\n    this.captureFocus(`${this.activeDropdownAttr} > ul`, { useArrows: true })\n  }\n\n  /**\n   * Closes the dropdown if user uses shift and tab keys on the first dropdown element.\n   * @param {Object} event - The event object\n   */\n  _handleFirstTabClose = event => {\n    const shiftKey = event.which === keyCodes.SHIFT || event.shiftKey\n    const tabKey = event.which === keyCodes.TAB\n\n    if (shiftKey && tabKey) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Closes the dropdown if user uses tab key on the last dropdown element.\n   * @param {Object} event - The event object\n   */\n  _handleLastTabClose = event => {\n    const shiftKey = event.which === keyCodes.SHIFT || event.shiftKey\n    const tabKey = event.which === keyCodes.TAB\n\n    if (tabKey && !shiftKey) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Renders dropdown if the user uses arrow up or down.\n   * @param {Object} event - The event object\n   */\n  _renderWithKeys = event => {\n    if (event.which === keyCodes.ARROW_UP || event.which === keyCodes.ARROW_DOWN) {\n      this._render(event, event.which)\n    }\n  }\n\n  /**\n   * Closes currently open dropdown.\n   * @param {Object} event - The event object\n   */\n  _handleClose = event => {\n    event.preventDefault()\n\n    this.releaseFocus()\n\n    this.activeDropdownButton.setAttribute(selectors.ARIA_EXPANDED, \"false\")\n    this.activeDropdown.setAttribute(selectors.DATA_VISIBLE, \"false\")\n\n    this.activeDropdownLinks.forEach(link => {\n      link.setAttribute(selectors.TABINDEX, \"-1\")\n      link.removeEventListener(events.CLICK, this._handleClose)\n    })\n\n    this.activeDropdownButton.removeEventListener(events.CLICK, this._handleClose)\n    this.activeDropdownButton.addEventListener(events.CLICK, this._render)\n\n    document.removeEventListener(events.KEYDOWN, this._handleEscapeKeyPress)\n    document.removeEventListener(events.CLICK, this._handleOffMenuClick)\n\n    if (this.allowFocusReturn) {\n      this._handleReturnFocus()\n    }\n  }\n\n  /**\n   * Use escape key to close dropdown.\n   * @param {Object} event - The event object\n   */\n  _handleEscapeKeyPress = event => {\n    if (event.which === keyCodes.ESCAPE) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Closes dropdown\n   * @param {Object} event - The event object\n   */\n  _handleOffMenuClick = event => {\n    if (event.target !== this.activeDropdownButton && event.target !== this.activeDropdownMenu) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Puts focus on a the active dropdown button.\n   */\n  _handleReturnFocus() {\n    this.activeDropdownButton.setAttribute(selectors.TAB_INDEX, \"-1\")\n    this.activeDropdownButton.focus()\n    this.activeDropdownButton.removeAttribute(selectors.TAB_INDEX)\n  }\n\n  /**\n   * Retrieve possible menu links or buttons as an array\n   * @param {String} attr - The unique attribute for a dropdown.\n   */\n  _getDropdownLinks(attr) {\n    return this.getElements(`${attr} > ul > li > a, ${attr} > ul > li > button`)\n  }\n\n  /**\n   * Add starting attributes to a dropdown.\n   * @param {Element} dropdown - A dropdown element.\n   */\n  _setupDropdown(dropdown) {\n    const dropdownId = dropdown.getAttribute(selectors.DATA_DROPDOWN)\n    const dropdownIdAttr = `[${selectors.DATA_DROPDOWN}=\"${dropdownId}\"]`\n    const dropdownMenuItemsAttr = `${dropdownIdAttr} > ul > li`\n\n    if (!document.querySelector(`${dropdownIdAttr} > ul`)) {\n      return messages.NO_MENU_ERROR(dropdownIdAttr)\n    }\n\n    const dropdownMenu = document.querySelector(`${dropdownIdAttr} > ul`)\n    const dropdownButton = document.querySelector(`${dropdownIdAttr} > ${this.dropdownTargetAttr}`)\n\n    dropdownButton.setAttribute(selectors.ARIA_CONTROLS, dropdownMenu.id)\n    dropdownButton.setAttribute(selectors.ARIA_HASPOPUP, \"true\")\n    dropdownButton.setAttribute(selectors.ARIA_EXPANDED, \"false\")\n    dropdownMenu.setAttribute(selectors.ARIA_LABELLEDBY, dropdownButton.id)\n\n    const dropdownMenuItems = this.getElements(dropdownMenuItemsAttr)\n    dropdownMenuItems.forEach(item => item.setAttribute(selectors.ROLE, \"none\"))\n\n    this._getDropdownLinks(dropdownIdAttr).forEach(link => {\n      link.setAttribute(selectors.ROLE, \"menuitem\")\n      link.setAttribute(selectors.TABINDEX, \"-1\")\n    })\n  }\n}\n","\"use strict\"\n\nimport _Modals from \"./components/modal\"\nimport _Accordion from \"./components/accordion\"\nimport _Dropdown from \"./components/dropdown\"\nimport _Utils from \"./utils\"\n\nconst Modals = new _Modals()\nconst Accordions = new _Accordion()\nconst Dropdowns = new _Dropdown()\nconst Utils = new _Utils()\n\nconst Undernet = {\n  // Components\n  Modals,\n  Accordions,\n  Dropdowns,\n\n  // Utils\n  Utils,\n}\n\nUndernet.start = () => {\n  // Components\n  Undernet.Modals.start()\n  Undernet.Accordions.start()\n  Undernet.Dropdowns.start()\n\n  // Utils\n  Undernet.Utils.enableFocusOutline()\n}\n\nUndernet.stop = () => {\n  // Components\n  Undernet.Modals.stop()\n  Undernet.Accordions.stop()\n  Undernet.Dropdowns.stop()\n\n  // Utils\n  Undernet.Utils.disableFocusOutline()\n}\n\nwindow.Undernet = Undernet\nexport default Undernet\n"],"names":["keyCodes","selectors","NOT_VISUALLY_HIDDEN","FOCUSABLE_TAGS","KEYBOARD_CLASS","events","Utils","event","tabKey","which","shiftKey","arrowUp","arrowDown","document","body","classList","add","removeEventListener","_this","_listenForKeyboard","addEventListener","_listenForClick","listeningForKeydown","remove","containerElement","querySelector","focusContainerSelector","containerActive","activeElement","firstActive","focusableFirstChild","lastActive","focusableLastChild","preventDefault","focus","_focusNextChild","_focusLastChild","focusableChildren","trapFocusWithArrows","container","options","this","getFocusableElements","length","useArrows","_handleFocusTrapWithArrows","_handleFocusTrapWithTab","element","nodeList","querySelectorAll","Array","apply","focusables","map","getElements","join","i","messages","id","Modal","activeModalButton","target","getAttribute","activeModalId","activeModalOverlayAttr","activeModalOverlay","activeModalSelector","modalContainerAttr","activeModal","activeModalCloseButtons","forEach","setAttribute","_handleScrollStop","captureFocus","scrollTop","_handleEscapeKeyPress","_handleOverlayClick","button","_handleClose","console","error","_handleReturnFocus","_handleScrollRestore","releaseFocus","removeAttribute","modals","modalButtons","closeButtonAttr","modal","_this2","_setupModal","_render","_this3","modalId","modalWrapper","warn","NO_VISIBLE_ERROR","NO_ROW_ERROR","NO_HEADER_ID_ERROR","NO_PARENT_ERROR","NO_CONTENT_ERROR","Accordion","activeButton","activeAccordionRowId","activeRowAttr","_getAccordionRowAttr","activeRow","activeContainerId","activeContainerAttr","NO_ACCORDION_ERROR","activeContainer","activeContent","getElementById","accordionButtonState","activeButtonExpandState","activeContentHiddenState","_closeAllIfToggleable","_toggleSelectedAccordion","accordionButtons","accordionContentsAttr","accordionContents","_setupAccordion","_handleSpaceKeyPress","buttonId","buttonContent","accordionRowAttr","accordionRow","buttonHeaderAttr","_getPossibleAccordionHeaderAttrs","buttonHeader","buttonContentChildren","style","maxHeight","scrollHeight","attr","hasAttribute","allContentAttr","allRows","allContent","allButtons","content","_this4","_toggleAttributeInCollection","activeContentBlock","value","_this5","elements","attributeName","currentValue","newValue","DATA_DROPDOWN","DATA_TARGET","DATA_PARENT","DATA_VISIBLE","TABINDEX","ARIA_HASPOPUP","ARIA_CONTROLS","ARIA_LABELLEDBY","ARIA_EXPANDED","ROLE","Dropdown","key","stopPropagation","activeDropdownButton","allowFocusReturn","activeDropdownId","activeDropdownAttr","activeDropdown","activeDropdownMenuId","activeDropdownMenu","_handleOffMenuClick","activeDropdownLinks","_getDropdownLinks","firstDropdownLink","lastDropdownLink","_handleFirstTabClose","_handleLastTabClose","link","dropdownButtons","dropdowns","dropdownTargetAttr","dropdownButtonAttr","dropdown","_setupDropdown","_renderWithKeys","TAB_INDEX","dropdownId","dropdownIdAttr","dropdownMenuItemsAttr","dropdownMenu","dropdownButton","item","Undernet","Modals","_Modals","Accordions","_Accordion","Dropdowns","_Dropdown","_Utils","start","enableFocusOutline","stop","disableFocusOutline","window"],"mappings":"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"}