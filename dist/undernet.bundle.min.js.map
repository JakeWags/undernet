{"version":3,"file":"undernet.bundle.min.js","sources":["../js/src/utils.js","../js/src/components/modal.js","../js/src/components/accordion.js","../js/src/components/dropdown.js","../js/src/undernet.js"],"sourcesContent":["\"use strict\"\n\nconst keyCodes = {\n  SHIFT: 16,\n  TAB: 9,\n  ARROW_UP: 38,\n  ARROW_DOWN: 40,\n}\n\nconst selectors = {\n  NOT_VISUALLY_HIDDEN: \":not(.is-visually-hidden)\",\n  FOCUSABLE_TAGS: [\"a\", \"button\", \"input\", \"object\", \"select\", \"textarea\", \"[tabindex]\"],\n  KEYBOARD_CLASS: \"using-keyboard\",\n}\n\nconst events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n}\n\n/**\n * Utility methods for DOM traversal and focus trapping.\n * @module Utils\n */\nexport default class Utils {\n  constructor() {\n    this._handleFocusTrapWithTab = this._handleFocusTrapWithTab.bind(this)\n    this._handleFocusTrapWithArrows = this._handleFocusTrapWithArrows.bind(this)\n    this._listenForKeyboard = this._listenForKeyboard.bind(this)\n    this._listenForClick = this._listenForClick.bind(this)\n\n    this.focusContainerSelector = \"\"\n    this.focusableChildren = []\n    this.focusableFirstChild = null\n    this.focusableLastChild = null\n\n    // Used for focus outline helper\n    this.listeningForKeydown = false\n\n    // Used for captureFocus() if options.useArrows is passed\n    this.trapFocusWithArrows = false\n  }\n\n  // public\n\n  /**\n   * Listens to the first and last elements matched from this._getFocusableElements()\n   * @param {String} container - The container's class, attribute, etc.\n   * @param {Object} options - Optional has hof options.\n   */\n  captureFocus(container, options) {\n    this.focusContainerSelector = container\n    this.focusableChildren = this._getFocusableElements(this.focusContainerSelector)\n    this.focusableFirstChild = this.focusableChildren[0]\n    this.focusableLastChild = this.focusableChildren[this.focusableChildren.length - 1]\n\n    if (options) {\n      if (options.useArrows) {\n        this.trapFocusWithArrows = options.useArrows || this.trapFocusWithArrows\n        document.addEventListener(events.KEYDOWN, this._handleFocusTrapWithArrows)\n      }\n    } else {\n      document.addEventListener(events.KEYDOWN, this._handleFocusTrapWithTab)\n    }\n  }\n\n  /**\n   * Stop trapping focus set in this.captureFocus()\n   */\n  releaseFocus() {\n    if (this.trapFocusWithArrows) {\n      document.removeEventListener(events.KEYDOWN, this._handleFocusTrapWithArrows)\n      this.trapFocusWithArrows = false\n    } else {\n      document.removeEventListener(events.KEYDOWN, this._handleFocusTrapWithTab)\n    }\n  }\n\n  /**\n   * Begin listening to _listenForKeyboard()\n   */\n  enableFocusOutline() {\n    document.addEventListener(events.KEYDOWN, this._listenForKeyboard)\n  }\n\n  /**\n   * Completely disable focus outline utility.\n   */\n  disableFocusOutline() {\n    if (this.listeningForKeydown) {\n      document.removeEventListener(events.KEYDOWN, this._listenForKeyboard)\n    } else {\n      document.removeEventListener(events.CLICK, this._listenForClick)\n    }\n  }\n\n  // private\n\n  /**\n   * When a key is pressed, detect if it's tab or shift keys and enable\n   * focus outlines on currently focused element(s). Then, remove keydown listener\n   * and add click listener on _listenForClick().\n   * @param {Object} event - Event (keypress).\n   */\n  _listenForKeyboard(event) {\n    const tabKey = event.which === keyCodes.TAB\n    const shiftKey = event.which === keyCodes.SHIFT || event.shiftKey\n    const arrowUp = event.which === keyCodes.ARROW_UP\n    const arrowDown = event.which === keyCodes.ARROW_DOWN\n\n    if (tabKey || shiftKey || arrowUp || arrowDown) {\n      document.body.classList.add(selectors.KEYBOARD_CLASS)\n      document.removeEventListener(events.KEYDOWN, this._listenForKeyboard)\n      document.addEventListener(events.CLICK, this._listenForClick)\n      this.listeningForKeydown = false\n    }\n  }\n\n  /**\n   * On click, remove selectors.KEYBOARD_CLASS and re-add keydown listener.\n   * @param {Object} event - Event (keypress).\n   */\n  _listenForClick(event) {\n    document.body.classList.remove(selectors.KEYBOARD_CLASS)\n    document.removeEventListener(events.CLICK, this._listenForClick)\n    document.addEventListener(events.KEYDOWN, this._listenForKeyboard)\n    this.listeningForKeydown = true\n  }\n\n  /**\n   * Because IE does not recognize NodeList.forEach(),\n   * we use a cross-browser solution for returning an array of DOM nodes every time.\n   * @param {String} element - A DOM node's class, attribute, etc., to search the document.\n   * @return {Array}\n   */\n  _getElements(element) {\n    const nodeList = document.querySelectorAll(element)\n    return Array.apply(null, nodeList)\n  }\n\n  /**\n   * Creates a string of element selector patterns using common elements.\n   * @param {String} container - The enclosing container's class, attribute, etc.\n   * @return {String}\n   */\n  _getFocusableElements(container) {\n    const focusables = selectors.FOCUSABLE_TAGS.map(element => {\n      return `${container} ${element}${selectors.NOT_VISUALLY_HIDDEN}`\n    })\n\n    return this._getElements(focusables.join(\", \"))\n  }\n\n  /**\n   * Handles focus on first or last child in a container, using tab and tab+shift keys.\n   * @param {Object} event - Event (keypress)\n   */\n  _handleFocusTrapWithTab(event) {\n    const containerElement = document.querySelector(this.focusContainerSelector)\n    const containerActive = document.activeElement === containerElement\n    const firstActive = document.activeElement === this.focusableFirstChild\n    const lastActive = document.activeElement === this.focusableLastChild\n    const tabKey = event.which === keyCodes.TAB\n    const shiftKey = event.which === keyCodes.SHIFT || event.shiftKey\n    const hasShift = shiftKey && tabKey\n    const noShift = !shiftKey && tabKey\n\n    if (shiftKey && tabKey && (firstActive || containerActive)) {\n      event.preventDefault()\n      this.focusableLastChild.focus()\n    } else if (!shiftKey && tabKey && lastActive) {\n      event.preventDefault()\n      this.focusableFirstChild.focus()\n    }\n  }\n\n  /**\n   * Handles focus on the first, last, next, or previous child in a container, using up and down arrow keys.\n   * @param {Object} event - Event (keypress)\n   */\n  _handleFocusTrapWithArrows(event) {\n    const firstActive = document.activeElement === this.focusableFirstChild\n    const lastActive = document.activeElement === this.focusableLastChild\n    const arrowUp = event.which === keyCodes.ARROW_UP\n    const arrowDown = event.which === keyCodes.ARROW_DOWN\n\n    if (arrowUp || arrowDown) {\n      event.preventDefault()\n\n      if (firstActive && arrowUp) {\n        this.focusableLastChild.focus()\n      } else if (lastActive && arrowDown) {\n        this.focusableFirstChild.focus()\n      } else if (arrowDown) {\n        this._focusNextChild()\n      } else if (arrowUp) {\n        this._focusLastChild()\n      }\n    }\n  }\n\n  /**\n   * Focus the next child in this.focusableChildren.\n   */\n  _focusNextChild() {\n    for (let i = 0; i < this.focusableChildren.length; i++) {\n      if (this.focusableChildren[i] === document.activeElement) {\n        this.focusableChildren[i + 1].focus()\n        break\n      }\n    }\n  }\n\n  /**\n   * Focus the previous child in this.focusableChildren.\n   */\n  _focusLastChild() {\n    for (let i = 0; i < this.focusableChildren.length; i++) {\n      if (this.focusableChildren[i] === document.activeElement) {\n        this.focusableChildren[i - 1].focus()\n        break\n      }\n    }\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst keyCodes = {\n  ESCAPE: 27,\n}\n\nconst selectors = {\n  // unique\n  MODAL_CONTAINER: \"data-modal\",\n  MODAL_ID: \"data-modal-id\",\n  MODAL_BUTTON: \"data-modal-button\",\n  NO_SCROLL: \"no-scroll\",\n  // common\n  DATA_VISIBLE: \"data-visible\",\n  DATA_CLOSE: \"data-close\",\n  DATA_TARGET: \"data-target\",\n  DATA_PARENT: \"data-parent\",\n  // accessibility\n  ARIA_HIDDEN: \"aria-hidden\",\n  ARIA_MODAL: \"aria-modal\",\n  ROLE: \"role\",\n  TABINDEX: \"tabindex\",\n}\n\nconst events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n  RESIZE: \"resize\",\n}\n\nconst messages = {\n  MISSING_MODAL:\n    \"Your button is missing its corresponding modal. Check to make sure your modal is in the DOM, and that it has a [data-modal-id=*] attribute matchin its [data-modal-button] and [data-target] attributes. It's possible the modal script ran before the button appeared on the page!\",\n}\n\n/**\n * Modal component class.\n * @module Modal\n * @requires Utils\n */\nexport default class Modal extends Utils {\n  constructor() {\n    super()\n    // modal event methods\n    this._render = this._render.bind(this)\n    this._handleClose = this._handleClose.bind(this)\n    this._handleEscapeKeyPress = this._handleEscapeKeyPress.bind(this)\n    this._handleOverlayClick = this._handleOverlayClick.bind(this)\n\n    // all modals\n    this.modals = []\n    this.modalButtons = []\n\n    // active modal\n    this.activeModalButton = null\n    this.activeModalId = \"\"\n    this.activeModalOverlayAttr = \"\"\n    this.activeModalOverlay = {}\n    this.activeModalSelector = \"\"\n    this.activeModal = null\n    this.activeModalCloseButtons = []\n\n    // attribute helpers\n    this.modalContainerAttr = `[${selectors.MODAL_CONTAINER}]`\n    this.closeButtonAttr = `[${selectors.MODAL_CONTAINER}] [${selectors.DATA_CLOSE}]`\n  }\n\n  // public\n\n  /**\n   * Add accessible attributes to modal containers\n   * Begin listening to elements with [data-modal-button]\n   */\n  start() {\n    this.modals = this._getElements(this.modalContainerAttr)\n    this.modalButtons = this._getElements(`[${selectors.MODAL_BUTTON}]`)\n\n    this._getFocusableElements(this.modalContainerAttr).forEach(element => {\n      element.setAttribute(selectors.TABINDEX, \"-1\")\n    })\n\n    if (this.modals.length) {\n      this.modals.forEach(modal => {\n        const modalId = modal.getAttribute(selectors.DATA_PARENT)\n        const modalWrapper = document.querySelector(`[${selectors.MODAL_ID}='${modalId}']`)\n        modalWrapper.setAttribute(selectors.ARIA_HIDDEN, \"true\")\n        modalWrapper.setAttribute(selectors.DATA_VISIBLE, \"false\")\n        modal.setAttribute(selectors.ARIA_MODAL, \"true\")\n        modal.setAttribute(selectors.ROLE, \"dialog\")\n      })\n    }\n\n    if (this.modalButtons.length) {\n      this.modalButtons.forEach(button => {\n        button.addEventListener(events.CLICK, this._render)\n      })\n    }\n  }\n\n  /**\n   * Stop listening to modal buttons\n   */\n  stop() {\n    this.modalButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this._render)\n    })\n  }\n\n  // private\n\n  /**\n   * Find a button through event.target, then render the corresponding modal attribute via matching target id\n   * @param {Object} event - The event object\n   */\n  _render(event) {\n    event.preventDefault()\n\n    this.activeModalButton = event.target\n    this.activeModalId = this.activeModalButton.getAttribute(selectors.DATA_TARGET)\n    this.activeModalOverlayAttr = `[${selectors.MODAL_ID}=\"${this.activeModalId}\"]`\n    this.activeModalOverlay = document.querySelector(this.activeModalOverlayAttr)\n\n    if (!this.activeModalOverlay) {\n      throw messages.MISSING_MODAL\n      return\n    }\n\n    this.activeModalSelector = `${this.activeModalOverlayAttr} ${this.modalContainerAttr}`\n    this.activeModal = document.querySelector(this.activeModalSelector)\n    this.activeModalCloseButtons = this._getElements(\n      `${this.activeModalOverlayAttr} ${this.closeButtonAttr}`,\n    )\n\n    this._getFocusableElements(this.activeModalSelector).forEach(element => {\n      element.setAttribute(selectors.TABINDEX, \"0\")\n    })\n\n    this._handleScrollStop()\n    this.captureFocus(this.activeModalSelector)\n    this.activeModalOverlay.setAttribute(selectors.ARIA_HIDDEN, \"false\")\n    this.activeModal.setAttribute(selectors.TABINDEX, \"-1\")\n    this.activeModalOverlay.setAttribute(selectors.DATA_VISIBLE, \"true\")\n    this.activeModal.focus()\n\n    // offset slight scroll caused by this.activeModal.focus()\n    this.activeModalOverlay.scrollTop = 0\n\n    // begin listening to events\n    document.addEventListener(events.KEYDOWN, this._handleEscapeKeyPress)\n    document.addEventListener(events.CLICK, this._handleOverlayClick)\n    this.activeModalCloseButtons.forEach(button => {\n      button.addEventListener(events.CLICK, this._handleClose)\n    })\n  }\n\n  /**\n   * Turn off event listeners and reset focus to last selected DOM node (button)\n   * @param {Object} event - Event (keydown or click)\n   */\n  _handleClose(event) {\n    event.preventDefault()\n    this.activeModalOverlay.setAttribute(selectors.DATA_VISIBLE, \"false\")\n    this._handleReturnFocus()\n    this._handleScrollRestore()\n    this.releaseFocus()\n    this.activeModalOverlay.setAttribute(selectors.ARIA_HIDDEN, \"true\")\n    this.activeModal.removeAttribute(selectors.TABINDEX)\n\n    this._getFocusableElements(this.activeModalSelector).forEach(element => {\n      element.setAttribute(selectors.TABINDEX, \"-1\")\n    })\n\n    // stop listening to events\n    document.removeEventListener(events.KEYDOWN, this._handleEscapeKeyPress)\n    document.removeEventListener(events.CLICK, this._handleOverlayClick)\n    this.activeModalCloseButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this._handleClose)\n    })\n  }\n\n  /**\n   * Handles click event on the modal background to close it.\n   * @param {Object} event - Event (keydown)\n   */\n  _handleOverlayClick(event) {\n    if (event.target === this.activeModalOverlay) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Handles escape key event to close the current modal\n   * @param {Object} event - Event (keydown)\n   */\n  _handleEscapeKeyPress(event) {\n    if (event.which === keyCodes.ESCAPE) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Returns focus to the last focused element before the modal was called.\n   * @param {Object} button - The current modal's corresponding button.\n   */\n  _handleReturnFocus() {\n    this.activeModalButton.setAttribute(selectors.TABINDEX, \"-1\")\n    this.activeModalButton.focus()\n    this.activeModalButton.removeAttribute(selectors.TABINDEX)\n  }\n\n  /**\n   * Restores scroll behavior to <html> and <body>\n   */\n  _handleScrollRestore() {\n    document.body.classList.remove(selectors.NO_SCROLL)\n    document.querySelector(\"html\").classList.remove(selectors.NO_SCROLL)\n  }\n\n  /**\n   * Prevents scroll behavior on <html> and <body>\n   */\n  _handleScrollStop() {\n    document.body.classList.add(selectors.NO_SCROLL)\n    document.querySelector(\"html\").classList.add(selectors.NO_SCROLL)\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst keyCodes = {\n  SPACE: 32,\n}\n\nconst selectors = {\n  // unique\n  ACCORDION_CONTAINER: \"data-accordion\",\n  ACCORDION_ROW: \"data-accordion-row\",\n  // common\n  DATA_EXPANDED: \"data-expanded\",\n  DATA_TARGET: \"data-target\",\n  DATA_CONTENT: \"data-content\",\n  DATA_TOGGLE_MULTIPLE: \"data-toggle-multiple\",\n  DATA_PARENT: \"data-parent\",\n  // accessibility\n  ARIA_EXPANDED: \"aria-expanded\",\n  ARIA_CONTROLS: \"aria-controls\",\n  ARIA_HIDDEN: \"aria-hidden\",\n  TABINDEX: \"tabindex\",\n}\n\nconst events = {\n  CLICK: \"click\",\n  KEYDOWN: \"keydown\",\n}\n\nconst messages = {\n  MISSING_CONTENT:\n    \"You have an accordion button that is missing its [data-content] attribute, and has a matching id to the button's [data-target] attribute's value.\",\n}\n\n/**\n * Accordion component class.\n * @module Accordion\n * @requires Utils\n */\nexport default class Accordion extends Utils {\n  constructor() {\n    super()\n    // accordion event methods\n    this._render = this._render.bind(this)\n    this._handleSpaceKeyPress = this._handleSpaceKeyPress.bind(this)\n\n    // all accordions\n    this.accordionButtons = []\n    this.accordionContentsAttr = \"\"\n    this.accordionContents = []\n\n    // active accordion\n    this.activeContainer = null\n    this.activeButton = null\n    this.activeAccordionRowId = \"\"\n    this.activeRowAttr = \"\"\n    this.activeRow = \"\"\n    this.activeContainerId = \"\"\n    this.activeContainerAttr = \"\"\n    this.activeContent = null\n    this.toggleExpandState = \"\"\n    this.toggleContentState = \"\"\n    this.toggleHiddenState = \"\"\n    this.allContentAttr = \"\"\n  }\n\n  // public\n\n  /**\n   * Add accessible attributes [data-accordion-button] and [data-accordion-content] elements\n   * Begin listening to [data-accordion-button] elements\n   */\n  start() {\n    this.accordionButtons = this._getElements(\n      `[${selectors.ACCORDION_CONTAINER}] [${selectors.DATA_TARGET}]`,\n    )\n\n    this.accordionContentsAttr = `[${selectors.ACCORDION_CONTAINER}] [${selectors.DATA_CONTENT}]`\n    this.accordionContents = this._getElements(this.accordionContentsAttr)\n\n    this._getFocusableElements(this.accordionContentsAttr).forEach(element => {\n      element.setAttribute(selectors.TABINDEX, \"-1\")\n    })\n\n    if (this.accordionButtons.length) {\n      this.accordionButtons.forEach(button => {\n        this._setupButton(button)\n        button.addEventListener(events.CLICK, this._render)\n        button.addEventListener(events.KEYDOWN, this._handleSpaceKeyPress)\n      })\n    }\n\n    if (this.accordionContents.length) {\n      this.accordionContents.forEach(content => {\n        const contentRowAttr = this._getAccordionRowAttr(content.id)\n        const contentRow = document.querySelector(contentRowAttr)\n        const contentHiddenState = contentRow.getAttribute(selectors.DATA_EXPANDED)\n        const toggleContentHiddenState = contentHiddenState === \"true\" ? \"false\" : \"true\"\n        content.setAttribute(selectors.ARIA_HIDDEN, toggleContentHiddenState)\n\n        if (toggleContentHiddenState === \"false\") {\n          this._getFocusableElements(`#${content.id}`).forEach(element => {\n            element.setAttribute(selectors.TABINDEX, \"0\")\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Stop listening to accordion buttons.\n   */\n  stop() {\n    this.accordionButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this._render)\n      button.removeEventListener(events.KEYDOWN, this._handleSpaceKeyPress)\n    })\n  }\n\n  // private\n\n  _setupButton(button) {\n    const buttonId = button.getAttribute(selectors.DATA_TARGET)\n    const accordionRowAttr = this._getAccordionRowAttr(buttonId)\n    const accordionRow = document.querySelector(accordionRowAttr)\n    const shouldContentExpand = accordionRow.getAttribute(selectors.DATA_EXPANDED)\n    const buttonContent = document.getElementById(buttonId)\n\n    button.setAttribute(selectors.ARIA_CONTROLS, buttonId)\n\n    if (shouldContentExpand === \"true\") {\n      buttonContent.style.maxHeight = `${buttonContent.scrollHeight}px`\n      button.setAttribute(selectors.ARIA_EXPANDED, \"true\")\n    } else {\n      button.setAttribute(selectors.ARIA_EXPANDED, \"false\")\n    }\n  }\n\n  /**\n   * Return a selector that targets `selectors.ACCORDION_ROW` with value of the id.\n   * @param {String} id - An id value associated with a given selectors.DATA_TARGET\n   * @return {String}\n   */\n  _getAccordionRowAttr(id) {\n    return `[${selectors.ACCORDION_ROW}='${id}']`\n  }\n\n  /**\n   * Open accordion content associated with a [data-accordion-button] element.\n   * @param {Object} event - The event object.\n   */\n  _render(event) {\n    event.preventDefault()\n\n    this.activeButton = event.target\n    this.activeAccordionRowId = this.activeButton.getAttribute(selectors.DATA_TARGET)\n\n    this.activeRowAttr = this._getAccordionRowAttr(this.activeAccordionRowId)\n    this.activeRow = document.querySelector(this.activeRowAttr)\n    this.activeContainerId = this.activeButton.getAttribute(selectors.DATA_PARENT)\n    this.activeContainerAttr = `[${selectors.ACCORDION_CONTAINER}='${this.activeContainerId}']`\n    this.activeContainer = document.querySelector(this.activeContainerAttr)\n\n    this.activeContent = document.getElementById(this.activeAccordionRowId)\n\n    const accordionContentHasAttr = this.activeContent.hasAttribute(selectors.DATA_CONTENT)\n    if (!accordionContentHasAttr) {\n      throw messages.MISSING_CONTENT\n      return\n    }\n\n    const accordionButtonState = this.activeRow.getAttribute(selectors.DATA_EXPANDED)\n    const accordionContentState = this.activeContent.getAttribute(selectors.DATA_CONTENT)\n\n    this.toggleExpandState = accordionButtonState === \"true\" ? \"false\" : \"true\"\n    this.toggleContentState = accordionContentState === \"visible\" ? \"hidden\" : \"visible\"\n    this.toggleHiddenState = this.toggleExpandState === \"false\" ? \"true\" : \"false\"\n\n    this._closeAllIfToggleable()\n    this._toggleSelectedAccordion()\n  }\n\n  /**\n   * If a keypress is the spacebar on a button, open its correlated content.\n   * @param {Object} event - The event object.\n   */\n  _handleSpaceKeyPress(event) {\n    if (event.which === keyCodes.SPACE) this._render(event)\n  }\n\n  /**\n   * If toggling multiple rows at once isn't enabled, close all rows except the selected one.\n   * This ensures the selected one can be closed if it's already open.\n   */\n  _closeAllIfToggleable() {\n    if (this.activeContainer.hasAttribute(selectors.DATA_TOGGLE_MULTIPLE)) return\n\n    const allContentAttr = `${this.activeContainerAttr} [${selectors.DATA_CONTENT}]`\n    const allRows = this._getElements(`${this.activeContainerAttr} [${selectors.DATA_EXPANDED}]`)\n    const allContent = this._getElements(allContentAttr)\n    const allButtons = this._getElements(`${this.activeContainerAttr} [${selectors.DATA_TARGET}]`)\n\n    allContent.forEach(content => {\n      if (!(content === this.activeContent)) content.style.maxHeight = null\n    })\n\n    this._getFocusableElements(allContentAttr).forEach(element => {\n      element.setAttribute(selectors.TABINDEX, \"-1\")\n    })\n\n    this._toggleAttributeInCollection(allRows, selectors.DATA_EXPANDED, \"true\", \"false\")\n    this._toggleAttributeInCollection(allButtons, selectors.ARIA_EXPANDED, \"true\", \"false\")\n    this._toggleAttributeInCollection(allContent, selectors.ARIA_HIDDEN, \"false\", \"true\")\n    this._toggleAttributeInCollection(allContent, selectors.DATA_CONTENT, \"visible\", \"hidden\")\n  }\n\n  /**\n   * Toggle the currently selected accordion button.\n   */\n  _toggleSelectedAccordion() {\n    this.activeRow.setAttribute(selectors.DATA_EXPANDED, this.toggleExpandState)\n    this.activeContent.setAttribute(selectors.DATA_CONTENT, this.toggleContentState)\n    this.activeButton.setAttribute(selectors.ARIA_EXPANDED, this.toggleExpandState)\n    this.activeContent.setAttribute(selectors.ARIA_HIDDEN, this.toggleHiddenState)\n\n    const activeContentBlock = `#${this.activeAccordionRowId}`\n    this._getFocusableElements(activeContentBlock).forEach(element => {\n      const value = this.toggleExpandState === \"true\" ? \"0\" : \"-1\"\n      element.setAttribute(selectors.TABINDEX, value)\n    })\n\n    if (this.activeContent.style.maxHeight) {\n      this.activeContent.style.maxHeight = null\n    } else {\n      this.activeContent.style.maxHeight = `${this.activeContent.scrollHeight}px`\n    }\n  }\n\n  /**\n   * Toggles a single attribute of a series of elements within a parent.\n   */\n  _toggleAttributeInCollection(elements, attributeName, currentValue, newValue) {\n    elements.forEach(element => {\n      if (element.hasAttribute(attributeName, currentValue)) {\n        element.setAttribute(attributeName, newValue)\n      }\n    })\n  }\n}\n","\"use strict\"\n\nimport Utils from \"../utils\"\n\nconst keyCodes = {\n  TAB: 9,\n  SHIFT: 16,\n  ESCAPE: 27,\n  ARROW_UP: 38,\n  ARROW_DOWN: 40,\n}\n\nconst selectors = {\n  // unique\n  DATA_DROPDOWN: \"data-dropdown\",\n  // common\n  DATA_TARGET: \"data-target\",\n  DATA_PARENT: \"data-parent\",\n  DATA_VISIBLE: \"data-visible\",\n  // accessibility\n  TABINDEX: \"tabindex\",\n  ARIA_HASPOPUP: \"aria-haspopup\",\n  ARIA_CONTROLS: \"aria-controls\",\n  ARIA_LABELLEDBY: \"aria-labelledby\",\n  ARIA_EXPANDED: \"aria-expanded\",\n  ROLE: \"role\",\n}\n\nconst events = {\n  KEYDOWN: \"keydown\",\n  CLICK: \"click\",\n}\n\nconst messages = {\n  MISSING_DROPDOWN: \"You have a dropdown button missing its corresponding menu.\",\n}\n\n/**\n * Dropdown component class.\n * @module Dropdown\n * @requires Utils\n */\nexport default class Dropdown extends Utils {\n  constructor() {\n    super()\n    //  dropdown event methods\n    this._render = this._render.bind(this)\n    this._renderWithKeys = this._renderWithKeys.bind(this)\n    this._handleClose = this._handleClose.bind(this)\n    this._handleEscapeKeyPress = this._handleEscapeKeyPress.bind(this)\n    this._handleOffMenuClick = this._handleOffMenuClick.bind(this)\n    this._handleFirstTabClose = this._handleFirstTabClose.bind(this)\n    this._handleLastTabClose = this._handleLastTabClose.bind(this)\n\n    // active dropdown\n    this.activeDropdownButton = null\n    this.activeDropdown = null\n    this.activeDropdownMenu = null\n    this.activeDropdownLinks = []\n    this.allowFocusReturn = true\n    this.activeDropdownId = \"\"\n    this.activeDropdownAttr = \"\"\n    this.activeDropdownMenuId = \"\"\n\n    // all dropdowns\n    this.dropdownButtons = []\n    this.dropdowns = []\n\n    // dropdown element selectors\n    this.dropdownTargetAttr = `[${selectors.DATA_TARGET}]`\n    this.dropdownButtonAttr = `[${selectors.DATA_DROPDOWN}] > ${this.dropdownTargetAttr}`\n  }\n\n  // public\n\n  /**\n   * Find and set up dropdown buttons and menus.\n   * Begin listening to dropdowns for events.\n   */\n  start() {\n    this.dropdowns = this._getElements(`[${selectors.DATA_DROPDOWN}]`)\n    this.dropdownButtons = this._getElements(this.dropdownButtonAttr)\n\n    if (this.dropdowns.length) {\n      this.dropdowns.forEach(dropdown => this._setupDropdown(dropdown))\n    }\n\n    this.dropdownButtons.forEach(button => {\n      button.addEventListener(events.CLICK, this._render)\n      button.addEventListener(events.KEYDOWN, this._renderWithKeys)\n    })\n  }\n\n  /**\n   * Stop listening for dropdown events.\n   */\n  stop() {\n    this.dropdownButtons.forEach(button => {\n      button.removeEventListener(events.CLICK, this._render)\n      button.removeEventListener(events.KEYDOWN, this._renderWithKeys)\n    })\n  }\n\n  // private\n\n  /**\n   * Find a button through event.target, then render the corresponding modal attribute via matching target id\n   * @param {Object} event - The event object\n   * @param {Number} key - The key code that called _render()\n   */\n  _render(event, key) {\n    if (!key) event.preventDefault()\n    event.stopPropagation()\n\n    if (this.activeDropdownButton) {\n      this.allowFocusReturn = false\n      this._handleClose(event)\n      this.allowFocusReturn = true\n    }\n\n    // dropdown button / trigger\n    this.activeDropdownButton = event.target\n    this.activeDropdownId = this.activeDropdownButton.getAttribute(selectors.DATA_PARENT)\n\n    if (!this.activeDropdownId) {\n      throw messages.MISSING_DROPDOWN\n      return\n    }\n\n    this.activeDropdownButton.setAttribute(selectors.ARIA_EXPANDED, \"true\")\n\n    // dropdown container\n    this.activeDropdownAttr = `[${selectors.DATA_DROPDOWN}=\"${this.activeDropdownId}\"]`\n    this.activeDropdown = document.querySelector(this.activeDropdownAttr)\n\n    // dropdown menu\n    this.activeDropdownMenuId = this.activeDropdownButton.getAttribute(selectors.DATA_TARGET)\n    this.activeDropdownMenu = document.getElementById(this.activeDropdownMenuId)\n\n    // dropdown button\n    this.activeDropdownButton.setAttribute(selectors.ARIA_EXPANDED, \"true\")\n    this.activeDropdown.setAttribute(selectors.DATA_VISIBLE, \"true\")\n\n    // reset button event listener to close the menu, instead of open it\n    this.activeDropdownButton.removeEventListener(events.CLICK, this._render)\n    this.activeDropdownButton.addEventListener(events.CLICK, this._handleClose)\n\n    document.addEventListener(events.KEYDOWN, this._handleEscapeKeyPress)\n    document.addEventListener(events.CLICK, this._handleOffMenuClick)\n\n    this.activeDropdownLinks = this._getElements(`${this.activeDropdownAttr} > ul > li > a`)\n    this.firstDropdownLink = this.activeDropdownLinks[0]\n    this.lastDropdownLink = this.activeDropdownLinks[this.activeDropdownLinks.length - 1]\n\n    this.firstDropdownLink.addEventListener(events.KEYDOWN, this._handleFirstTabClose)\n    this.lastDropdownLink.addEventListener(events.KEYDOWN, this._handleLastTabClose)\n\n    if (key && key === keyCodes.ARROW_UP) {\n      this.lastDropdownLink.focus()\n    } else {\n      this.firstDropdownLink.focus()\n    }\n\n    this.activeDropdownLinks.forEach(link => {\n      link.setAttribute(selectors.TABINDEX, \"0\")\n      link.addEventListener(events.CLICK, this._handleClose)\n    })\n\n    this.captureFocus(`${this.activeDropdownAttr} > ul`, { useArrows: true })\n  }\n\n  /**\n   * Closes the dropdown if user uses shift and tab keys on the first dropdown element.\n   * @param {Object} event - The event object\n   */\n  _handleFirstTabClose(event) {\n    const shiftKey = event.which === keyCodes.SHIFT || event.shiftKey\n    const tabKey = event.which === keyCodes.TAB\n\n    if (shiftKey && tabKey) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Closes the dropdown if user uses tab key on the last dropdown element.\n   * @param {Object} event - The event object\n   */\n  _handleLastTabClose(event) {\n    const shiftKey = event.which === keyCodes.SHIFT || event.shiftKey\n    const tabKey = event.which === keyCodes.TAB\n\n    if (tabKey && !shiftKey) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Renders dropdown if the user uses arrow up or down.\n   * @param {Object} event - The event object\n   */\n  _renderWithKeys(event) {\n    if (event.which === keyCodes.ARROW_UP || event.which === keyCodes.ARROW_DOWN) {\n      this._render(event, event.which)\n    }\n  }\n\n  /**\n   * Closes currently open dropdown.\n   * @param {Object} event - The event object\n   */\n  _handleClose(event) {\n    event.preventDefault()\n\n    this.releaseFocus()\n\n    this.activeDropdownButton.setAttribute(selectors.ARIA_EXPANDED, \"false\")\n    this.activeDropdown.setAttribute(selectors.DATA_VISIBLE, \"false\")\n\n    this.activeDropdownLinks.forEach(link => {\n      link.setAttribute(selectors.TABINDEX, \"-1\")\n      link.removeEventListener(events.CLICK, this._handleClose)\n    })\n\n    this.activeDropdownButton.removeEventListener(events.CLICK, this._handleClose)\n    this.activeDropdownButton.addEventListener(events.CLICK, this._render)\n\n    document.removeEventListener(events.KEYDOWN, this._handleEscapeKeyPress)\n    document.removeEventListener(events.CLICK, this._handleOffMenuClick)\n\n    if (this.allowFocusReturn) {\n      this._handleReturnFocus()\n    }\n  }\n\n  /**\n   * Use escape key to close dropdown.\n   * @param {Object} event - The event object\n   */\n  _handleEscapeKeyPress(event) {\n    if (event.which === keyCodes.ESCAPE) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Closes dropdown\n   * @param {Object} event - The event object\n   */\n  _handleOffMenuClick(event) {\n    if (event.target !== this.activeDropdownButton && event.target !== this.activeDropdownMenu) {\n      this._handleClose(event)\n    }\n  }\n\n  /**\n   * Puts focus on a the active dropdown button.\n   */\n  _handleReturnFocus() {\n    this.activeDropdownButton.setAttribute(selectors.TAB_INDEX, \"-1\")\n    this.activeDropdownButton.focus()\n    this.activeDropdownButton.removeAttribute(selectors.TAB_INDEX)\n  }\n\n  /**\n   * Add starting attributes to a dropdown.\n   * @param {Element} dropdown - A dropdown element.\n   */\n  _setupDropdown(dropdown) {\n    const dropdownId = dropdown.getAttribute(selectors.DATA_DROPDOWN)\n    const dropdownIdAttr = `[${selectors.DATA_DROPDOWN}=\"${dropdownId}\"]`\n    const dropdownMenuItemsAttr = `${dropdownIdAttr} > ul > li`\n\n    const dropdownMenu = document.querySelector(`${dropdownIdAttr} > ul`)\n    const dropdownButton = document.querySelector(`${dropdownIdAttr} > ${this.dropdownTargetAttr}`)\n\n    dropdownButton.setAttribute(selectors.ARIA_CONTROLS, dropdownMenu.id)\n    dropdownButton.setAttribute(selectors.ARIA_HASPOPUP, \"true\")\n    dropdownButton.setAttribute(selectors.ARIA_EXPANDED, \"false\")\n    dropdownMenu.setAttribute(selectors.ARIA_LABELLEDBY, dropdownButton.id)\n\n    const dropdownMenuItems = this._getElements(dropdownMenuItemsAttr)\n    dropdownMenuItems.forEach(item => item.setAttribute(selectors.ROLE, \"none\"))\n\n    const dropdownMenuItemLinks = this._getElements(\n      `${dropdownMenuItemsAttr} > a, ${dropdownMenuItemsAttr} > button`,\n    )\n    dropdownMenuItemLinks.forEach(link => {\n      link.setAttribute(selectors.ROLE, \"menuitem\")\n      link.setAttribute(selectors.TABINDEX, \"-1\")\n    })\n  }\n}\n","\"use strict\"\n\nimport _Modals from \"./components/modal\"\nimport _Accordion from \"./components/accordion\"\nimport _Dropdown from \"./components/dropdown\"\nimport _Utils from \"./utils\"\n\nconst Modals = new _Modals()\nconst Accordions = new _Accordion()\nconst Dropdowns = new _Dropdown()\nconst Utils = new _Utils()\n\nconst Undernet = {\n  // Components\n  Modals,\n  Accordions,\n  Dropdowns,\n\n  // Utils\n  Utils,\n}\n\nUndernet.start = () => {\n  // Components\n  Undernet.Modals.start()\n  Undernet.Accordions.start()\n  Undernet.Dropdowns.start()\n\n  // Utils\n  Undernet.Utils.enableFocusOutline()\n}\n\nUndernet.stop = () => {\n  // Components\n  Undernet.Modals.stop()\n  Undernet.Accordions.stop()\n  Undernet.Dropdowns.stop()\n\n  // Utils\n  Undernet.Utils.disableFocusOutline()\n}\n\nwindow.Undernet = Undernet\nexport default Undernet\n"],"names":["keyCodes","selectors","NOT_VISUALLY_HIDDEN","FOCUSABLE_TAGS","KEYBOARD_CLASS","events","Utils","_handleFocusTrapWithTab","this","bind","_handleFocusTrapWithArrows","_listenForKeyboard","_listenForClick","focusContainerSelector","focusableChildren","focusableFirstChild","focusableLastChild","listeningForKeydown","trapFocusWithArrows","container","options","_getFocusableElements","length","useArrows","document","addEventListener","removeEventListener","event","tabKey","which","shiftKey","arrowUp","arrowDown","body","classList","add","remove","element","nodeList","querySelectorAll","Array","apply","focusables","map","_getElements","join","containerElement","querySelector","containerActive","activeElement","firstActive","lastActive","preventDefault","focus","_focusNextChild","_focusLastChild","i","messages","Modal","_render","_this","_handleClose","_handleEscapeKeyPress","_handleOverlayClick","modals","modalButtons","activeModalButton","activeModalId","activeModalOverlayAttr","activeModalOverlay","activeModalSelector","activeModal","activeModalCloseButtons","modalContainerAttr","closeButtonAttr","forEach","setAttribute","modal","modalId","getAttribute","modalWrapper","button","_this2","_this3","target","_handleScrollStop","captureFocus","scrollTop","_this4","_handleReturnFocus","_handleScrollRestore","releaseFocus","removeAttribute","_this5","Accordion","_handleSpaceKeyPress","accordionButtons","accordionContentsAttr","accordionContents","activeContainer","activeButton","activeAccordionRowId","activeRowAttr","activeRow","activeContainerId","activeContainerAttr","activeContent","toggleExpandState","toggleContentState","toggleHiddenState","allContentAttr","_setupButton","content","contentRowAttr","_getAccordionRowAttr","id","toggleContentHiddenState","buttonId","accordionRowAttr","shouldContentExpand","buttonContent","getElementById","style","maxHeight","scrollHeight","hasAttribute","accordionButtonState","accordionContentState","_closeAllIfToggleable","_toggleSelectedAccordion","allRows","allContent","allButtons","_toggleAttributeInCollection","activeContentBlock","value","elements","attributeName","currentValue","newValue","DATA_DROPDOWN","DATA_TARGET","DATA_PARENT","DATA_VISIBLE","TABINDEX","ARIA_HASPOPUP","ARIA_CONTROLS","ARIA_LABELLEDBY","ARIA_EXPANDED","ROLE","Dropdown","_renderWithKeys","_handleOffMenuClick","_handleFirstTabClose","_handleLastTabClose","activeDropdownButton","activeDropdown","activeDropdownMenu","activeDropdownLinks","allowFocusReturn","activeDropdownId","activeDropdownAttr","activeDropdownMenuId","dropdownButtons","dropdowns","dropdownTargetAttr","dropdownButtonAttr","dropdown","_setupDropdown","key","stopPropagation","firstDropdownLink","lastDropdownLink","link","TAB_INDEX","dropdownId","dropdownIdAttr","dropdownMenuItemsAttr","dropdownMenu","dropdownButton","item","Undernet","Modals","_Modals","Accordions","_Accordion","Dropdowns","_Dropdown","_Utils","start","enableFocusOutline","stop","disableFocusOutline","window"],"mappings":"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"}